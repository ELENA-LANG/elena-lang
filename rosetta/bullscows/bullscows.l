#define std'dictionary'*.
#define std'basic'*.
#define std'collections'*.
#define std'patterns'*.
#define ext'utils'*.
#define std'routines'arrays'*.

// --- EDigitProp ---
#class EDigitProp
{
    #method get
    [
        ^ self numeric - 30h.
    ]
}

#symbol Digits : aLiteral
    = Summing &&var:List &prop:EDigitProp start:Scan::aLiteral.

#class GameMaster
{
    #field theNumbers.

    #initializer
    [
        // generate secret number
        #var aRandomNumbers := Randomized &&base:(1,2,3,4,5,6,7,8,9) &count:9.
        
        theNumbers := aRandomNumbers~earrayop read &from:0 &to:3 &:esubarray.
    ]

    #method proceed : aGuess
    [
        #if (aGuess count != 4)?
        [
            'program'output << "Not a valid guess.%n".
            
            ^ $self.
        ].

        #var aCows := Integer::0.
        #var aBulls := Integer::0.
                
        #if It::aGuess run: aNumber =
        [
            // check range
            Control if:(aNumber > 0) if:(aNumber < 10).
            
            // check duplicates
            #if (aNumber indexer'clone index'append:1)~EIt find:aNumber
            [
                control fail.
            ].
            
            #if Control if:(aNumber == theNumbers@aNumber index)
            [
                aBulls += 1.
            ]
            | if:(Scan::theNumbers == aNumber)
            [
                aCows += 1.
            ].
        ]
        | [
            'program'output << "Not a valid guess.%n".
            
            ^ $self.
        ].        
        
        #if (aBulls == 4)?
        [
            'program'output << "%nCongratulations! You have won!".
            
            $self fail.
        ]
        | [
            'program'output << "%nYour Score is " << aBulls << " bulls and " << aCows << " cows%n".
        ].
    ]
}

#symbol Program =
[
    #var aGameMaster := GameMaster.

    #while aGameMaster proceed:Digits::(ext'io'console << "Your Guess ?" >> String).
].