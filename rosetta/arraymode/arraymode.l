#define std'dictionary'*.
#define std'basic'*.
#define std'patterns'*.
#define std'routines'*.
#define std'collections'*.

// Averages/Mode

#subject mode.

#symbol ModeValue : anArray =
[
    #var aCountMap := Dictionary.
    Scan::anArray run: anItem =
        [
            #if aCountMap@anItem += 1
            | [
                aCountMap append &dictionary_key:anItem &content:Integer::1.
            ].
        ].
    
    aCountMap~esort run: aPair = (aPair former > aPair later).
    
    #var aResult := List.
    
    #var aMax := aCountMap first_item content.
    Scan::aCountMap run: anItem =
    [
        #if (aMax == anItem)?
            [ aResult += anItem dictionary_key. ].
    ].
    
    ^ aResult.
].

#symbol Program =
[
    #var anArray1 := (1, 1, 2, 4, 4).
    #var anArray2 := (1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17).
    
    #var aMode1 := ModeValue::anArray1.
    #var aMode2 := ModeValue::anArray2.
    
    'program'output << "mode of (" << anArray1 << ") is (" << aMode1 << ")%n".
    'program'output << "mode of (" << anArray2 << ") is (" << aMode2 << ")%n".
].
