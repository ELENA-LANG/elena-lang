#define system.
#define system'routines.
#define extensions.
#define extensions'math.

// --- Constants ---

#symbol Letters    = "abcdefghijklmnopqrstuvwxyz".
#symbol BigLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
#symbol TestText   = "Pack my box with five dozen liquor jugs.".
#symbol Key = 12.

// --- Encrypt / Decript ---

#class Encrypting
{
    #field theKey.
    #field theExtendee.
    
    #constructor new : aKey &extending:anObject
    [
        theKey := aKey.
        theExtendee := anObject.
    ]
    
    #method eval : aChar
    [
        #var anIndex := Letters indexOf &type'index:0 &widechar:aChar.
        
        (-1 < anIndex)
            ? [
                theExtendee eval:(Letters @ (modulus:(theKey+anIndex):26))
            ]
            ! [
                anIndex := BigLetters indexOf &type'index:0 &widechar:aChar.
                (-1 < anIndex)
                    ? [
                        theExtendee eval:(BigLetters @ (modulus:(theKey+anIndex):26))
                    ]
                    ! [
                        theExtendee eval:aChar.
                    ].
            ].
    ]
    
    #method => theExtendee.
}

// --- Functions ---

#symbol encrypt = &&:aText:aKey
    [ Encrypting new:aKey &extending:(Summing new:(String new)) foreach:aText Literal ].

#symbol decrypt = &&:aText:aKey
    [ Encrypting new:(26 - aKey) &extending:(Summing new:(String new)) foreach:aText Literal ].

// --- Program ---

#symbol program =
[
    #var anS := TestText.
    
    consoleEx writeLine:"Original text:" :anS.
        
    anS := encrypt:anS:Key.

    consoleEx writeLine:"Encrypted text:" :anS.

    anS := decrypt:anS:Key.

    consoleEx writeLine:"Decrypted text:" :anS.

    consoleEx readChar.
].