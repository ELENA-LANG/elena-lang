#define std'dictionary'*.
#define std'math'*.
#define std'routines'*.

#symbol Sorted : anArray
    = anArray clone ~esort run: aPair = (aPair former < aPair later).

#symbol Median : anArray =
[
    #var aSorted := Sorted::anArray.
    
        #var aLen := aSorted count.
        #if aLen
            == 0 ? [ ^ nil. ]
            | [
                #var aMiddleIndex := aLen / 2.
                #if aLen~eops modulus:2
                    == 0 ? [ ^ aSorted@aMiddleIndex. ]
                    | [ ^ (aSorted@(aMiddleIndex - 1) + aSorted@aMiddleIndex) / 2. ].
            ].
].

#symbol Program =
[
    'program'output << Median::(4.1r, 5.6r, 7.2r, 1.7r, 9.3r, 4.4r, 3.2r) << "%n".
    'program'output << Median::(4.1r, 7.2r, 1.7r, 9.3r, 4.4r, 3.2r) << "%n".
].