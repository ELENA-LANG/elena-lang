1) ELENA module structure
-------------------------
a) General file structure:
  +--------------+
  | module stamp |
  +--------------+
  | module name  |
  +--------------+
  |  references  |
  +--------------+
  |   messages   |
  +--------------+
  |  constants   |
  +--------------+
  |   sections   |
  +--------------+

b) module stamp - fixed-size module version signature (do not terminated by zero)

c) module name  - zero terminated module name

d) references   - reference section 
   +--------------+
   |    size      |  total section size
   +--------------+ 
   |   reference  |
   |     memory   |
   |  hash table  |

e) messages
   +--------------+
   |    size      |  total section size
   +--------------+ 
   |   message    |
   |   memory     |
   |  hash table  |

f) constants
   +--------------+
   |    size      |  total section size
   +--------------+ 
   |   constant   |
   |    memory    |
   |  hash table  |

g) sections     - section list      

  <total size>                 
  {section}

  where section = 
    <section id>   
    <section size>   
    <section body>

    <relocation table size>
    <reference id>
    <reference position>
       ...

2) ELENA Heap

---------------------------------------------------
   Header  |      YG       |           OG
---------------------------------------------------
           | Main | Shadow | PERM |       MG
---------------------------------------------------

3) VM Table

NOTE: VM Table is empty for stand-alone application

+---------------------+
+    Instance Ptr     +    
+---------------------+
+   getClassVMTRef    +
+---------------------+
+    getSymbolRef     +
+---------------------+
+   getClassName      +
+---------------------+
+    Interprete       +
+---------------------+
+    getLastError     +
+---------------------+

4) Object (GC)
+---------------------+
+      Page Size      +    ; if negative: stack allocated
+---------------------+
+       Length        +    ; if negative: data length ; if positive: number of fields
+---------------------+
+    VMT reference    +    
+---------------------+



5) Object (GCX)
+---------------------+
+      Sync Field     +    
+---------------------+
+      Page Size      +    ; if negative: stack allocated
+---------------------+
+       Length        +    ; if negative: data length ; if positive: number of fields * sizeof(dword)
+---------------------+
+    VMT reference    +    
+---------------------+


6) Method Stack
+---------------------+
+         SELF        +    
+---------------------+
+         Param       +    
+---------------------+
+      RET Address    +    
+---------------------+
                                                   
method should copy 0 to self if it breaks the flow, otherwise the method result should
be copied there; 

7) Linux paths:

  lib    - /usr/lib/elena/lib30
  core   - /usr/lib/elena/core/x32
  src    - /usr/share/elena/src30
  config - /etc/elena
  data   - /usr/share/elena
  
8) Linux ELF format:

-- header / text segment --
 <header>                     
 <program header>
 <text>                  code section
 <plt>                                                         
-- rodata segment --
 <rdata>                 rdata section
 <dynamic>                    
 <interpreter>
-- data segment --
 <got>                   import section
 <relocation table>           
 <symbol table>           
 <string table>              
 <stat>                  stat section
 <bss>                   data section
-- debuf segment ---

9) Typecasting algorithm:
   ----------------------

- explicit : declared subject

- structural : elStructureRole flag

- content type  : elDebugMask bit field

- readonly : elReadOnlyRole flag

(type != source)
|
+-> yes -> (target explicit?)
|            |
|            +-> yes -> (target structural?)
|            |            |
|            |            +-> yes ---> (source structural?)
|            |            |              |
|            |            |              +-> yes -> (source is target wrapper?)
|            |            |              |            |
|            |            |              |            +-> yes -> [create a local copy]              // vint as int
|            |            |              |            |            
|            |            |              |            +-> no --> (source is local && target is source wrapper?)              
|            |            |              |                         |
|            |            |              |                         +-> yes ->(target embeddable?)
|            |            |              |                         |           |
|            |            |              |                         |           +-> yes -> [ pass directly ]    // int as vint
|            |            |              |                         |           |
|            |            |              |                         +-----------+-> no --> [box the source if local] 
|            |            |              |                                                |
|            |            |              |                                                |
|            |            |              +--> no -----------------------------------------+--> [send typecast message to source]
|            |            |
|            |            +-> no --> (source is nil)
|            |                         |
|            |                         +--> yes --> [pass directly]
|            |                         |
|            |                         +--> no ---> [box the source if local]
|            |                                      |
|            |                                      (source.class == target.class || source.class has target.class)
|            |                                        |
|            |                                        +--> yes --> [pass directly]
|            |                                        |
|            |                                        +--> no ----> [send typecast message to source]
|            |                                      
+------------+--> no --> [ pass directly ]

10) Script engine commands

[ ]  - reverse the parameters order
; - free the stack
, - continue
! - put breakpoint
^ - send a message , if breakpoint available is inserted after it
