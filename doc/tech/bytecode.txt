ELENA byte codes (or ecodes)
============================

 ELENA virtual machine registers:
 --------------------------------
   f(p)   - frame pointer     (positive values - pointing to the current frame, 
                               negative - to the previous frame)
   s(p)   - stack pointer     (only positive)

   a(cc)  - accumulator       (object register) 

   b(ase) - base              (object register) 

   d(ex)  - index             (data register) 
   
   e(xt)  - length / message  (data register) 
 

 Register operations:
 --------------------
 acopyb                     - base => acc
 
 acopyf i                   - fp+i => acc
                              does not affect ext register (ECX)           
 
 acopyr r                   - r => acc
 
 acopys i                   - sp+i => acc
                              does not affect ext register (ECX)

 address label              - load label address to ext
 
 bcopya                     - acc => base

 bcopyf i                   - fp+i => base                                        
                              does not affect ext register (ECX)           
          
 bcopys i                   - sp+i => base                                        
                              does not affect ext register (ECX)           
          
 bcopyr r                   - r => base
                              
 bswap                      - a <=> b                                              

 copym m                    - ext << message

 dcopy i                    - i => index
 
 dcopycount                 - index << ext.paramcount
 
 dcopye                     - index << ext
 
 dcopyr                     - index << real index
 
 dcopysubj                  - index << ext.subj
 
 dcopyverb                  - index << ext.verb
 
 ecopy i                    - i => ext
 
 ecopyd                     - ext << index
                              
 eswap                      - index <=> ext
 
 scopyf i                   - sp <= fp + i
 
 selectr r1, r2             - acc = (index = 0 ? r1 : r2)
 
 setsubj m                  - ext.subject << m

 setverb m                  - ext.verb << m
 
 xselectr r1, r2            - acc = (acc = 0 ? r1 : r2)
 

 Memory operations:
 -----------------
 aloadai i                  - [acc::i] => acc 

 aloadbi i                  - [base::i] => acc

 aloadr r                   - [r] => acc

 asavebi i                  - [base::i] <= acc;
                               use GC reference bit masks
 
 asaver r                   - [r] <= acc
 
 axsavebi i                 - [base::i] <= acc;
                               direct
 
 bloadr r                   - [r] => base

 bread                      - acc[index] >> ext                               
 
 breadb                     - acc[index] >> [byte]ext
 
 breadw                     - acc[index] >> [short]ext
 
 bwrite                     - base[index] << ext
 
 bwriteb                    - base[index] << [byte]ext
 
 bwritew                    - base[index] << word[ext]
                  
 copy                       - {base} << {acc}, base.Length (*index, ext affected)

 copyb                      - {base} >> {acc}, acc.Length

 get                        - acc <= base[index] ;
 
 ncopy                      - int[base] << int[acc]
 
 ncopyb                     - int[base] >> int[acc]
 
 nload                      - int[acc] >> index
  
 nloade                     - int[acc] >> ext
  
 nloadi                     - int[acc+i*4] >> index
 
 nread                      - acc[index * 4] >> ext                               
 
 nsave                      - int[base] << index
 
 nsavei                     - int[base+i*4] << index
 
 nwrite                     - base[index * 4] << ext
 
 nwritei                    - base[i * 4] << ext
 
 bwritei                    - base[i * 4] << byte[ext]
 
 nreadi                     - acc[i * 4] >> ext
 
 rcopy                      - real index << index
 
 rsave                      - real[base] << real index
 
 set                        - acc => base[index] ; (*ext affected)
                              
 wread                      - [acc][index*2] >> [short]ext

 wwrite                     - [base][index*2] << [short]ext

 xset                       - acc => base[index] ;
                              ; direct


 Stack operations:
 -----------------
 aloadfi i                  - [fp+i] => acc

 aloadsi i                  - [sp+i] => acc;
                               does not affect m register (EDX)

 asavefi i                  - [fp+i] <= acc 
 
 asavesi i                  - [sp+i] <= acc
 
 aswapsi i                  - [sp+i] <=> acc

 bloadfi i                  - [fp+i] => base

 bloadsi i                  - [sp+i] => base

 bsavesi i                  - [sp+i] <= base
 
 bswapsi i                  - [sp+i] <=> base

 dloadfi i                  - [fp:i] => index
 
 dloadsi i                  - [sp:i] => index

 dsavefi i                  - [fp:i] <= index

 dsavesi i                  - [sp:i] <= index

 dswapsi                    - ext <=> [sp:i]
 
 eloadfi i                  - [fp:i] => ext
 
 eloadsi i                  - [sp:i] => ext

 esavefi i                  - [fp:i] <= ext
                              
 esavesi i                  - [sp:i] <= ext
 
 eswapsi                    - ext <=> [sp:i]

 pop                        - sp--; 

 popa                       - acc <= [sp] ; sp--
 
 popb                       - base <= [sp] ; sp--
 
 popd                       - index <= [sp] ; sp--
    
 pope                       - ext <= [sp] ; sp--
 
 popi n                     - sp-=i; 
 
 pusha                      - acc => [sp+1] ; sp++                  

 pushai i                   - [acc::i] => [sp+1] ; sp++
 
 pushb                      - base => [sp+1] ; sp++
 
 pushn n                    - n  => [sp+1] ; sp++
 
 pushd                      - index => [sp+1] ; sp++;

 pushe                      - ext => [sp+1] ; sp++;
	
 pushf i                    - fp+i => [sp+1] ; sp++
 
 pushfi i                   - [fp+i] => [sp+1] ; sp++
 
 pushr r                    - r  => [sp+1] ; sp++
 
 pushsi i                   - [sp+i] => [sp+1] ; sp++
           

 Call operations:
 ----------------
 call                       - call [acc] procedure

 calli i                     - call [acc+i] procedure

 jumpn n                    - jump [acc+n] procedure
 
 callextr r                 - calls the external procedure ; index contains the result
 
 callr r                    - calls the procedure;
                              acc contains the result
 

 Jump operations:
 ---------------- 
 else label                 - jump to the label if index != ext
 
 elseb label                - jump to the label if acc != base
 
 elsem m, label             - jump to the label if ext != message
 
 elsen n, label             - jump to the label if index != n
 
 elser r, label             - jumps to the label if acc != r
 
 if label                   - jump to the label if index == ext                                                   

 ifb label                  - jump to the label if acc == base
 
 ifheap label               - jump to the label if acc is allocated in heap (more precisely - not in the stack) (*index affected)

 ifm m, label               - jump to the label if ext == message
 
 ifn n, label               - jump to the label if index == n
 
 ifr r, label               - jumps to the label if acc == r
 
 jump label                 - jumps to the label
 
 less label                 - jump to the label if index < ext

 lessn n, label             - jump to the label if index < n

 next label                 - index++; if index < ext, jump to the label
 
 notless label              - jump to the label if index >= ext

 
 Object operations:
 ------------------
 acallvd                    - call acc::VMT[index]

 acallvi i                  - call acc::VMT[i] method

 ajumpvi i                  - redirect to acc::VMT[i] method
 
 ajumpi i                   - redirect to acc[i] address
 
 bcreate                    - create the object with size=index and vmt=acc, out : acc  (*index and ext affected)
 
 blen                       - [acc].Length >> index ; where acc is a object

 bsredirect                 - search acc::VMT for the message in ext;
                              if found jumps to it; binary search is used ; index, ext, acc presaved

 class                      - base::VMT >> acc 
 
 package                    - base::Package >> acc 
 
 create                     - create the object with length=index and vmt=acc, out : acc   (*index and ext affected)
 
 flag                       - acc::VMT::flag >> index 

 len                        - [acc].Count >> index;
 
 count                      - [base].Count >> ext;
 
 mindex                     - search for ext in acc:VMT; out: index or -1
 
 ncreate                    - create the object with size=index*4 and vmt=acc, out : acc   (*index and ext affected)

 new vmt, i                 - create the object with the specified
                               number of fields;
                               out: acc contains the class instance
                               
 newn vmt, n                - create the binary object with the specified size ;
                               out: acc contains the class instance

 nlen                       - [acc].Length >> index / 4 ; where acc is a object

 validate                   - validates if acc is not zero, otherwise break the code
                                                                                                                                                
 wcreate                    - create the object with size=index*2 and vmt=acc, out : acc   (*index and ext affected)
 
 wlen                       - [acc].Length / 2 >> index

 xcallrm r, m               - calls directly the method resolved by JIT by r and m
                              acc contains the result
 
 xindexrm r, m              - directly resolve message mapping for the spcified class
 
 xjumprm r, m               - jumps directly the method resolved by JIT by r and m
 
 xlen                       - [acc].Count >> ext ;


 Misc operations:
 ---------------- 
 breakpoint                 - used for debugging

 hook label                 - assign a new exception handler ; ext affected (*index and ext affected)

 throw                      - raise an exception (acc contains the exception object)

 unhook                     - remove the current exception handler

 snop                       - thread safe nop operation
 
 trylock                    - try to lock [esp], if already locked - index = 1, otherwise index = 0
 
 freelock                   - free eax


 Frame operations:
 -----------------              
 close                      - restore the previous frame ;
                              should be paired with open
                              it should be only one command per procedure ; 
 
 equit                      - terminates the procedure ; clear the stack parameters, based
                              on ext

 exclude                    - should be called before external call, excluding the stack starting from ESP from GC frames
 
 open i                     - save the last frame and open the new frame ; 
                              init the frame header offset
                              it should be only one command per procedure ; 
 
 quit                       - terminates the procedure;

 quitn                      - terminates the procedure;
                              clear the stack parameters

 reserve i                  - exclude part of the stack from managed stack frame ;
                              should follow "open" byte code
 
 restore n                  - remove the excluded stack

 init i                     - allocate the stack block for variables and fill it with zero ; acc,base are undefined


 Arithmeric operations:
 ----------------------
 add                        - index += ext

 addn n                     - index += n
 
 andn n                     - index && n => index
 
 dec                        - index--
 
 eaddn                      - ext += n

 inc                        - index++
 
 ladd                       - long[base] += long[acc]
 
 land                       - long[base] && long[acc]   (*index and ext affected)
 
 lcopy                      - long[base] << long[acc]

 lcopyb                     - long[base] >> long[acc]

 ldiv                       - long[base] /= long[acc]   (*index and ext affected)
 
 lmul                       - long[base] *= long[acc]   (*index and ext affected)
 
 lnot                       - long[base] << not long[acc]
 
 lor                        - long[base] || long[acc]    (*index and ext affected)
 
 lshift                     - long[base] <<= index       (*index and ext affected)
 
 lsub                       - long[base] -= long[acc]
 
 lxor                       - long[base] ~~ long[acc]     (*index and ext affected)

 muln n                     - index * n => index
 
 divn n                     - index / n => index
 
 nadd                       - int[base] += int[acc]
 
 nand                       - int[base] && int[acc]
 
 ndiv                       - int[base] /= int[acc]
 
 nmul                       - int[base] *= int[acc]
 
 nnot                       - int[base] << not int[acc]
 
 nor                        - int[base] || int[acc]

 not                        - !index => index
 
 nshift                     - int[base] <<= index
 
 nsub                       - int[base] -= int[acc]
 
 nxor                       - int[base] ~~ int[acc]

 or                         - index || ext => index

 orn n                      - index || n => index
 
 rabs                       - base << abs(real:acc)
 
 radd                       - real[base] += real[acc]

 rdiv                       - real[base] /= real[acc]

 rexp                       - base << exp(real:acc)
 
 rint                       - base << int(real:acc)
                                                                                                     
 rln                        - base << ln(real:acc)

 rload                      - real index << real[acc]
 
 rmul                       - real[base] *= real[acc]

 rround                     - base << round(real:acc)

 rsub                       - real[base] -= real[acc]

 shiftn n                   - index >> n  => index
 
 sub                        - index -= ext


 Comparision operations:
 ----------------------- 
 lequal                     - long[acc] == long[base] ; if true - index = 1, if false - index = 0

 lless                      - long[acc] < [base] ; if true - index = 1, if false - index = 0
 
 nequal                     - int[acc] == int[base] ; if true - index = 1, if false - index = 0

 nless                      - int[acc] < int[base] ; if true - index = 1, if false - index = 0
 
 requal                     - real[acc] == real[base] ; if true - index = 1, if false - index = 0
 
 rless                      - real[acc] < real[base] ; if true - index = 1, if false - index = 0

