ELENA byte codes (or ecodes)
==============================

 ELENA virtual machine registers:
 --------------------------------


 Register operations:
 --------------------
   f(p)   - frame pointer     (positive values - pointing to the current frame, 
                               negative - to the previous frame)
   s(p)   - stack pointer     (only positive)

   acc    - accumulator      (ebx)

   index  - data accumulator (edx)
   eindex - data accumulator extension (edi)


 Register operations:
 --------------------
 and n                      - index && n => index
 
 coalesce                   - acc ? [sp]

 coalescer r                - acc ? r

 dec i                      - index -= i

 get                        - acc[index] => acc

 geti i                     - acc <= acc[i] ;

 inc i                      - index += i
 
 mul i                      - index *= i
 
 div i                      - index /= i
 
 load                       - int[acc] => index

 loadi i                    - acc[i] => index

 loadfi i                   - [fp+i] => index

 loadsi i                   - [sp+i] => index

 loadverb                   - index.verb >> index
 
 lsave  i                   - long[acc] <= long index ; should directly follow lcallextr

 movm m                     - m => index

 movn n                     - n => index

 movf n                     - fp+n => acc

 movfip i                   - fp+i => acc

 movfipd i                  - fp+i+index => acc  (if i < 0, index is inverted) , current only negative supported
 
 movr r                     - r => acc
           
 movsip i                   - sp+i => acc

 movv m                     - m  => index.verb
 
 storev                     - index.verb => [sp].verb
 
 not                        - !index => index

 or n                       - index && n => index
 
 xor n                       - index ~~ n => index
 
 peek                       - [sp][index] => acc

 peekfi i                   - [fp+i] => acc;

 peekr r                    - [r] => acc

 peeksi i                   - [sp+i] => acc;

 rset                       - real index << index
 
 rload                      - real index << real[acc]
 
 rsave                      - real[acc] << real index
 
 rget                       - index << real index
 
 save                       - [acc] <= index

 savei i                    - acc[i] <= index

 savef n                    - fp+n <= index

 loadf n                    - fp+n => index

 savesi i                   - [sp+i] <= index

 savefi i                   - [fp+i] <= index

 select r1, r2              - acc = (index = 0 ? r1 : r2)

 set                        - [sp] => acc[index]

 xset                       - [sp] => acc[index]; direct operation

 xsetr r                    - acc[index] <= r
                                                                                                               
 seti i                     - [sp] => acc[i]         

 setv                       - acc[0].verb <= index

 shl n                      - index << n  => index
 
 shr n                      - index >> n  => index
                       
 store                      - [sp][index] <= acc

 storefi i                  - [fp+i] <= acc 
 
 storer r                   - [r] <= acc
                       
 storesi i                  - [sp+i] <= acc

 swap                       - [sp] <=> acc

 swapd                      - [sp] <=> index

 xload n                    - [acc + n] >> index 

 xselectr r1, r2            - acc = (acc = 0 ? r1 : r2) 

 xseti i                    - [sp] => acc[i]; direct operation
                       
 xsetfi i1 i2               - [fp+i1] => acc[i2]; direct operation 

 xsave n                    - [acc + n] << index 


 Memory operations:
 -----------------
 clone                      - copy [acc] << [esp], acc.Length bytes ; NOTE : should support a primitive reference array as well

 clonef n                   - copy [acc] << fp+n, acc.Length bytes ; NOTE : should support a primitive reference array as well

 copyf  n1, n2              - copy [acc] << fp+n1, n2*4-bytes

 copyfi i, n                - copy [acc] << [fp+i], n*4-bytes

 copyto n                   - copy [sp] >> acc[index], n*4-bytes (index ~ dword-aligned)

 copyai i, n                - copy acc[i] >> [sp], n*4-bytes

 copytoai i, n              - copy [sp] >> acc[i], n*4-bytes

 copytof  n1, n2            - copy [acc] >> fp+n1, n2*4-bytes

 copytofi i, n              - copy [acc] >> [fp+i], n*4-bytes

 create r                   - create the object with length=[esp], out : acc, index is affected

 createn r, i               - create the object with size=[esp]*i, out : acc, index is affected

 len                        - [acc].Size >> index ; where acc is a object

 read                       - acc[index] >> index

 readtof n1, n2             - copy acc[index] >> fp+n1, n2*4-bytes
 
 xtrans                     - copy [sp][index] => acc[index]; direct operation

 xrsavef n1,n2              - real[fp:n1] <= n2
                                                                                                               
 xsaveai i,n                - acc[i] <= n
                                                                                                               
 xsavesi i,n                - sp[i] <= n
                                                                                                               
 xsavef n1,n2               - fp:n1 <= n2
                                                                                                               
 xaddf n1,n2                - fp:n1 += n2
                                                                                                               
 xwrite n                   - copy [sp] >> acc[index], n-bytes  

 move n1, n2                - copy acc + n1 => [sp], n2-bytes

 moveto n1, n2              - copy [sp] => acc + n1, n2-bytes

 xcreate r                  - create the object with size=[esp].Size, out : acc, index is affected

 xnew                       - create the object with length=[esp], acc contains VMT reference, 
                              out : acc, index is affected















 Arithmeric operations:
 ----------------------
 addf n                     - dword[fp+n] += index

 laddf n                    - qword[fp+n] << qword[fp+n] + qword[acc]

 landf n                    - qword[fp+n] << qword[fp+n] && qword[acc]

 ldivf n                    - qword[fp+n] << qword[fp+n] / qword[acc]

 lmulf n                    - qword[fp+n] << qword[fp+n] * qword[acc]

 lorf n                     - qword[fp+n] << qword[fp+n] || qword[acc]

 lsubf n                    - qword[fp+n] << qword[fp+n] - qword[acc] 

 lshlf n                    - qword[fp+n] << qword[fp+n] $shl qword[acc] 

 lshrf n                    - qword[fp+n] << qword[fp+n] $shr qword[acc] 

 naddf n                    - dword[fp+n] << dword[fp+n] + dword[acc]

 nandf n                    - dword[fp+n] << dword[fp+n] && dword[acc]
 
 ndivf n                    - dword[fp+n] << dword[fp+n] / dword[acc]

 nmulf n                    - dword[fp+n] << dword[fp+n] * dword[acc]

 norf n                     - dword[fp+n] << dword[fp+n] || dword[acc]

 nshlf n                    - dword[fp+n] << dword[fp+n] $shl dword[acc] 

 nshrf n                    - dword[fp+n] << dword[fp+n] $shr dword[acc] 

 nsubf n                    - dword[fp+n] << dword[fp+n] - dword[acc] 

 nxorf n                    - dword[fp+n] << dword[fp+n] ~~ dword[acc]

 raddf n                    - real[acc] << real[fp+n] + real[acc]

 raddnf n                   - real[fp+n] << real[fp+n] + int[acc]

 rdivf n                    - real[acc] << real[acc] / real[fp+n]

 rdivnf n                   - real[fp+n] << real[fp+n] / int[acc] 

 rmulf n                    - real[acc] << real[acc] * real[fp+n] 

 rmulnf n                   - real[fp+n] << real[fp+n] * real[acc]

 rsubf n                    - real[fp+n] << real[fp+n] - real[acc] 

 rsubnf n                   - real[fp+n] << real[fp+n] - int[acc]

 rexp                       - real[sp] << exp(real[acc]) 

 rsin                       - real[sp] << sin(real[acc]) 

 rcos                       - real[sp] << cos(real[acc]) 

 rarctan                    - real[sp] << arctan(real[acc]) 

 rln                        - real[sp] << ln(real[acc]) 

 rabs                       - real[sp] << abs(real[acc]) 

 rround                     - real[sp] << round(real[acc]) 

 rint                       - real[sp] << int(real[acc]) 

 sub                        - index -= int[acc]

 subf n                     - index -= dword[fp+n]

 Comparision operations:
 ----------------------- 
 equal                       - acc == [sp] ; if true - index = 1, if false - index = 0

 equalfi i                   - acc == fp[o] ; if true - index = 1, if false - index = 0

 lequal                      - long[acc] == long[sp] ; if true - index = 1, if false - index = 0

 lless                       - long[acc] < long[sp]  ; if true - index = 1, if false - index = 0

 nequal                      - int[acc] == int[sp] ; if true - index = 1, if false - index = 0

 nless                       - int[acc] < int[sp]  ; if true - index = 1, if false - index = 0

 requal                      - real[acc] == real[sp] ; if true - index = 1, if false - index = 0

 rless                       - real[acc] < real[sp]  ; if true - index = 1, if false - index = 0


 Stack operations:
 -----------------                                           
 allocd                     - sp+=index; reserve and fill with zeros; new sp value is aligned to 2 in x86-64 mode

 alloci i                   - sp+=i; reserve and fill with zeros; new sp value is aligned to 2 in x86-64 mode

 freei i                    - sp-=i; new sp value is aligned to 2 in x86-64 mode
 
 pop                        - sp--
 
 popa                       - acc <= [sp] ; sp--
 
 popd                       - index <= [sp] ; sp--
    
 push                       - acc[index] => [sp+1] ; sp++                  

 pusha                      - acc => [sp+1] ; sp++                  

 pushai i                   - [acc::i] => [sp+1] ; sp++
 
 pushd                      - index => [sp+1] ; sp++                  

 pushf n                    - fp+n => [sp+1] ; sp++
 
 pushfi i                   - [fp+i] => [sp+1] ; sp++
 
 pushfip i                  - fp+i => [sp+1] ; sp++
 
 pushn n                    - n  => [sp+1] ; sp++

 pushr r                    - r  => [sp+1] ; sp++

 pushsip i                  - sp+i => [sp+1] ; sp++

 pushsi i                   - [sp+i] => [sp+1] ; sp++
 

 Frame operations:
 -----------------              
 close                      - restore the previous frame ;
                              should be paired with open
                              it should be only one command per procedure ; 
 
 mquit                      - terminates the procedure ; clear the stack parameters, based
                              on index

 open i                     - save the last frame and open the new frame ; 
                              init the frame header offset
                              it should be only one command per procedure ; 
 
 setframe i                 - init the frame header offset

 quit                       - terminates the procedure;
                              acc / index are not affected

 quitn i                    - terminates the procedure;
                              clear the stack parameters

 reserve n                  - exclude part of the stack from managed stack frame ;
                              should follow "open" byte code
 
 restore n                  - remove the excluded stack plus two previous frame header


 Call operations:
 ----------------
 callextr r,f               - calls the external procedure ; index contains the result
 
 callr r                    - calls the procedure;
                              acc contains the result
 
 

 Misc operations:
 ---------------- 
 address label              - load label address to index
 
 breakpoint                 - used for debugging

 freelock                   - free [esp]

 hook label                 - assign a new exception handler ; (index affected)

 loadenv                    - %SYSTEM_ENV => index 

 nop                        - idle command  

 snop                       - thread safe nop operation
 
 throw                      - raise an exception (acc contains the exception object)

 trylock                    - try to lock [esp], if already locked - index = 1, otherwise index = 0
 
 unhook                     - remove the current exception handler


 Object operations:
 ------------------
 allocn vmt, n               - create the permanent binary object with the specified size ;
                               out: acc contains the class instance, index - undefined

 bsredirect                 - search acc::VMT for the message in index;
                              if found jumps to it; binary search is used ; index, acc presaved

 callrm r, m                - calls directly the method resolved by JIT by r and m
                              acc contains the result
 
 callvi i                   - call acc::VMT[i] method

 class                      - acc::VMT >> acc 
 
 count                      - acc.Length >> index   

 fillri r, i                - fill the object with the value i-times

 flag                       - acc::VMT::flag >> index 

 jumpi i                    - redirect to acc[i] address
 
 jumprm r, m                - jumps directly the method resolved by JIT by r and m
 
 jumpvi i                   - redirect to acc::VMT[i] method
 
 mcount                     - message[index].Count >> index   

 mindex                     - search for ext in acc:VMT; out: index or -1
 
 mtredirect r, m            - search in message table r the message in index and provided parameter list; if found jumps to it;

 new vmt, i                 - create the object with the specified
                               number of fields;
                               out: acc contains the class instance, index - undefined
                               
 newn vmt, n                - create the binary object with the specified size ;
                               out: acc contains the class instance, index - undefined

 vcallrm r, m               - directly resolve message mapping for the specified class
 
 vjumprm r, m               - jumps directly to the message mapping by JIT by r and m
 
 xmtredirect r,m            - search in message table r the message in index and provided parameter list; if found jumps to direct address;

 xredirect i                - index - message, acc[i], acc[i+1], ... - list of overload list, null terminated;
                              searches in overload list for mathced signature, if found jumps to direct address;
                              otherwise goes to the next one, until zero is encountered

 checksi i                  - [sp] is-instance-of acc ? -1 : 0
 
 parent                     - base::Parent >> acc ; returns parent or package depending on the class flag


 Jump operations:
 ---------------- 
 else label                 - jump to the label if index != acc[0]
 
 elsen n, label             - jump to the label if index != n
 
 elser r, label             - jumps to the label if acc != r

 jump label                 - jumps to the label
 
 if label                   - jump to the label if index == acc[0]
 
 ifcount                    - jump to the label if index == acc.count
 
 ifheap label               - jump to the label if acc is allocated in heap (more precisely - not in the stack) (*index affected)

 ifn n, label               - jump to the label if index == n
 
 ifr r, label               - jumps to the label if acc == r

 lessn n, label             - jump to the label if index < n

 notgreater label           - jump to the label if acc[0] <= index
 
 notless label              - jump to the label if acc[0] >= index
