1) Source => custom syntax rules => Syntax Tree

2) Syntax Tree => custom build rules => Build Tree

3) BuildTree => byte codes

--------------------

a) build tree



b) byte code - eax(edx) - index, ebx - acc






IDENTITY_SCOPE ::= TOKEN+ "=" EXPRESSION ";"
TOKEN          ::= identifier 
EXPRESSION     ::= TOKEN


a = 2;

SCOPE ( NAME <SYMBOL_ATTR> LINE ( NUMERIC_LITERAL <EXPRESSION_ATTR> ) )


symbol a = 2;

SCOPE ( ATTRIBUTE NAME EXPRESSION ( NUMERIC_LITERAL ) )





IDENTITY_SCOPE ( ATTRIBUTE* NAME EXPRESSION )

SYMBOL ( ATTRIBUTE* NAME EXPRESSION )
















a.msg(1,2)


TOKEN TOKEN TOKEN TOKEN <MESSAGE>


a(2)
a(2){ ... }





a.prop
a.msg()


expr   ::= $identifier "." $identifier property;
expr   ::= $identifier "." $identifier "(" ")" message;



expr   ::= property : $identifier "." $identifier
expr   ::= message : $identifier "(" ")" message;


operation ::= $identifier  



expr
  "a"
  "prop"


start ::= symbol;

symbol ::= symbol : token "=" expression;

expression ::= expression : token 



prediction_stack
key_queue




s ::= !symbol_key token_key sign_key !expression_key *token expression_key! symbol_key! 


symbol_key! expression_key! 
!symbol_key !expression_key token


k




a b key
a b key









symbol_key  <-
token_key
expression_key
symbol_postfix
0












symbol ::= :traceble token_name "=" expression ";";





