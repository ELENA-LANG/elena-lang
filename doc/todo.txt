------                                 
In development:
------         
              dev2 - refactoring
                * mov GC to C code : #77
                * get rid of EXPAND_HEAP, NEW_HEAP

              dev2 - linux32
                * uncomment LoadClassName, LoadMessageName
                * compile hello world

              dev - rosetta code samples
                * Babbage problem

              dev - migration
                * rosetta code samples : test twentyfour
                * rosetta code samples : Anagrams
                * rosetta code samples : Amicable pairs
                * Amicable pairs using yield method
                * migrate changes from core to corex
                * anagram sample with corex
                * collatz sample
                * db sample
                * script samples
                * gui samples
                * uncomment all code in LIB50
                * implement some roseta code samples
                * String / WideString - add<'Char>
                * regression tests
                * api doc - with description
                * xforms

              dev - test / optimization
                * double boxing : in-place - conditonal / unconditional
                * double boxing - n * (m + k), n,m,k - local integers
                * align block code by 16
                * optimize pi sample ( < 5s )

              dev - implementation
                * fixed-size array boxing (system'io'WIN32_FIND_DATA)

              dev - test / optimization
                * boxing external operation
                * double assigning : operation with struct field : var s := x + /*y*/1; (where x is a word field)
                * double assigning : int n := 2; var o := n + 1 / var o := n
                * field boxing : e.g x + x - should not be boxed twice
                * field boxing : double assigning
                * boxing an array, assinging to the local variable - get rid of double assigning
                * operations with byte or word 
                * saving dword or qword 
                * simplify the operations with struct fields (size=1,2,4,8,...)
                * copying 4,8,1,2 bytes
                * translit sample: List should be compiled as constant list
                * resolving byref template - cache the resolved results
                * review byte code in core_routines and BCWriter - check for more optimal opcodes
                * it should be possible to turn-off optimization (opL1)
                * test : branching external implementation : returning a value from closure 
                * it should be possible to extend attributes / template statements from anoter libraries
                * test if big alloc is proper working
                * optimization : assigning a field with a local - there should be direct byte code
                * adding source path link on tempate based classes with field initializers
                * private / internal class templates
                * invalid operation : var a.test();
                * debugger : do not copy template parameter terminal info
                * new opcode : setfi
                * read / write byte, short - without AND operation
                * function closures : strong one - should be resolved directly if possible
                * public / private / internal extensions
                * resolving extension : if two extension passed to the argument try to find if one of them is
                  "more precise" than another - use the more precise directly
                * create a big list (bigger than YG)
                * boxing and unboxing a primitive array?
                * test super (normal, stack unsafe)
                * test internal / public / private classes
                * variadic arguments : unboxing
                * test internal / public / private / proteced methods
                * test internal / public / private / proteced constructors
                * public / private / internal properties
                * direct operations with int constants
                * boxing, unboxing, closure initializing
                * boxing byref variable : use intializing, direct assinging after creation without filling with nils
                * test static fields with singleton
                * test const fields : override the parent constant value
                * test global references : with new, var, cast, parent, symbol
                * test property with template-based type, array type
                * test embeddable method return with by ref variable
                * test accumulating constants
                * assigning a big number to short / byte local variable - should be truncated?
                * boxing ext call result
                * optimize interface implementation . try to use direct / semi-direct call when possible
                * optimize operations with int[], short[], byte[] arrays
                * ByteNumber#class.new[2] - idle command - "pushr 0"
                * alt - no need to assign temp local for local / field / param
                * test long / real arithmetic, comparision
                * test negative long to int conversion
                * test int/byte/short/long to real conversion
                * test real to byte/short/int/uint/long conversion
                * test expression with several boxed fields 
                * check notless : literal, wide, bytearray, array
                * optimize IntNumber#class.#constructor[1]
                * CharValue.new = $0 -> should create a new class
                * CreateClass / CreateStruct with initializers - no need to clear newly created object
                * generateInitializer - support constants as well for onlyLocal mode
                * optimize array creation
                * test creating an array : non-empty, empty
                * operations in symbol
                * call inernal function directly (without intermediate step in system'routines) when it is possible
                * optimize xreadn, xwriten
                * do we need lxEmbeddableAttr and optimiation rule?
                * warn if the extension method is called from itself (short-cutting)
                * optimization : do not call idle method
                * static methods : multimethods
                * stack safe operation returning itself - should be boxed if it is used as an unsafe argument
                * tune ByteCodeWriter::allocateStack - number of direct operations (more then 4?)
                * bytecode optimization : storefi peekfi ==  => storefi nop; (storefi and peekfi have the same argument, no need to name all 
                  possible values)
                * copying  a buffer with unaligned size
                * auto conversion methods should be marked as idle
                * boxArgument - fieldexpr should be better mapped
                * stack allocated variables : assigning nil, default constructor call, ...
                * stack allocation should not be cleared
                * stack allocates classes should clear its body
                * assigning struct field with int constant
                * int operation : 1 + i
                * ifheap - is not correctly recognize data allocated classes

              dev - usability
                * ref argument should be a variable
                * compile single file project

              dev - elena50
                * external code : long, real ret value
                * closures: presaved arguments
                * closures: race conditions
                * closures: returning a value
                * #190 : Closure : auto boxing / unboxing local variables 
                * public / internal / private extensions?
                * auto returning
                * extension message - can be applied only to the generic extension?
                * invoke extension directly

              xdev elena50
                * script samples
                * gui samples
                * db samples
                * socket samples

              xdev - linux32
                * (re)implement internal String.read<int,ref<byte>>
                * (re)implement UnsafePointer.cast<string>
                * (re)implement FileStrean.set length<int>

              xdev debugger
                * uncomment DebugController::parseMessage, cleanUp
                * step over external / message / loop / if call?
                * step over last statement (without terminator)
                * watch message / subject info

              dev50 - #495 Inheritable static methods
                * sealed static methods : multimethods
		* close issue 

              dev50 - source code
                * uncomment validateUnresolved
                * remove all commented code

              dev - new features
                * multi-return methods : dynamic objects
                * system'Extension : variadic argument should be boxed directly into extension
                * resend to constant - no need for frame
                * public / private / internal / protected fields
                * if all constructors are internal - can be inherited only inside the module
                * replacing embeddable constructor call with direct operarions?
                * setting several properties in row  new A().set(subj A,2).set(subj B,3) 
                * initialize property
                * countable
                * implement analog of C# enum
                * analog of C# $ strings
                * break / contninue
                * method templates
                * function return type : e.g. int f() = 1;
                * it should be possible to create a class from static method (using self)
                * public / private / internal / protected properties
                * property : auto injected attributes should be ignored if it is not allowed (e.g. public)??
                * fields with reference name
                * reference identifier name?
                * should extensions hasan access to the fields / static fields / class constants?
                * properties in properties
                * readonly fields
                * closures: unboxing : struct fields
                * auto determining the closure return value for closure templates
                * stack allocated class and default constructor
                * extension to read package info
                * auto symbol
                * auto method
                * auto field
                * reference message??
                * variable : identifier / reference
                * complex message names?
                * methods with reference name
                * fields with reference name
                * emptyWideString cannot be used before its declaration (see String)
                * property - append, ...
                * should child have an access to the parent static fields?
                * meta attributes

              dev1
                * move all description to meta info using descr inline template
                * write - Programming in ELENA : manual
                * migrate tutorials from reddit
                * duck typing tutorial
                * yieldable method tutorial
                * migrate all existing ones
                * tutorials
                * rosetta code : AmicablePairs using yieldable method

              dev2 - inline assembly in RT / VM
                * get rid of ExecuteInFrame, provide special function to invoke the function from external

              dev2
                * refactor code generation (ByteCodeWriter), there should be a context to keep track on the current register
                  load, get rid of code duplication, simplify opertion / assinging, 
                * implement enum type
                * BoolValue cannot be inherited
                * support break and continue statements
                * implenent break / continue analog
                * addai, saveai
                * optimize GC : copying blocks
                * optimize GC : bit cards
                * optimize copying operation
                * optimize pi sample
                * optimite yield operstions
                * abstract class cannot be sealed
                * do not allow to write something like
                  A{ int dump[4] := 3; }  // !! error
                * (re)implement manifest
                * support class / method / field / static field meta description
                * do-while - if the second agrument is code brackets?
                * static fields should be accessaible from storng typed extensions
                * improve compilation speed
                * yield can be used only for yieldable method
                * yieldable method can be declared only for normal class

              xdev - linux32
                * compile ecv
                * compile all console / files examples

              xdev - ide
                * error by viewing translit sample

              dev3
                * port Linux IDE

              dev4
                * test (Runtime evaluation,Runtime evaluation/In an environment,Sorting algorithms/Sleep sort,
                  Walk a directory/Non-recursively, Wireworld, Zhang-Suen thinning algorithm,Zeckendorf arithmetic)

              dev5
                * xforms
                * graph - use script to define the function (+tutorial)
                * source to expression tree
                * expression tree to source

              dev6
                * template extensions
                * missing algorithms (template extensions)
                * missing system'routines'stex

              xdev - amd64
                * compile elenart64.dll

------                                                           
Pipeline:
------   
              xdev
                * chat sample

              ydev - Linux
                * linker : adata + mdata + rdata (meta starts with size field)
                * get rid of debug section
                * suport elenart

              xdev
                * fix bug with inserting unicode character
                             
              xdev - lib
                * add test case  : i := i + j, i := j + i, i := j + i*2, i := j + j*(i+2)

              xdev
                * operation with numeric constant should be used with constant symbol as well
                * i += i + 1; Tester.test(i*2+1)
                * optimize pi sample

              xdev - lib
                * should toReal work only for real numbers without fraction?

              xdev syntax
                * generate out of memory exception
                * create big objects directly in mg

              ydev
                * script : support several operation in a row
                * following rule does not work - function* code $eof

              xdev - language
                * 2*i should be compiled as i*2
                * call a property directly
                * optimize:
                     int dump[4];
                     dump[i*2] := 3;

              xdev - bytecode optimization
                * operations with stack-allocated array : dump[0] := 1;
                * operation with dynamic array should be direct???
                * inline arg : variadic normal arg list
                * inline arg : variadic long arg list
                                                                                      
              xdev - usability
                * uncomment IDEController :: isOutaged
                * uncomment exclude from the project command

              ydev
                * build : returning (goto)
                * ?fields

              xdev
                * inject target boxing if it is stack allocated and the message call is not stacksafe
                * analizeSubExpression
                * analizeAltExpression

              xdev tests
                * #271
                * operations with weak array
                * operations with variadic array
                * check nil boxing
                * check boxing of incompatible types

              xdev
                * fixing #476
                * redesign invoke1..invoke31 - they should use the same class with messageid as a field

              xdev
                * primitive op where i is fields - i+=k
                * primitive op where i,k are fields - i+k

              xdev
                * new system'dynamics'DynamicStruct() - raise an error
                * support lazyOp

              xdev  - int op - test and optimize
                * Tester.test(n+m*n);
                * pi sample

              xdev
                 * remove idle variable / field / constant (e.g. 2)
                 * import hashtable design

              xdev
                * debugger should show ref variable value

              ydev
                * get rid of tape support??

              ydev - build tape
                * support variadic argument list (if the number of arguments is bigger than 0x1F)
                * ssupport namespace import, so the build script can be shortened

              xdev
                 * opzimiation extension operation with a byte array parameter
                 * optimize i += 1
                 * optimize assign inp_op direct_call embeddable
                 * optimize direct_call direct_call embeddable
                 * optimize pi sample
                 * optimize r * n + 0.5r
                 * optimize dirty_ptr := dirty_ptr + int
                 * building expression tree - raise an exceptoion with missing class name
                 * the following code should not be allowed - real n := n;

              ydev
                 * graph sample

              zdev
                 * reflector
                 * generate LIB40 API Doc

              xdev - elena 4.0
                 * primitive operations #86

                 * unboxing explicit local allocated extension #200
                 * Duplicate unboxing #370
                 * Operations with integer wrappers #427
                 * Optimization : operation with structure fields (byte or short) #278

                 * optimize gc - mg -> yg 
                 * migrate nodepad
                 * optimize intOp.Absolute method
                 * migrate chat sample
                 * test zeckendorf,zuang,wireworld
                 * uncomment c_a_g code
                 * migrate sqlite
                 * variadic closure : correctly free argument list - using the code to free until the zero is encounter
                 * gui : check default error handler
                 * bool_expr ? 1 : 0 - the expression result should be strong-typed
                 * support 2.2 syntax (without r postfix)
                 * optimize compiler : more efficient hash table, caching the results
                 * the following code should generate an error - lazy::(n < 5) - missing ^
                 * direct and, or, xor, shift, mul, div, equal, less
                 * pusha new bcopya popa => bcopya new bswap nop??
                 * direct operations with int constants e.g. $self create &int:(WS_STYLE1 || WS_STYLE2)
                 * Handle, Char : there should be special enbeddable cast T<int> = field - to allow using the integer field

                 * Various optimizations #431
                 * fix zeckendorf_arithm 

              dev - ide
                 * debugger : display message name

              dev - elena 4.0
                 * working on xforms

              ydev
                * closure

              dev - script engine
                * parse script and save it

              dev - elena 4.0
                 * optimize hash table implementation (both weak and strong typed)
                 * implement jsonObject.serializeTo(MyDTO);
                 * test: internal prop x, internal prop int x
                 * test prop, event
                 * prop public int x
                 * abstract class cannot be created
                 * read package info
                 * support seriaization properties - indicating which properties should be serilized
                 * support constants - declared only once and used through the class hierarchy
                 * support static fields - after declaration - every class child should initialize it
                 * support sealed static fields
                 * warn if the attribute value is not set

                 * supporting : const fields - constant values
                 * symbols : a += b
                 * fields : a += b

                 * (re)implement hashTable, using links, load control and so on
                 * fix : Hailstone sequence
                 * fix : Trigonometric functions (arctan)

                 * Reflection/List methods, Reflection/List properties, Runtime evaluation,Runtime evaluation/In an environment,
                 * Zhang-Suen thinning algorithm
                 * Support enumeration list #265
                 * Sockets
                 * property template - should support public / internal visibility attributes
                 * (re)implement UTF8Encoder.convert(..,string,byte[]) method
                 * implement Heap, Balanced Search Tree and Hash tables, review Map<T,Key> template, if it could be
                   optimized
                 * implement correctly - a[i][j] += 1 (see World Cup group stage)
                 * Wireworld
                 * modify quicksort to use insert selection for smaller amount (test on anagram)
                 * optimize calendar'Date.prop#Printable - do we need to copy value

                 * embeddable returning value : do not duplicate the method code - the original method should call
                   static one
                 * review RealNumber.#new<system'IntNumber>[1], is a new object created twice

                 * review if ref<int>.Value works correctly (it is embedded)
                 * check CharValue.WideLength
                 * review ByteConvertor
                 * check Array<..>
                 * review String / WideString, get rid of internal methods - use them directly

                 * (#378) support AccessViolation - _pxcptinfoptrs
                 * (#378) support Stackoverflow / OutOfMemory exception, reduce the maximal heap size in callstack
                 * lazy::(console.write("Reading a number:").readLine().toInt()) should generate an error?

                 * no need to box variadic argument list for template opertions
                 * array operation with Array<type> should be resolved directly (an array is embeddable)
                 * syntax : template should be the last token in expression and one before the last for declaration
                 * => operator should work with expression as well - s.toInt() => ...
                   toInt is ignored
                 * calc sample - support properties
                 * review elenasm - simplify the coordination info, probably it should be encoded into the log itself,
                   so no need to fill the list (what about the string in calc sample)

                 * Thread.assign:(){} should be supported
                 * (re)implement tape debugger

                 * simplify operations with ref variable - if (0 == (cast int(theTop))) { ... }
                 * the following code - var arr := cast Array(o) ?? nil; - probably we have to skip the second typecasting, so it will
                   work
                 * attribute cannot be used as a class constant - s the code - 
                       = { bool equal(o) = self(object); }; - is not allowed
                 * allow to work with ref<int> directly
                 * uncomment validateClassDeclaration

                 * new anyToken { .. } - should raise an error?
                 * warn on operations with unassigned variable
                 * the following code should generate an error : var a.doSomething(b)
                 * stringOpHelper should be able to call the original trim method, currently it is not possible to call trim
                   method for the anonymous object
                 * in the interface it was possible to declare a parameter of non-existing class
                 * the following code - theIndexers[i] := arguments[i].indexer() - does not work correctly
                   (see SequentialEnumerator)
                 * optimize SystemTime
                 * uncomment __closuretape."#dispatch[1]  - check the subject correctly

                 * test unboxing with variadic arg list

                 * long constant should not be boxed like int constants


                 * reddit post - Switch statement

                 * identifier - message message

                 * the following code should be supported : newLength := newLength + cast int(theLength);
                 * TokenEnumerator : class TextBuilder should not be found (system'text is not imported)
                 * test try / catch operation : method not found, printing calling stack
                 * (re)implement dynamic variadic argument resolving
                 * primitive array should be passed directly without unboxing if allowed
                 * test - a[](...) - should be illegal
                 * test boxing / unboxing with dynamic reference
                 * support public & private templates
                 * property templates cannot be used directly and class templates cannot be used as a property one

                 * support c style return statement - return x;

                 * Indexer.Index property - should support abstract get and set accessors
                 * unboxing of boxing (in case if analizer does not resolve the issue)
                 * cache resolved built-in tampletes
                 * test all possible syntax combination
                 * simplify DerivationWriter :: newNode - use a common mask for all expression nonterminals
                 * optimizate operations with byref dynamic variable (no need for boxing / unboxing) - should be locally
                   boxed
                 * elt - exception handlers
                 * support mta_gui, vm_console, vm_mta_console
                 * the following code does not work - theOwner.resize(int width, int height)  (see forms'SDIWindowListener.onsize)
                 * interface - can the wrapper class be saved to use it several times?
                 * set operation with constant array should not be allowed
                 * vm client : incorrect error if the program entry is not defined
                 * support static prefix to allow operations with static field only
                 * sealed static fields, cannot be changed in the child classes?!
                 * remove all temporal exceptions
 
              dev - debugger
                 * debugger : step over message operation
                 * fix debugger watch : bsort - ref<int> is not correctly recognized

              dev - tests          
                 * test elt

              exp - live programming
                 * implement code generation
                 * implement code transformation
                 * use script to build objects
                 * use script to parse
                 * use script generate code

              dev - tests          
                 * test vm sta : preloaded symbols / initializers
                 * test vm sta : exception handlers
                 * vm : Runtime evaluation, Runtime evaluation/In an environment
                 * mta system : check the situation when too many threads (> MAX_THREAD)
                 * nested code : read only outer field

              dev - general implementation
                 *  #77 : migrate GC algorithm
                 *  #77 : get rid of core_win, all functionality should be moved to elenart / elenavm
                 *  #77 : retiring core / corex 
                 *  #77 : get rid of tt_ptr field
                 * move system'core_routines'__exception register call to the system entry symbol

              dev - general implementation
                 * &0l - should be dynamically created

              dev - tests          
                 * gui : GUI component interaction, Hello world/Graphical, Simple windowed application

              dev - general implementation
                 * (re)implement sockets
                 * (re)implement tcpserver / tcpclient

              xdev - general optimization  
                 - closers passed as parameters should be stack-allocated

