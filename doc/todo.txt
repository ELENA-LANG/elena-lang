------                                 
In development:
------                              

              xrev
                 * make sure not embeddable object is not stack allocated
                 * check primitive comparision operation
                 * optimize unbox : root expression / assigning
                 * support lazy expressions
                 * step over : fine tune the debugging sequence
                 * templates : importing
                 * templates : compiling
                 * get rid of ftemplate / mtemplate, ....
                 * optimiize n:=n+1
                 * implement +=, ...
                 * sealed methods
                 * support private sealed methods

                 * support abstract attribute
                 * support implicit constructors
                 * check sealed / limited class attributes
                 * compliation should be based on set of rules
                 * compile package info
                 * test optimized / direct operations
                 * check : #var(-11,4)n := 0.#var(-11,4)d := n + 12. - there should be no double assigning
                 * debugging the following statements:
                     #var(-11,4)n := 0.        
                     #var(-11,4)d := n + 12.

                 * DerivationWriter : try to get rid of big switch statement

              ydev
                 * upndown : playing a round

              xmaint
                 * refactoring : introduce ident_t as a class wrapper around const char*
                 * issue

              zdev 
                 * bf traditional : implement
                 * bf tape : implement
                 * live programming
                 * eldoc

              zevo
                 * game of life : simple implementation
                 * game of life : create an engine (time slots)
                 * game of life : rules should be declared in external file
                 * game of life : viewer

              xdev
                 * lib40 : hello world
                 * lib40 : true / false could be member of enumeration list 
                 * lib40 : review predefined boolean constants (bool,true,false), could we get rid of them from lib40 config file
                 * lib40 : implementing
                 * refactoring : minimalistic library should be able to work with only super class declared (currently at least literal
                   object should be declared)

              ydev
                 * upndown : implementing, play with chaotic computer player

------                                 
Pipeline:
------                                                                                         
              xdev - generic development
                       * #236 : Namespace sharing
                       * #163 : try finally catch statement
                       * #100 : classOp : test if object is subclass of 
                       * #167 : stack allocated variable and $nil

              xdev - byte code optimization                               
                       * #269 : short-circuit boolean operation

              xdev - generic development
                       * #265 : enumeration list (declaration,pool of possible values,literal representation)

              idev - generic development                                          
                       * show internal errors in message list
                       * #263 - IDE : MTA Debugging 

             xdev - linux
                       * implement UnsafePointer.get&literal / UnsafePointer.get&wide
                       * migrate to 2.0

              sdev - samples
                       * test all samples
	               * Distributed programming
                       * Metaprogramming
                       * Object serialization

              xdev - generic development
                       * support the following syntax : #throw(exceptionof:MyError)"My message" (using implicit constructors for exceptions)

                       * #250 : embeddable structure : implicit constructor should be called without creating the object
                       * #237 : Multidimensional arrays 
                       * #250 : Implicit constructor should not have return statements

                       * embeddable dispatcher validation : only redirection to the field is allowed

                       * nshift should be replaced with nshiftl, nshiftr

                       * optimize #var(dirty_ptr)aPtr := system'external'sqlite3 sqlite3_errmsg &int:1. - assigning is done three times!!


                       * implicit boxing (int to vint) should be possible only for stack allocated local variable, structure fields
                       * operation with primitive arrays should not be allowed
                       * extension should not be used stand-alone
                       * optimize listof.setAt&int$&object[2]: there should be primitive comparison operation
                       * primitive operation with subject

                       * Compiler::tryTypecasting should be reviewed, too many hot fixes

                       * test length operation
                       * test exception call stack, the place where it is raised is missing

                       * arrayof:bool - a@n -> should be bool
                       * test array of structures

                       * equal message should be always the second one, so we could call it directly, equal / not equal message should 
                         always return bool operand

                       * templates : make sure it is not possible to assign array (see arrayof, stringof) 
                         (probably assigning is not #correct for numeric template as well)

                       * template : add typecast around parameter passed with template_subj ; make sure
                         cast methods work correct after this
                                         	
                       * check template type before applying (i.e. method template should be declared only for the method declaration)

                       * check subject duplicates

                       * array of long
                       * support #var(real)r := 2. // assigning int to real by constant

                       * singleton template : make sure it is not possible to declare fields for them??

                       * system test : new test with generic array / list / map
                       
                       * stacksafe template method : box this variable if required

                       * subject and its wrapper should be declared in the same namespace, probably
                         warn if it is not the case

                       * test stack unsafe operation
                       * test stack safe operation
                       * test int => vint
                       * test vint => int
                       * test not, shift, negative operations
                       * test notepad
                       * test chat sample : fix the current bug, simple implementation - direct output
                       * optimize dynamic array / literal creation
                       * optimize intnumeric.shift implementation
                       * optimize intnumeric.not implementation
                       * optimize charvalue#class.new&char$[1]
                       * optimize shift implementation
                       * optimize varof.append / varof.reduce / ...
                       * optimize listof.$exapnd
                       * optimize ($nil != a) ? [ ... ]
                       * optimite #var(int)last_index := theLength - 1. // where theLength is vint
                       * optimize pop close => nop close
                       * optimize system'dynamic'Dynamic
                       * arrayof should support iterator
                       * optimization : equal, less, div, xor should support operation with immediate argumnt as well
                       * optimization : SMALL_RECT.write&win_small_rec[1] - should directly assign the property to the field, 
                         the stack read optimization should work
                       * review Point.equal&coord[1] - why typecast message is sent

                       * test constructor returning not compatible object

                       * test assigning generic object to stack allocated variable
                            #var(integer:4)n := object. // !! should be typecasting

                       * no need in temporal variable in this code
                         #var(handle)handle := $ConsoleHandleFactory new &attributes:0FFFFFFF5h.

                       * review array implementation (template usage)
                       * review primitive imlementation (template usage)
                       * probably all hints should be templates??
                       * #54 : implementing generics / templates : class
                       * stack allocated variable and $nil
                       * review #10 issue

                       * verify if methods can be added for sealed, limited, method duplications                       
                       * test live eson script                                                                                                         
                       * #223 : exiting the lock / extern statement , throwing an exception, try-finally construction should be 
                         as light as possible
                       * #190 : Closure : auto boxing / unboxing local variables  
                       * #215 : Operations with structure fields
                         possible, no exception boxing
                       * review source code to use templates
                       * review try-catch statement, make sure the closure is created only in case of the error
                       * breaking int loop method (both #loop and pattern code), exiting closure (different behaviour between
                         explicit and pseudo closures (? operator))
                       * #62 : Tape implementation

                       * elc refactoring : replace "SyntaxTree::findChild(child,..."  with "child.findChild(..."
                       * system_test should be transformed into automatic test
                       * ecode implementation : should eax - be index, ebx - ext, esi and edi - class registers?
                       * review gui main loop, the handle should be copied to the local variable, before executing in the
                         external block, the problem how to signal the code that the loop should be ended
                       * probably any stand-alone external cal should be declared in implicit extern block. If the operation
                         does not affect GC, a special hint should be used to skip external block declaration
                       * #238 : Manifest - store the manifest info into the resource
                       
              xdev - general implementation     
                       * replace all operation with StringHelper with some built-in operators

                       * rename console to STA, consolex to MTO, consolevm to STA VM Client, gui to STAGUI, guix to MTAGUI
                       * chatserver : #var(type:int)len := theBuffer length. - embeddable get should be used
                       * fix #12 : Extension with stack allocated object
                       * implement #167 : stack allocated variable and $nil                       
                       * optimize thread_wait
                       * test raising exception inside lock statement

                       * review pi performance
                       * review warnings
	               * test external call : return real value	               

                       * #229 : unboxing optimization
                       * #200 : unboxing explicit local allocated extension  
                       * #220 : s_copyint_radix / ws_copyint_radix
                       * in the following code:
                             theListenThread := Thread new &func:
                             [
                                 #loop $self proceed.
                             ]
                         proceed message should be called directly, because the class is sealed
                       * review winforms implementation for corex mode
                       
              idev - generic development                                          
                       * project view : delays in openning the window
                       * #191 : IDE : block commenting
                       * #221 : Breakpoints are triggered even after removing (??can not reproduce at the moment)
                       * #272 : it should be possible to set manifest
                       * #131 : it should be possible to change the order of source files in the project 
                       * #188 : Make possible to provide alternative path to lib
                       
             xdev - linux
                       * implement debugger
                       * port elide to linux
                       * support manifest info
                       
              fdev - live programming
                       * provide path to the current library automatically
                       * change syntax to be standart one
                       * test unicode symbols
                       * interact with the current project objects

              adev - lib30     
                       * use implicit constructors in LIB30
                       * implement #33 (tcp/ip socket)


              fdev - samples
                       * calculator : move lexicalOp to the script
                       * reimplement script samples: interpreter, helloworld, vmconsole

              fdev - eldoc
                       * design
                       * implement basic parsing : only classes                       

              sdev - samples
                       * rosetta sample : 9 bil names
                       * rosetta sample : Ethiopian multiplication
                       * rosetta sample : Flipping bits game
                       * rosetta sample : Longest string challenge
                       * rosetta sample : Magic squares of odd order
                       * rosetta sample : Morse code
                       * rosetta sample : Narcissist
                       * rosetta sample : Object serialization
                       * rosetta sample : Pascal's triangle
                       * rosetta sample : Pig the dice game
                       * rosetta sample : Program termination
                       * rosetta sample : Tree traversal                       
                       * rosetta sample : Stack traces
                       * rosetta sample : Set
                       * Animate a pendulum
                       * rosetta sample : Undefined values                       
                       * rosetta sample : Variable size/Get
                       * rosetta sample : Variable size/Set
                       * rosetta sample : Vogel's approximation method
                       * rosetta sample : Voronoi diagram
                       * rosetta sample : Write entire file
                       * rosetta sample : Walk a directory/Non-recursively
                       * rosetta sample : Walk a directory/Recursively
                       * rosetta sample : Word wrap
                       * rosetta sample : World Cup group stage
                       * rosetta sample : Write float arrays to a text file
                       * rosetta sample : XML/DOM serialization
                       * rosetta sample : XML/Input
                       * rosetta sample : XML/Output
                       * rosetta sample : XML/XPath x
                       * rosetta sample : Yin and yang
                       * rosetta sample : Zig-zag matrix
                       * rosetta sample : Zebra puzzle
                       * rosetta sample : Zeckendorf arithmetic
                       * rosetta sample : Deepcopy 
                       
                       * refactor cpu_sim : assembler

              sdev - rosetta code samples
                       * linux : migrate two rosetta samples to linux

              xdev - usability
                       * ecv : dynamically define the page size

              fdev - db app
                       * implement passing an object over tcp/ip
                       * implement remote database access
                       
              xdev - general implementation
                       * implementing 2.0.0 issues
                       * vm console should use startUp symbol
                       * variable: no need to store nil if the variable statement has initializing part
                       * drop message flag for message ids, messages should be saved in raw data stack frame
                       * external call: stack should be excluded only if the method is marked as threadsafe
                       * DFA : replace current hotfix with character terminal with correct solution (probably in DFA should be two different states
                         one for single constant #10 and another for several constant or literal + constant - #10#13)
                       * #var l := 100000000000000l / 5000000000000l. warning the expression may be boxed, should in this case do not use primitive operation?
                       * if more than 11 parameters are passed, open argument list should be used automatically??
                       * no need to provide exclude command for every external call, special hint to ignore it?
                       * think over optimized way to get GCXT TLS TABLE, try to cache the pointer
                       * cast should be called directly, make sure it is always after dispatch
                       * gui vm client
                       * handle access vialation exception : exception handler should be called
                       * should be possible to write  #var(type:vint)Styles := WS_CHILD || BS_AUTORADIOBUTTON. - directly
                       * review graph sample, get rid of warnings
                       * constant symbols should be used directly
                       * should be possible to implement :     #constructor newCompatible &hdc:aCompatible <= new &hdc:(system'external'GDI32 CreateCompatibleDC &hdc:aCompatible).
                       * refactoring : declareParameterDebugInfo - use debug hint flags
                       * refactoring : do we need to use paramsReference ditectly??
                       * refactoring : do we need to use trueReference / falseReference ditectly??
                       * unboxing : for small objects (~4) use appropriate byte commands
                       * refactoring : create a single procedure to typecast acc, should be used every time
                         typecasting required
    
              xdev - generic development
                       * tape_tester : classTest
                       * test script samples
                       * fix linux pi2
                       * review multi-method implementation in clojure
                       * forms.onPaint : should it be possible somehow to validate if the action can be used for this type??
                       * begin / end should be verbs?
                       * shoud "is" verb always return boolean?
                       * default dynamic constructor
                       
              xdev - byte code optimization                               
                       * review system_test code : $Console (ControlTest)
                       * multiple-select if the type of operands are known try to optimize it ; for example of switch value is constant, maybe
                         better to compare value ?? (if it is true / false constants for example)
                       * direct parameter allocation can be used for open argument list : e.g. OpenArgTester testParamsCopy &args:1:"a":3
                       * optimized switch statement implementation (e.g. ordered ??)                       
                       * optimize !=, <= and >= implementation
                       * optimize index operation (literal / array) ; indexer should use more optimize algorithm
                       * compiler should replace and:action / and in virtual statement with
                         appropriate inline code
                       * review system for possible byte code optimization                       
                       * review extensions for possible byte code optimization                       
                       * review samples for possible byte code optimization                       
                       * review rosetta samples for possible byte code optimization                       
                       * review internal core_routines
                       * optimize primitive operator implementations                       
                       * review / optimize SDIApplication.start
                       * call to $super should be direct
                       * direct operations with int constants e.g. $self create &int:(WS_STYLE1 || WS_STYLE2)

                       * optimize ByteCodeWriter::copyStructure                       

                       * anObject cast:%equal &to:$self bool can be compiled directly in reverse order (BaseValue.equal[1])
                       * n := n - $self - should be replaced with direct subtract operation if n is of int type and $self is IntNumber                       
                       * make sure intvar can be passed as int without major overhead (no explicit typecasting)
                       
                       * optimize output code: system'BaseFunction2
                       * if $self/fields are not used - do not store eax
                       
              xdev - native code optimization
                       * optimize field assigning code (5 opcodes, could we make them parallel / get rif of some?)
                       * optimize hook / unhook commands
                       * should ret be followed with several nops?
                       * review bssearch implementation, try to optimize, reduce number of jumps / commands, make them parallel
                       * review commands, try to optimize, reduce number of jumps / commands, make them parallel
                       * review commands : use conditional moving
                       * review core
                       * starts to use Pentium commands: we need to introduce the mode for
                         i686 (cmov is not supported for older CPU, so we have to have two
                         set of commands)
                       * hook: maybe offset should exclude call command size, so no need
                         in adjucment
                       
             xdev - linux
                       * port multi-threading
                       * port elc to linux
                       * port ecv to linux
                       * review deployment mechanism
                       * port elenavm to linux
                       * port elenasm to linux
                       * port elt to linux
                                                                                                                             
              xdev - multithreading       
                       * design basic classes / routines to implement multi-threading applications (events, semaphors, locks, threads, ...)
                       * implement basic functionality
                       * should the lock field copied as well during the object reallocating? (see core_mt'reallocate)
                       * threadhandle - remove the object from the reference table on closing
                       * reference table should be created on the program start for multy thread version
                       * thread table contains reference to the thread TLS, it looks unsafe if the system reallocate the
                         storage ; maybe better to store there data duplication? 
                       * architecture overview ; tls allocated for every thread and accessed by  FS:[2Ch] ; thread enumeration
                       * reimplement thread safe variable
                       * elenavm : support multithreading, either use explicit or implicit TLS allocation
                       * compile pi with mt
                       
               xdev - script engine
                       * cfparser : there should be two mappings so we could support both local and function variables
                       * cfparser : methods variable
                       * support if, foreach, while constructions,

                       * if the script contains only grammar, virtual machine should not be called

                       * implement basic operations with ElenaScript (expression,variable,loop,branching,new class)
                           - text generating
                           - construct objects - implement expression, with variables
                           - using roles
                           - branching
                           - branching in code
                           - assigning values to dynamic objects
                           - global variables
                           - script engine support in ELENA code : text generating                           

                       * use script to build objects
                       * use script to parse
                       * use script generate code
                      
              xdev - test
                       * unbox field when passed as ref
                       * test math functions
                       * test with cyriclic and chinese names (strings, variables, files2)
                       * test short -> int, int -> short should correctly set sign
                       * test system'io'StreamWriter
                       * test system'io'BinarayReader / system'io'BinarayWriter
                       * test literalOp.trim method
                       * test vm samples       
                       * test thread operation                                                                               
                       * sqlite : test operation with double
                       * test extension is &nil
                       
                       * test bytearray read / write operation with byte, char, int, long, real
                       * consoleReader.read&Line : test with smaller buffer and longer string (to check how it works for large input)
                       
                       * test operation with stack allocated binaray array (write / read / length / getAt)
                       * make sure exclude command excludes the stack correctly (e.g. any script sample - GC should happends inside
                         script, so we could check if the caller stack is included correctly)

              xdev - x64
                      * think over general architecture
                      * asm2bin64 - compile x64 bit opcodes
                      * create x64 elena vm
                      
              idev - usability
                       * fix #83
                       * it should be possible to turn-off deleting compiled modules if one of the project module fails
                       * recognize out of memory exception
                       * error: more accurate error messages
                       * library explorer: make possible to navigate and disassemble ELENA API
                       * test compilation with a very long identifier names                       
                       * class view - make possible to browse the class methods
                       
              idev - generic development                                          
                       * ide : test with utf8, win1252, ...
                       * elc : test with utf8, win1252, ...
                       * linux : debugger
                       * show the file encoding
                       * refresh / reload documents after changing encoding ??
                       * settings / project settings - could we simplify utf-8 <-> utf-16 conversion, maybe settings should store data in
                         utf-16 for windows?
                       * test with small page size intensive insert / delete operations
                       * test ide: goto error if the file is not opened
                       
              idev - unicode
                       * save last open path (should be saved in the current path??)
                       * fix outdent / uncomment / trim / eraseLine - some general bug in removing
                       * menu option - project - forwards
                       * recent open files / projects
                       * window list, switching
                       * status bar
                       * menu option - view
                       * menu option - search
                       * menu option - tools
                       * menu option - windows
                       * menu option - help
                       * add tool bar items
                       * add hot keys
                       * enabling / disabling menu options,...
                       * TextView: cursor blinking
                       * IDE UI : facelifting, tuning
                       * test : new project, new file, include, exclude, save, ...
                       * make sure textview is really deleted when the page is closed
                       * project clean
                       
              idev - debugger
                       * if an expression raises an exception, debugger should switch into step mode
                       * show data variables (currently only int / short are displayed)
                       * fix debugger to correctly show stack allocated objects: custom type (e.g. __win_systemtime)
                       * get rid of dsProcedureStep, and check mode
                       * debug script
                       * implement watch
                       * show built-in variable $subject
                       * support thread list
                       * implement watch

               adev - web support
                       * http://www.codeproject.com/Articles/452052/Build-Your-Own-Web-Server
                       * http://www.codeproject.com/Articles/1505/Create-your-own-Web-Server-using-C
                       
              adev - gui
                       * make possible to set / change / get the control color
                       * make possible to set / change / get the control font                       
                       * gui stand-alone, gui mt stand-alone
                       * support default button style
                       * new controls: check box, status bar, timer, updown, memo, list box
                       * make sure all windows resources (hbitmap, hdc, ..) are properly released
                       * example with buttons, edit on panel
                       * IControl.retrieve&hwnd - probably should always return control?
                       * a lot of operations with controls should be implemented directly
                       
              adev - lib30     
                       * implement sorting for locale
                       * extensions'text'ReaderEnumerator - currently converts the result into UTF-8, should we have an alternative one?                       
                       * review http://www.angelfire.com/tx4/cus/notes/smalltalk.html:  add missing implementation for ELENA
                       * expanding lib30
                       * make sure all method are safe (raise exceptions if the argument is wrong, the result is wrong, ...)
                       * review lib30 warnings, try to get rid of most of them
                       * redesign upper / lower case functionality, make it locale dependant like in c#+                       
                       * test load class by name
                       * linux32 : upper / lowe cases
                       * linux32 : file stream - length, index
                       * linux32 : implement console clear
                       * reimplement consolewriter.write&literal - use printf instead of putchar
                       * migrate rosetta samples
                       * core : implement INIT_RND
                       * consoleReader should check if the char is multibyte
                       * read key
                       * port console samples                                                                               
                       
              adev - lib30 optimization
                       * simplify the code using call optimization, set sealed methods if required

                       * reivew system'winforms'SDIApplication.start, optimize the main loop
                       * review $ConsoleWriter.write&literal[1]

                       * optimize output code: system'Object 
                       * convertor.toLiteral(1) : better to use classOp.respondsTo(1)?
                       
                       * Real#class.new&int[1] - optimize
                       * ByteArray.fill&index&length&byte
                       * optimize TextBuffer.indexOf&index&literal&vint
                       * optimize TextBuffer.indexOf&index&char&vint
                       * console.writeLine : every time theNewLineConstant is converted to utf16, optimize the performance
                       * linux : review console operation, optimize the code
                       * migrate to linux
                       
              sdev - rosetta code samples
                       * implement
                       * migrate to linux
      
              sdev - samples
                       * calculator : gui
                       * get rid of reverse command
                       * migrate calc, interpreter samples
                       * vmconsole
                       * notepad: add status bar
                       * notepad: add open / save
                       * notepad: show the current cursor position
                       * notepad: find / replace
                       * migrate timer

              fdev - upndown
                       * network game
                       * add network players
                       * use db for statistic info
                       * add AI player
