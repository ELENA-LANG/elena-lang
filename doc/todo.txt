------                                 
In development:
------         

  [development]
    * elt - #323;
            support closures
            script based source : debug, correct error displaying
            support ELENA 3.x syntax
            duplicate variable;
            unreferenced variable;
    * [pipeline]
    * create a new class in run-time with fields
    * [API Docs : Func1 has one argument which is not shown]
    * compiled code to expression tree
    * expression tree to source
    * source to expression tree
    * multi-value return - #508
    * [ compilation speed ]
    * dispatching a method return
    * [Brace expansion]
    * chat
    * graph
    * [service release]
    * GC to C
    * web server
    * make compatible with ELENA 3.1, convert to and from ELENA 3.1
    * pi optimization : assigning int-const to real (#86)
    * elena on rails
    * [clear todos]
    * [resolve open issues]

  [documentation]
    * docs

  [tutorials]
    * multi-return

------                                                           
Pipeline:
------   
    * linux : elenart.LoadMessageName/LoadSubject, method not found exception handling
    * GC : mov GC to C code : #77
    * elenart : get rid of inline assembly
    * external ops: operation inside external call - see HMENU.append
    * chat
    * rosetta code samples: Sockets, Zhang-Suen thinning algorithm
    * timer
    * upndown
    * nodepad
    * refactoring : classROp.setField should be either internal or not available at all (because
                    it is not possible to enforce types)

    * api doc :  static method descriptions;
                 field descriptions;
                 dispatch methods;
                 template based extensions; 
                 api descriptions;
                 param descriptions
    * api : use manifest info for module description
    * usability : dynamic loading : give the symbol / message in the InvalidArgument exception
    * debugger : step over fine tuning

                * resend property (see forms Caption / Heigth and so on properties)
                * duplicate boxing optimization : do not unbox presaved variable into temporal variable if it is not used
                  in the following sub expression (e.g a.then{ arg++ }.then{ arg++ }, second temp unboxing is not required;
                  the opcode can be optimized as well - get rid of duplicate acc loading code) - see duplicateTest
                * redux : closure tape generation (reusing local variables for nested scopes)
                * debugger : sub code - do not show the variable from noncurrent sub codes
                * system'dynamic'expressions: do we need TempVariableBlock? it cannot be translated into the normal code
                * system'dynamic'expressions: review tape generation, test cases

                * migrating MG
                * get rid of EXPAND_HEAP, NEW_HEAP
                * graph - use script to define the function (+tutorial)
                * info : abstract class cannot have public constructors

                * sqlite : support float / blob
                * String / WideString - add<'Char>
                * Amicable pairs using yield method
                * implement some roseta code samples
                * upndown
                * support module description from manifest
                * support field / static field meta description
                * closure unboxing: field addr
                * check why system'dynamic'expressions'SymbolInfo#class cannot resolve DynamicSingleton
                  in dynamic mode
                * closures: presaved arguments
                * closures: race conditions
                * closures: returning a value
                * extension message - can be applied only to the generic extension?
                * ifheap - is not correctly recognize data allocated classes
                * if bug structure is allocated - it will be marked as root - will it work?
                * warn if the method is not found for sealed / limited classes (including conversions)
                * duck_typing_in_elena_programming_language
                * tutorials
                * migrate tutorials from reddit
                * duck typing tutorial
                * rosetta code : AmicablePairs using yieldable method
                * do we need ENDFRAME?
                * loadfi vs loadf, savefi vs savef
                * declaring several variables in a row?

                * mixin variadic function cannot be used directly??
                * function closures : strong one - should be resolved directly if possible
                * stack allocated variables : assigning nil, default constructor call, ...
                * stack allocation should not be cleared
                * system'Extension : variadic argument should be boxed directly into extension
                * replacing embeddable constructor call with direct operarions?
                * setting several properties in row  new A().set(subj A,2).set(subj B,3) 
                * initialize property
                * countable
                * implement analog of C# enum
                * analog of C# $ strings
                * method templates
                * function return type : e.g. int f() = 1;
                * properties in properties
                * readonly fields
                * closures: unboxing : struct fields
                * auto determining the closure return value for closure templates
                * stack allocated class and default constructor
                * extension to read package info
                * auto symbol
                * auto method
                * auto field
                * emptyWideString cannot be used before its declaration (see String)
                * property - append, ...
                * should child have an access to the parent static fields?
                * private extension method should be possible to use for internal work
                * it should be possible to extend attributes / template statements from anoter libraries
                * abstract class cannot be sealed
                * (re)implement manifest
                * do-while - if the second agrument is code brackets?
                * static fields should be accessaible from strong typed extensions
                * yield can be used only for yieldable method
                * yieldable method can be declared only for normal class
                * CharValue.new = $0 -> should create a new class
                * test : branching external implementation : returning a value from closure 
                * i += j
                * use stosd over stos
                * double assigning : operation with struct field : var s := x + /*y*/1; (where x is a word field)
                * double assigning : int n := 2; var o := n + 1 / var o := n
                * field boxing : e.g x + x - should not be boxed twice
                * field boxing : double assigning
                * boxing an array, assinging to the local variable - get rid of double assigning
                * operations with byte or word 
                * saving dword or qword 
                * simplify the operations with struct fields (size=1,2,4,8,...)
                * copying 4,8,1,2 bytes
                * review byte code in core_routines and BCWriter - check for more optimal opcodes
                * optimization : assigning a field with a local - there should be direct byte code
                * assigning a big number to short / byte local variable - should be truncated?
                * optimize interface implementation . try to use direct / semi-direct call when possible
                * optimize operations with int[], short[], byte[] arrays
                * ByteNumber#class.new[2] - idle command - "pushr 0"
                * optimize IntNumber#class.#constructor[1]
                * optimize array creation
                * call inernal function directly (without intermediate step in system'routines) when it is possible
                * optimize xreadn, xwriten
                * optimization : do not call idle method
                * bytecode optimization : storefi peekfi ==  => storefi nop; (storefi and peekfi have the same argument, no need to name all 
                  possible values)
                * copying  a buffer with unaligned size
                * int operation : 1 + i
                * check if there are extnension duplicates, probably no need to save extension multi-dispatcher
                * alt - no need to assign temp local for local / field / param
                * boxing byref variable : use intializing, direct assinging after creation without filling with nils
                * boxing ext call result
                * CreateClass / CreateStruct with initializers - no need to clear newly created object
                * resolving byref template - cache the resolved results
                * read / write byte, short - without AND operation
                * assigning struct field with int constant
                * auto conversion methods should be marked as idle
                * resend to constant - no need for frame
                * optimize GC : copying blocks
                * optimize GC : bit cards
                * optimize copying operation
                * optimite yield operstions
                * move all description to meta info using descr inline template
                * ide message : display internal error
                * ref argument should be a variable
                * compile single file project
                * warn an operation with not initialized variable: var a.test();
                * warn if the extension method is called from itself (short-cutting)
                * (re)implement internal String.read<int,ref<byte>>
                * (re)implement UnsafePointer.cast<string>
                * (re)implement FileStrean.set length<int>
                * debugger : do not copy template parameter terminal info
                * uncomment DebugController::parseMessage, cleanUp
                * step over external / message / loop / if call?
                * step over last statement (without terminator)
                * watch message / subject info
                * sealed static methods : multimethods
                * uncomment validateUnresolved
                * error by viewing translit sample
                * port Linux IDE
                * compile elenart64.dll

                * fix bug with inserting unicode character
                * add test case  : i := i + j, i := j + i, i := j + i*2, i := j + j*(i+2)
                * should toReal work only for real numbers without fraction?
                * script : support several operation in a row
                * following rule does not work - function* code $eof
                * 2*i should be compiled as i*2
                * optimize:
                     int dump[4];
                     dump[i*2] := 3;
                * operations with stack-allocated array : dump[0] := 1;
                * operation with dynamic array should be direct???
                * inline arg : variadic normal arg list
                * inline arg : variadic long arg list
                * uncomment IDEController :: isOutaged
                * uncomment exclude from the project command
                * build : returning (goto)
                * operations with weak array
                * operations with variadic array
                * check nil boxing
                * check boxing of incompatible types
                * redesign invoke1..invoke31 - they should use the same class with messageid as a field
                * primitive op where i is fields - i+=k
                * primitive op where i,k are fields - i+k
                * new system'dynamics'DynamicStruct() - raise an error
                * Tester.test(n+m*n);
                 * remove idle variable / field / constant (e.g. 2)
                 * import hashtable design
                * debugger should show ref variable value
                * get rid of tape support??
                * support namespace import, so the build script can be shortened
                 * opzimiation extension operation with a byte array parameter
                 * optimize i += 1
                 * optimize assign inp_op direct_call embeddable
                 * optimize direct_call direct_call embeddable
                 * optimize pi sample
                 * optimize r * n + 0.5r
                 * optimize dirty_ptr := dirty_ptr + int
                 * building expression tree - raise an exceptoion with missing class name
                 * the following code should not be allowed - real n := n;

                 * optimize gc - mg -> yg 
                 * optimize intOp.Absolute method
                 * variadic closure : correctly free argument list - using the code to free until the zero is encounter
                 * gui : check default error handler
                 * bool_expr ? 1 : 0 - the expression result should be strong-typed
                 * support 2.2 syntax (without r postfix)
                 * optimize compiler : more efficient hash table, caching the results
                 * the following code should generate an error - lazy::(n < 5) - missing ^
                 * direct and, or, xor, shift, mul, div, equal, less
                 * pusha new bcopya popa => bcopya new bswap nop??
                 * direct operations with int constants e.g. $self create &int:(WS_STYLE1 || WS_STYLE2)
                 * Handle, Char : there should be special enbeddable cast T<int> = field - to allow using the integer field

                 * debugger : display message name
                 * optimize hash table implementation (both weak and strong typed)
                 * support seriaization properties - indicating which properties should be serilized
                 * warn if the attribute value is not set

                 * supporting : const fields - constant values
                 * symbols : a += b
                 * fields : a += b
                 * arrays : a[i] += b

                 * (re)implement hashTable, using links, load control and so on

                 * implement Heap, Balanced Search Tree and Hash tables, review Map<T,Key> template, if it could be
                   optimized
                 * implement correctly - a[i][j] += 1 (see World Cup group stage)
                 * modify quicksort to use insert selection for smaller amount (test on anagram)

                 * embeddable returning value : do not duplicate the method code - the original method should call
                   static one
                 * review RealNumber.#new<system'IntNumber>[1], is a new object created twice

                 * review if ref<int>.Value works correctly (it is embedded)
                 * check CharValue.WideLength
                 * review String / WideString, get rid of internal methods - use them directly

                 * => operator should work with expression as well - s.toInt() => ...
                   toInt is ignored
                 * review elenasm - simplify the coordination info, probably it should be encoded into the log itself,
                   so no need to fill the list (what about the string in calc sample)

                 * (re)implement tape debugger

                 * simplify operations with ref variable - if (0 == (cast int(theTop))) { ... }
                 * the following code - var arr := cast Array(o) ?? nil; - probably we have to skip the second typecasting, so it will
                   work
                 * attribute cannot be used as a class constant - s the code - 
                       = { bool equal(o) = self(object); }; - is not allowed
                 * allow to work with ref<int> directly

                 * warn on operations with unassigned variable

                 * uncomment __closuretape."#dispatch[1]  - check the subject correctly

                 * support public & private templates
                 * property templates cannot be used directly and class templates cannot be used as a property one

                 * unboxing of boxing (in case if analizer does not resolve the issue)
                 * cache resolved built-in tampletes
                 * optimizate operations with byref dynamic variable (no need for boxing / unboxing) - should be locally
                   boxed
                 * support mta_gui, vm_mta_console
                 * the following code does not work - theOwner.resize(int width, int height)  (see forms'SDIWindowListener.onsize)
                 * interface - can the wrapper class be saved to use it several times?
                 * set operation with constant array should not be allowed
                 * support static prefix to allow operations with static field only
                 * sealed static fields, cannot be changed in the child classes?!
 
                 * mta system : check the situation when too many threads (> MAX_THREAD)
                 * nested code : read only outer field
                 * elt - exception handlers
                 * script engine : do not allow left recursing (e.g. A -> AB )
                 * replace S -> AB / S -> AC with S -> A{B | C}, using forwards to resolve prediction log
                 * advanced script : templates,closures,exception handling

