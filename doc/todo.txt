week x:                 

x  - compiler                                                                                                                                        
i  - ide
a  - api

l  - language                                                                                   
s  - samples
f  - flagship project (up to 2)                                                                                                   
t  - tools                                                 
v  - vm script                                                                                            
                                                                                                                 
- dev                                                                                                      
- maint                                                                                                                                          
- rev                                                                                                                 
- opt
- port
- doc
                                                                               
------                                 
Currently:
------
              adev - lib30                                        
                       * lib30 system'text
                       
                       * lib30 extensions

                       * TimeSpan : difference between two dates should be in days, hours, seconds is calclulated not correctly
                       * TimeSpan : test constructors
                       * Date : convert to utc and back

                       * characterController.isUpperCase / isLowerCase - simplify short to int converting or allow to pass short as an extenal
                         call parameter

                       * ShortNumber.get&int - could we simplify the code, currently we have to call int explicitly because IntNumber is not yet defined
                       * uncomment all tape_tester tests

                       * think over object serialization, for example - save the object into file and load back

                       * serialization to and from : xml, binary

                       * find out if the bool is called after each enumeration step - next call
                       
                       * migrate all the code from old version
                       * test dynamic_test
                       * test dynamic samples
                       * test literalOp.trim method

                       * uncomment Real#class.new&int[1] and Real#class.new&long[1]

                       * uncomment all code

                       * FileStream - implements clone

                       * literalConvertor.convert&long&base - reimplement

                       * mathOp.mod -- fix implemention for real number
                           #method mod : anOperand
                           [
                              #var(type:real) aux.
                              (self/anOperand)~realOp Round &out'real:aux.
                              ^(self - (aux*anOperand)).
                           ]  
                       * make sure the stream is correctly closed after the operations with files
                       * move Array.add(1) method to the extension ??
                       * should control foreach&until be implemented in EFunction?
                       * implement: extensions'math'power - support integer values as well                       
                       * combinators should work both with list and array
                       * system'$consolehandler: if the returning handler is -1
                       * system'$consolewriter - the exception should be raised if the operation
                         is unsuccessful
                       * EReflector: raise an exception if NameOf returns zero
                       * timespan: constructor?
                       * date: custom presenter / formatter / custom formatter
                       * literalvalue.add&type'short -> rewrite code to append char without creating a new temporal literal
                       * date - return utc time
                       * implement analog of String.Format
                       * calender: custom formatting
                       * implement controlEx foreach:aList &send:%reset - we should provide some message classes which can contain the parameters
                         and could be invoked by eval
                       * classOp : test if object is subclass of ??
                       * literalOp : uppercase / lowercase
                       * charOp : isUppercase / isLowercase
                       * charConvertor - convert int / short / byte / literal
                       * BaseBoolValue should be private

<=================> 

1.9.18
--------
week2:
              sdev - samples
                       * migrate all samples (mt, vm, interpreter, calc, scripts)

              sdev - api doc
                       * create API : system'CharValue
                       * create API : ...
                       * it should be listed extensions per supported protocol
                       * create API doc
                       * change api faq
                       * copy protocols to doc\protocols
                       * support dispatch method
                       * support redirect method                       

               adev - console operations:  
                       * read / write operation: complex types
                       * write formatted numbers
                       * write formatted string (with parameters)
              arev - general review
                       * system'IntNumber : #method literal = literalConvertor convert &int:$self literal - we do know the result, so
                         the second method call is excessive
                       * bsort example, sortRange method : variable is used because of loop implementation
                       * goods : Record.get&literal : 
                                  #method literal = ("Name:" + theName + " Price:" + thePrice literal) literal.             
                       * review loop code (see system'io'$ConsoleReader) :
                             #loop
                             [
                                 ...        
                                 continue   // -- should be correctly loaded into accumulator
                             ].
                       * review literalControl.split&by - could we ismplify / beautify the code
                       * review all samples : simplify / refactore (look if the code can be reused)
                                                                                                                             
              arev - lib30 review
                       * review extensions'math'EMatrix, simplify / optimize the code

                       * make sure all method are safe (raise exceptions if the argument is wrong, the result is wrong, ...)

                       * LiteralIndexer implementation : try to optimize to minimize new object creating

                       * system'primitive should be private symbol? (but it should be accessed throughout system packages, e.g. system'io and so on)

                       * review: system'routines'indexable
                       * review samples
                       * review rosetta samples
                       * int and index subjects should be synonym ?? (side effect if int could be used instead of index for the operation with literals
                         for example)
                       * CharValue: short and char in some form are interdependant, maybe should be synonym as well?
                       
                       * system'intnumber, ... - modify the current implementation for the basic operations should be external , current implementation
                         is not safe , if for some reason the compiler optimization is turned off (replacing operation with the direct action) the code
                         will raise out of stack error
                       * LiteralValue : indexOf&index&out'short and getAt&index&out'short should be moved to primitive object                                         
                       * system'LiteralValue : probably getAt&index&out'short and indexOf&index&literal&out'int should be implemented
                         in literalPrimitive like other operations?
                       * system'Array : probably getAt&index&out'short  should be implemented
                         in arrayPrimitive like other operations?
                       * Real should support operation with long numbers
                       * system'ByteArray : should support indexOf operation without out parameter, should the ones with out parameters
                         be implemented in byteArrayPrimitive ?
                       * should clone be implemented in system'Object and be overridden only when it is required?                                                
                       * do we need system'dynamic'Class, system'dynamic'Struct can be used instead
                       * optimize control.forrange implementation

                       * fix warnings for system'String
                       * pattern : for i,j - forregion &int:0 &int:0 &int:n &int:m
                       * should get&length be moved into generic extension?
                       * review all classes : simplify / refactore (look if the code can be reused)
                       * review extensions'consoleEx implementation - do we need Wrap?
                       * comparing literal and char (see for example trans sample)
                       * optimize extensions'convertor.save&to ; when literal to integer converted, int value is created which has no use,
                         nested class is dynamic as well
                       * ShortNumber.less&short - review current implementation, it may not work correctly with negative short values if
                         hiword == 0 (it is presumed that for negative word, hiword = -1, which is not always the case)
                                                      
              adev - lib30 optimization
                       * review $ConsoleWriter.write&literal[1]
                       * TextBuffer.delete&index&length : reimplement the method to avoid unnecessary literal creation
                       * review Literal.get&length and try to simplify internal implementation (get rid of extra type casting, boxing, ...)
                       * optimize output code: system'Object 
                       * convertor.toLiteral(1) : better to use classOp.respondsTo(1)?
                       
                       * start to use stack allocated variables to optimize the code : console operation, ...
                       * support all primitive arithmetic operations with different types: int x long, int x real, long x real
                       * system'io'MemoryStream - do not create a new integer after each operation
                       * optimize ArrayIterator / MemoryStream, it should not generate every time a new object
                       * LiteralIndexer : do not create new integer for ever "next" and "available" call
                       * TextBuffer : redesign delete operation, it should not create new literal classes
                       * BoolValues and InvertedBoolValues should be used for branching primitive implementation,
                         modify the code, from reading bool values from stack to constant array
                       * system'LiteralIterator - operation available and next should not creates a new object , try
                         to use stack allocated object for the length operations
                       * review Array.add&array - make sure new objects are not created for length operations and inside loops with indexes                      
                       * review ws_insert function (in assembler), try to simplify it
                       * Real#class.new&int[1] - optimize

              srev - console samples
                       * simplify goods (Record.get&Literal implementation)
                       * rewrite pi sample to use stack allocated variables / parallel calculating
                       * matrix: use Pair in matrix sample
                       * textdb: dynamically unserialize subject
                       * matrix: test matrix operations
                       * matrix: multiply - should use realnumber rather than real
                       * vmconsole

              adev - dynamic programming
                       * deserialize object
                       
            smaint - testing
                       * bestshuffle : fix the code - abracadabra, baarrcadaab, (0)  in ELENA - 4
                       * extend realtest with comparision operation test
                       * modify system test, it should raise an exception if any of the tests fails
                       * think over lib30 automatic testing based on script, e.g. write automatic test sequences which can be applied
                         to any object

week3:
              xdev - script engine
                       * global variables
                       * build structure

                       * build class
                       * local variables
                       * should be able to parse 2.add(3) - currently dot is considered as part of real number
                       * migrate elenasm to the new platform ; two syntax scheme - the base one defined in elt.es
                       * script engine - ~ to indicate relative to elena bin folder

                       * migrate

                       * if the script contains only grammar, virtual machine should not be called

                       * implement basic operations with ElenaScript (expression,variable,loop,branching,new class)
                           - text generating
                           - construct objects - implement expression, with variables
                           - using roles
                           - branching
                           - branching in code
                           - assigning values to dynamic objects
                           - global variables
                           - script engine support in ELENA code : text generating                           

                       * use script to build objects
                       * use script to parse
                       * use script generate code
                       * current implementation is done in two passes, simplify to one
                       
              sdev - c# samples
                       * try to implement c# reflection samples
                       * try to implement c# lamda examples (lists)
                       * parse an object to xml and back

              xdev - elenasm
                       * redesign ScriptVMCompiler, right now it simply store the text and parse it again, more effective way can be used
                       * inline script improve error handling
                       * make possible to declare pseudo variables (associate the stack content with identifier) ??                                                

              sdev - prime project
                       * interpreter : execute simple sample3.txt
                       * interpreter : execute sample1.txt
                       * interpreter : execute sample2.txt
                       * interpreter : find out why the debugger does not work after script engine call

              sdev - elenasm
                       * elenasm: cannot parse the following expression: 2.add(3)  - reads as 2.
                       * using script engine from ELENA program - return the result
                       * using script engine from ELENA program - error handling
                       * support several grammar rules
                       * methods - variables
                       * methods - roles
                       * if
                       * if in the method
                       * while
                       * while in the method
                       * method - clear stack after the last operation?
                       * extends the object with dynamic code
                       * raise an error if the expression structure is not correct (e.g. .add(xx xx, ff))
                       * inject vm console into IDE

              sdev - prime project
                       * simple calculator
                       * vm console
                       * calculator
                       
                       * game of life : space (new space region should ask the owner for neighbours ; e.g Space.new&x&y&west:anOwner, anOwner should be asked
                         for all neighbours)
                         
              sdev - rosetta samples              
                       * Call a function
                       * Call an object method
                       * Canny edge detector
                       * Carmichael 3 strong pseudoprimes
                       * Casting out nines
                       * modify amb operator using open argument list 
                       * arraymode: support collection of different types
                       * update amb sample on rosetta code site
                       * C samples
                       * Averages/Pythagorean means
                       * D samples
                       * Catalan numbers
                       * Brownian tree
                       * E samples
                       * Catmull       * Atomic updates
                       * Cholesky decomposition
                       * 24 sample
                       * Animate pendium
                       * Animation
                       * Binary strings
                       * Bulls and cows/Player
                       * Chat server 
                       * Checkpoint synchronization
                       * ...

              sdev - calculator
                       * review

              sdev - elenasm
                       * refactor & optimize the engine code
                       * should the parameters be saved in the correct order, so no need in reverse command?
                       * should the object and role be saved in the correct order, so no need in reverse command?

              sdev - interpreter
                       * fix interpreter.bat (should start vm somehow)                       

              fdev - virtual workshop
                       * create a new object interactively
                       * send a message / test it

              sdev - vmconsole
                       * migrate

              sdoc - tutorials
                       * post sum sample
                       
              sdev - eldoc
                       * review possible solution using script engine to define parsing rules
                       
              sdev - visualizer
                       * build hello world sample by constructing / view / edit
                         tape

              sdev - script engine
                       * trace could print the result directly to console?? (so it will simplify script debugging)
                       * will it be possible to configurate the script engine, e.g. implicitly allow operations, so script configuration
                         cannot be abused for nasty injection
                       * redesign cfparser, to use breadth-first model (current one - deep first)
                                                         
              sdev - prime project
                       * eldoc: dynamic parser
                       * upndown
                       * script program - calculator

week 4:
              smaint - rosetta samples
                       * fix bestshuffle
                       * calendar

              xmaint - package
                       * create installation package
                       * release : compile / copy elenart
              
              imaint - test
                       * debugger does not show the integer value content correctly:
                            #var n := Integer new.
                            #var l := n long.
                         after the second operation it says n content is 20h

              xmaint - test
                       * test short -> int, int -> short should correctly set sign
                       * test system'io'StreamWriter
                       * test system'io'BinarayReader / system'io'BinarayWriter
                       * test ByteArray operations
                       * test ShortArray operations

                       * consoleReader.read&Line : test with smaller buffer and longer string (to check how it works for large input)
                       
                       * test operation with stack allocated binaray array (write / read / length / getAt)
                       * boxing: message target / operand, operator target / operand
                       * make sure exclude command excludes the stack correctly (e.g. any script sample - GC should happends inside
                         script, so we could check if the caller stack is included correctly)
                                              
1.9.19
--------
week1:
              idev - script engine
                       * build-in script into IDE

              xdev - linux
                       * linux linker

                       * paths: lib    - \usr\share\elena\lib30
                                         \usr\share\elena\src30
                                config - \etc\elena
                                data   - \usr\share\elena - data

                       * linux console operations
                       * linux file operations
                       * linux date / time operations
                       * port elc to linux
                       * port ecv to linux
                       * review deployment mechanism
                       * port elenavm to linux
                       * port elide to linux
                       * port elenasm to linux
                       * port elt to linux
                       
              idev - usability
                       * it should be possible to turn-off deleting compiled modules if one of the project module fails
                       * recognize out of memory exception
                       * error: more accurate error messages
                       * library explorer: make possible to navigate and disassemble ELENA API
                       * test compilation with a very long identifier names                       

              idev - debugger - call stack
                       * call list : correctly show symbol call, sometimes symbol is not correctly displayed - optimization??
                                              
              idev - debugger - watch
                       * show shortarray, bytearray, intarray
                       * fix debugger to correctly show arrays
                       * tune debugger, make possible to use step over / step into everywhere
                       * debug loop - should the debugger goes directly to the loop end or better to the loop start (as it was before)
                       * debug script
                       * implement watch
                       * show data variables (currently only int / short are displayed)
                       * show output argument
                       * fix debugger to correctly show stack allocated objects: custom type (e.g. __win_systemtime)
                       * show built-in variable $subject
                     
              xdev - generic development                                                      
                       * get rid of bitwise operators
                       * and, or, xor, add, subtract, divide, multiply, getAt, setAt generic messages or appropriate operators (+, /, *, -, @, @:=)
                         can be replaced with inline code for known data types (or arrays)
                       
                       * it should be possible to convert int constant to int / short / byte / long ; literal constant to
                         char / literal in run time, 
                         
                       * elenart : implement basic reflection functions
                       * message/subject should be constant which is boxed when it is required ??
                       
                       * constructor / method resend should be done without opening a new frame

                       * make possible to create private type

                       * IntNumber.add&long$ is not stack safe : the possible solution - does not allow any operation with the strong type until the wrapping
                         class is declared, the object can only be passed to another object - in normal case boxing operation should be called - if the size
                         is not declared raise the error                         
                         
                       * forward class declaration with a type (should be later verified)

                       * When boxed operation with embedable structure is executed -> the object change will be lost -> warn then the object
                         was boxed                         

                       * variable should always have assign expression??

                       * warn if stack allocated object is boxed

                       * constant symbols should be sealed / closed ?

                       * in the following code:
                         int : anIndex = self find &index:anIndex. - anIndex does not have a type
                       
                       * it should be possible to provide the type for symbol / symbol constants

                       * use directly constants declared in another modules

                       * the operation with a type inside its implementer : probably no need to raise a warning (see for example system'calendar'DateTime)

                       * dot syntax: 

                         dot can be ommited if the nested expression contains only one expression ; in that case it will be compiled as lazy
                         expression if it is function (eval[0]), or as return expression if it is part of ?-! operator / nested function;

                         the problem is that if user write control do :[ console writeLine:"" ] - will raise an error                         

                       * warn if ^ operator is used inside nested action - that it is not allowed / will only exit the current nested code??
                       
                       * do ^ operation should be allowed in nested action?
                       * probably only one nested expression can be allowed without dot

                       * check if the class constructor really exists before direct call

                       * in the following expression - aTarget::aVerb int:self - typecast should be implemented

                       * it should be possible to call explicitly code declared in system'routine : system'internal'intptr eval &literal:x ...

                       * constructor may return constant objects as well (see min / max)

                       * boolean invert operator (and, or, ...)??
                       
              xdev - general implementation
                       * reimplement || operator : a msg1 || msg2  - if "a" does not support msg1, msg2 is invoked
                       * constant array
                       * StreamWriter::writeWideLiteral(char) - invalid code, it should be possible that the sub string ends inside char group,
                         so the actualy read size should be reduced to match the valid group
                       * every action code is a new class, is it possible to design it so no need to create a new class for every sub code?
                         (e.g. reference to the symbol code, known problem : mixing outer field with code reference) 
                       * loop should contain snop
                       * external call: stack should be excluded only if the method is marked as threadsafe
                       * messages should start with 0x80000000 for windows and from 0xC000000 for linux or always with 0xC0000000 ?
                       * it should be possible to turn off control virtualization, direct calls, optimization code, jumps
                       * both external call modes should be supported: winapi / c (currently only winapi mode supported)                 
                       * elenart, should support the similar functionality with elenavm (except script support)
                       * split hook into two : address , hook ; or use internal function for exception raising / handling?
                       * implement long hexadecimal constant
                       * opTemplate is used only for vm client, probably it should be replaced with a namespace used by a stand alone application
                       * hook and unhook consume stack, it should be reflected in bytecodewriter::save
                       * message reference - could we simply pass the message id (which is always negative, so no problem with GC reference
                         recognition), instead of symbol reference?
                       * probably we have to caching type wrapper, so no need to load every time                      
                       * compileMessageParameter : no need to pass count as a reference, it can be increased in compilemessageparameters as well                       
                       * ModuleScope::getClassType - cache the results to optimize the type retrieving ??
                       * try to avoid duplciate checks (for example check for methods / types)
                       * stack allocated objects : no need to save the reference to it as a normal reference, use okLocalAddress for such case,
                         so boxing mechanism can be simplified
                       * simplify primitive loop implementing
                       * rename / refactor weval - misleading name
                       * for type wrapper - should not be possible to return $self without boxing??? (because it may break the code if
                         not correctly programmed)
                       * boxing : object saving should be done only if the object was boxed
                       * DFA : replace current hotfix with character terminal with correct solution (probably in DFA should be two different states
                         one for single constant #10 and another for several constant or literal + constant - #10#13)
                         
                       
              xdev - multithreading       
                       * implement lock / unlock
                       * should the lock field copied as well during the object reallocating? (see core_mt'reallocate)
                       * threadhandle - remove the object from the reference table on closing
                       * reference table should be created on the program start for multy thread version
                       * thread table contains reference to the thread TLS, it looks unsafe if the system reallocate the
                         storage ; maybe better to store there data duplication? 
                       * static object should be thread safe
                       * architecture overview ; tls allocated for every thread and accessed by  FS:[2Ch] ; thread enumeration
                       * reimplement thread safe variable, safe points, safe regions
                       * threadhandle - provide safe region like it was in 1.7
                       * elenavm : support multithreading, either use explicit or implicit TLS allocation
                       * compile pi with mt
                       * compile anagram with mt

              xdev - byte code optimization                               
                       * stack allocated objects should be boxed directly (without ifHeap check)
                       * compiler option : switch off jump optimization
                       * compiler option : switch off direct calls
                       * hook: maybe offset should exclude call command size, so no need
                         in adjucment
                       * pi (3506) => ~2000 
                       * review system test for possible byte code optimization                       
                       * optimize type cast call (dispatch handler should be used) 
                       * external call: maybe in normal case we pass the literal reference directly and for all other cases stack allocated
                         byte array used?
                       * simplify external call
                       * multiple-select if the type of operands are known try to optimize it ; for example of switch value is constant, maybe
                         better to compare value ?? (if it is true / false constants for example)
                       * if no calls / GC operation do not use stack frame excluding
                       * if only method parameter is used, no need to use frame / self commands
                       * $self operation should be called directly without using redirect handler ?? (see system'routines'EnumerableIndexer)                       
                       * branching : if the result of the operation is known (e.g. it is predefined operation) - no need to typecast the result
                       * Object.equal[1] - resend operation can be implemented without a new frame
                       * primitive arithmetic / comparision operation with implicit typecasting should be allowed : int vs long, int vs real, long vs real
                       * can we implement #break statement which will not create a breakexception for every call?
                       * optimize output code: system'object
                       * optimize - operation with nil (==, !=)
                       * optimize hook / unhook commands
                       * should ret be followed with several nops?
                       * x : p = p eval. and x : p = p eval:$self. should be optimized
                       * operator == / != should support comparision with nil (direct implementation)

              idev - generic development                                          
                       * show the file encoding
                       * refresh / reload documents after changing encoding ??
                       * settings / project settings - could we simplify utf-8 <-> utf-16 conversion, maybe settings should store data in
                         utf-16 for windows?
                       * chinese (or others two or more UTF8 ) characters should take two columns (similar like tab)
                       * wintextview : reimplement the cursor locating code if it is not a monofont

week2:
              adev - gui
                       * general architecture
                       * class function
                       * eventhandle group object
                       * stack allocated variable : support dynamic byte array size (when size is not provided) - should be possible to allocate
                         dynamically for external operation
                       * support GUI mode
                       * support GUI application

              adev - lib30                                        
                       * TimeSpan : TotalDays, TotalHours, TotalMinutes, TotalSeconds
                       * OutOfRangeException - should be two - OutOfRangeException and IndexOutOfRangeException
                       * intOp mod - should work for integer numbers, and fails for real (or be equal to zero)?
                       * support sin, cos, arctan
                       * ShortNumber, ByteNumber implements basic functionality
                       * scriptControl.load&literal - raise an error if the result is broken
                       * group object : Wrap(a, %Even[ even value ])  - does not work, because get property use dispatch handler, think over
                         another group object - Group (a, %Even[ even value ]), which will works correctly
                       * implement Dispatcher : e.g. self~(Dispatcher(%int,%(int&to),%long,%(long&to) eval::sour) save:sour:dest ; think over the possible use
                         cases
                       * special class IndexedPointer - which is used to refer to the object by index
                       * operation with upper / lower case implementing
                       * expanding lib30
                       * Struct : check if the income message is "get"
                       * win32 file i/o operations should raise an exception with an error code
                       * implement: square function
                       * implement: square root
                       * implement: sine
                       * implement: cosine
                       * implement: tangent
                       * implement: arcsine
                       * implement: arccosine
                       * implement: arctangent
                       * implement: reciprocal
                       * implement: power function with integer
                       * implement: exponential
                       * implement: absolute value
                       * implement: round to specified decimal places
                       * implement: truncate to specified decimal places
                       * implement: truncate
                       * implement: round up
                       * implement: factorial
                       * implement: integer divide rounded toward zero
                       * implement: integer remainder rounded toward zero
                       * implement: greatest common denominator
                       * implement: least common multiple
                       * implement: natural logarithm
                       * implement: base 10 logarithm
                       * implement: logarithm with specified base
                       * implement: floor of the log
                       * implement: convert degrees to radians
                       * implement: convert radians to degrees
                       * implement: get maximum of two numbers
                       * implement: get minimum of two numbers
                       * implement: pi
                       * implement: exp constant
                       * implement: infinity
                       * implement: not-a-number
                       * implement: random number stream (0.0 to 1.0)
                       * implement: quick random number
                       * implement: bit at position (0|1)
                       * implement: position of highest bit set
                       * implement: test if all bits set in mask clear in receiver
                       * support: primitive operation int + long, long + int
                       
                       * convertor toArray , which converts list to elist wrap or returns itself
                         (to be used in extensions'patterns'Combinator and CombinatorWithRepetion)
                       * add program default exception handler: dispatch an exception to
                         the program 
                       
                       * review http://www.angelfire.com/tx4/cus/notes/smalltalk.html:  add missing implementation
                       * review http://www.angelfire.com/tx4/cus/notes/smalltalk.html:  Conversion:
                       * review http://www.angelfire.com/tx4/cus/notes/smalltalk.html and implement the same for ELENA, then publish
                         on wiki Sourcefource / github ; make sure all Smalltalk code have equivalent in ELENA

                       * implement multi-select method (control or value?)

                       * make sure stack allocated objects are correctly boxed for the custom int roles
                       * LiteralValue / String / TextBuffer : support appendLine?? (e.g. maybe in extension)
                       * controlTape should verify the range
                       * Iterator.get&index - current implementation is looks like a short circite, though due to optimization it is correctly implemented
                       * look at all wrapper around out parameter, replace the shortcut code with direct use of internal code
                       * implement LiteralValue.indexOf&index&char:aChar&out'int
                       * system'internal'handle_message : check if the message is generic than qualify it, otherwise use default dispatch code

week3:
              xdev - script engine
                       * branching
                       * looping
                       
1.9.20
--------
week1:
              idev - usability
                       * class view - make possible to browse the class methods

              xdev - general optimization                               
                       * can we resolve cast&to directly (e.g. second VMT entry is always cast&to)
                       * GC: card table scanning; could we optimize it ?                       

              xdev - boxing optimization
                       * could we simplify stack allocated object check
                       * review all the code and maximally simplify / reduce boxing operations

              xdev - dynamic programming                                             
                       * implement trace mode
                       * it should be possible Tape to debug  (see 1.x implementation)

2.0.0
-----
week1:
              xdev - elenavm
                       * should open / close frame override stack_bottom pointer? looks like it is not necessary
                       * elenavm: use reverse instead of set of swaps

              xdev - GC
                       * heap mg size should reserved but not committed and can grow
                       * out of memory exception should be correctly raised
                       * destructors
                       
              xdev - generic development
                       * private class - could we declare one class inside another (so it will be accessible only within its owner)

                       * should code block be called witout the method name e.g. (see Accumulator sample)
                          x eval:3  <-> x:3

                       * switch to xml config files

                       * asm2binx: correctly map parameters with a stack, should frame setting
                         and clearing be preprogrammed?
                       * constant refering to itself in VMT ; currently HOTFIX is implemented ; think over mor elegant way to resolve
                         that type of situation
                       * a lot of operations with intNumber, longNumber and realNumber look
                         alike, can we try to generalize them?
                       * could typed subjects be reserved for every module? So they have the
                         same ids in every module? (so we could get rid of long list of cached
                         values)
                       * to move all the code from core_routines into coreapi, implement coreapi in ecodes, get rid of import statement in the
                         code

              xdev - general implementation
                       * warn if number of subjects / verbs are overflown

              xdev - stack allocated variable
                       * long
                       * real
                       * bytearray
              xdev - script engine
                       * refactor / optimize script engine

              xdev - byte code optimization                               
                       * direct parameter allocation can be used for open argument list : e.g. OpenArgTester testParamsCopy &args:1:"a":3
                       * optimized switch statement implementation (e.g. ordered ??)                       
                       * optimize !=, <= and >= implementation
                       * optimize index operation (literal / array) ; indexer should use more optimize algorithm
                       * compiler should replace and:action / and in virtual statement with
                         appropriate inline code
                       * Compiler::compileMessageDispatch - if only message was changed (with the same parameter) - only
                         message should be changed and resend further

              xdev - native code optimization
                       * review bssearch implementation, try to optimize, reduce number of jumps / commands, make them parallel
                       * review commands, try to optimize, reduce number of jumps / commands, make them parallel
                       * review commands : use conditional moving
                       * review core
                       * starts to use Pentium commands: we need to introduce the mode for
                         i686 (cmov is not supported for older CPU, so we have to have two
                         set of commands)
                       
              xdev - script support
                       * should be possible to debug vm scripts

              idev - debugger
                       * implement watch
                         
week2:
              adev - lib30
                       * $ConsoleReader read &type'widestr &type'length:aLength
                          - currently additional method is used to pass the type of the parameter to external type,
                            local variable with provided type should be used instead:
                                #var(type:widestr) aLiteral := LiteralValue new &type'length:aLength. 
                       * extensions - review the code, can it be simplified?
                       * LiteralValue.add - currently three extra new objects are created, try
                         to optimize
                       * consolereader.readchar: review assembler code, try to simplify it
                       * comutator: could commutator be used to modify incoming message subject
                       * TextReader - the current design creates a new literal for each line is read, could we try to reuse it, e.g.
                         convert to another buffer (it will make three of them ???)
                       * TextBuffer: optimize: read, get, delete operations, try to minimize new object creation (using stack allocated
                         objects)                         
                       * pi sample: iteration algorithm, review existing FOR pattern

week3:

week4:
            xmaint - code base
                       * remove src27

            smaint - documentation
                       * Review code: create a dictionary                       


2.0.1
-----                                                                
week1:
              xdev - x64
                      * think over general architecture
                      * asm2bin64 - compile x64 bit opcodes
                      * create x64 elena vm


2.0.2
-----                                                                
                      
2.0.3
-----                                                                
week1:
              idev - usability
                       * ide: the files in subfolder should include path in its name?
              xdev - GCX
                       * MT: TLS table should be used to store exception information,
                         rather than global variable like in single thread version
                       * compile as multi-threading stand-alone
                       * compile as multi-threading vm client

week2:


2.1.0
-----                                                                
week1:
              idev - usability
                       * it should be possible to change the order of source files in the project
                       * elide: new window - vmconsole to interact with the code directly                       


<================>
stack:
            xmaint - code base
                       * get rid of comment warnings (starting with !!)
            imaint - ide2
                      * test with small page size intensive insert / delete operations
                      * test ide: goto error if the file is not opened
            xmaint - gcx
                       * test pi, anagram, notepad, upndown on gcxt platform
              xdev - optimization
                       * optimization: nested objects should be allocated after
                         all its members, so no need to use write barrier

                       * jump to another jump should be replaced by a single
                         jump

          xprj    - x project phase4:
                       * safe points: in method entry (??), is it enough to have
                         them in external call and loop?
                       * sync: make sure the object is not a constant
              xdev - linux elc
                       * review SG
                       * migration: parser
                       * test if wchar16_t compare and greater works
                       * generate syntax file 
                       * test parsing
                       * migration: compiler
                       * compile lib26
                       * migration: linker
                       * compile u_helloworld sample
                       * implement utf16 upper, lower 
              idev - linux ide2
                      * gtktextview: fix scroller implementation
                      * gtktextview: mouse support
                      * gtktextview: blink cursor
                      * migrate gtktextview to gtkmm
                      * gtktextview: delete / select
                      * make sure cursor is turned off for not active page 
                      * display document 
                      * move toolbar to gtkmm
                      * switch to gtkmm
                      * remove unused code in gtkideconst.h (and the file itself if it
                        is empty)

                      * source file including / excluding
                      * context menu
                      * editor settings
                      * turn on / off syntax highlight
                      * onTabSizeChange should be called for every document after tab
                        size is changed
                      * comment / uncomment
                      * two color scheme
                      * listview
                      * messagelog
                      * implement lower function
                      * mouse wheel
                      * make possible to provide path to vm in IDE
                      * should be possible to provide path to src folder

              fdev - gameplay
                      * network game
                      * make possible to hide / open table (so the form is expanded
                        shrinked)
                      * display the player score in front of the label
                      * gamemaster should prevent invalid use of joker (for ai)
                      * play the longest possible game (two players)
                      * there are too many duplicate code, doing actually the same
                        passing the event, probably one generic method is required;
                        think over how to reuse as much as possible
                      * play game with reduced memory size to watch possible
                        data leaks
                      * remove temporal code from core primitives
                      * check why the game is crashed time to time
                      * play network, review maintenance, review Stack
                      * do not display joker dialog on trumpless stage
                      * test game with two, three, four players
                      * start to work on tcp/ip connection
                      * could we think over another architecture which allow
                        to optimize the property overriding (at the moment too many
                        proxy objects are created)

            imaint - linux ide2
                       * find out there are two columns instead of one in
                         the search dialog comboboxes
                       * cursor function is called when the window is closing
                       * the current doc in window list should be marked
                       * after several ctrl+tab ide hung up
                       * ctrl+shift+tab doesn't work
                       * test syntax highlighting
                       * fix warning:no scrollable widget
          xprj    - gcx
                       * probably better to use already precalculated and rounded
                         (to 32) values for heap size(mg + yg, probably better to have
                         two constants yg_size, mg_size), it will simplify core_init
                         function (no need to calcuate and round sizes)
              idev - debugger
                       * support thread list
                       * debugger should load appropriate dnl modules for
                         loaded module
                       * warn if source code is not found by debug controller
            xmaint - usability
                       * make sure that collection class is not a structure

--------------------------------
[oooo] Complex System Development:
--------------------------------
 0) Upndown
    - should we disable minimal tramp suit for joker dialog
    - add support for tcp/ip mutli player mode
    - play a basic round with a remote player
    - add possibility to scroll through the score table
    - develop ai player (aggresive, cautious)
    - in ideal solution, game'player'hand'enum may be called only be game master.
      Main form should be able to call it only for its player
   - repeat socket read until temporal buffer is not empty (it is possible
     two simultanius command will be combined on read operation)
   - the game could not be released from the memory if it waiting for the result;
     fix it
   - test if random generator generates actually a random numbers
   - continue move to ELENA: show the card on the table using the mask to make
     cards look oval
   - host panel should display the current IP address
   - the playground background color should be green
   - hide the cards when F5 pressed
   - make not possible to press any key inside edit box of Ordering dialog
   - unsynchronized prepare command could block the program exit (on close of main
     window should class onstop application event)
   - continue move to ELENA: show statistics
   - continue move to ELENA: load / save game
   - on connect make sure that clients and the host use the same program version
   - if makeorder or getcard is failed in gamemaster code it should try to send the
     command once again
   - use original colors
   - disable accept button on start.
   - disable search button after pressing.
   - !! check if frmConnector is destroyed and removed from referencepool
     after game start
   - close all unused connection after the game start
   - use buttons with original glyphs
   - modify the code to make possible any card game
   - use upndown sample as a testbed for the code optimization

-------------------------------
[x] ELENA Language Development:
-------------------------------
    - is there should be special hints to be thread unsafe?

--------------------------
[o] ELENA API Development:
--------------------------
    - work with windows registry
    - make possible to truncate existing files
    - make possible to select system colors / brushes on the gui level
    - fcomip could be used only for pentium
    - make possible to execute another exe?
    - use createcomatibledc for every draw operation looks too expensive;can
      we modify paintboxhandler / imagehandler to do it only once?
    - make sure bitmap / hdc are properly released from the memory
    - for Image / PaintBox handle Paintstruct could be created as local one
      (no need to keep it on class level)
    - modify all float-oriented code to be correct, error handling,
      (should we save the float registers before operations?)
    - 'value' classes should support: min, max, succ, pred (int32value, real64value, ansichar)
    - is it possible to automize the process of data transfer over sockets?
    - database application which manage TODOs and KNOWNBUGs, possible to create
      what's new automatically, statistics
    - automatic code writing / reading from stream
    - optimize implement integer / longinteger modulus implementation in assembelr
    - basic'intnumber / longnumber / real should support method "in" to validate range
    - ext'utilities'Date should contain time in milliseconds since 1 Jan 1900
      rather then in milisecond since January 1, 1970 (UTC)

-----------------------------
[o] ELENA Sample Development:
-----------------------------
     - TextDB sample: load, save, search, add, delete records
     - calcgui should provide the list of calculation - in Listbox -> so we could select previous result
     - calcgui two modes: calculator like and the current one with the list of
       last operations
     - calc: make possible to declare constants
     - continue to work on graph sample: make possible to specify different
       functions, write your own ones, provide scaling and borders
     - new sample - expert system (prolog like sample)
     - new sample - logical game
    - regional time
    - examples to work with FileWriter

-------------------------
[xo] Compiler development:
-------------------------
    - weak references
    - get rid of comment warnings (starting with !!)
    - two compile mode - debug / release (we actually could have two
      sets of sections - with and without debug)
    - compile module only if it was  changed
       - probably we need to always use long jumps for bytecode jump command, it will
         simplify JIT compiler code
       - cosntant collections / groups / casts
       - optimize group / annex routine
       - shl / shr commands considered to be not optimal
       - if inline object depends only on its class it should be created only once
         and saved as a hidden object field
       - support linker map option
       - super variable could lead to unexpected behaviour if we use dynamic mutation
         (after super self variable becomes $self one)
       - support strong references (both protected messages and classes), linker
         should check if they are valid
       - Remoting

       - make strong link to the parent class? (!!)
       - make possible to change basic linker options (opImageBase, and so on)
       - look like opGCHeapSize and opSizeOfHeapCommit are connected with each other
       - should codeBase is always 0x1000?; maybe should be customized (see !!
         remark in linker)
       - writeNtHeader: stack size and similar parameters is constant; maybe should
         be possible to customize (see !! remark in linker)
       - support resources in exe file

       - try to optimize the parser table (less number of symbols)
       - inline classes can be created at the first reference to it and exists
         until the next GC call.
       - localization
       - support the following types of unicode source files:little endian, UTF-8?
       - new option target CPU: 386 / 686
       - add new coder: 686Coder whic override x86Coder
       - optimize the most critical code parts like send / redirect / cast routines
         using pentium commands
       - get rid of wait command for float-base operations?

       - try to use pairing instructions
       - MMX, SSE, SSE2 commands; could we start to use these commands?
       - PREFETCH command could be useful
       - compiler option which specifies the target CPU
    - relative fixup works incorrectly if the reference has an offset
    - optimize hash table filling for Linker tables

    - optimize the code using profiler
    - check for memory leaking (either profiler or simple check on the start
      and on the finish)
    - optimize hash table filling for ParserTable
    - check for all invalid / valid combination (russia characters)
    - check the debugger behavior in the case of system exception
      (does event EXIT_PROCESS_DEBUG_EVENT occur in this case);

--------------------
[o] IDE development:
--------------------
    - should search history be saved, where (in the project / ide config / and so on)
    - implements new features: quick short cut
    - review known bugs
    - improve debugger
    - create simple version of ELENA Code Wizard which add new menu item
    - continue localization
    - give more useful error message if forward symbol is not declared
    - raise an exception if debug module not found by debug controller
    - debugger should use engine's LibraryManager
    - review and refactor elc output redirect routine
    - move fast short cut to autoform plugin
    - show the list of possible messages
    - auto add shortcuts
    - clear keyboard buffer before the program run
    - auto trim for tailing whitespaces (space and tab) - the idea is not to save
      whitespace until the user not to insert any character
    - open all recent files
    - option to ignore unresolved references warning within the project namespace
    - display current file encoding in the status bar
    - ctrl+F8 go to the next statement
    - investigate stepping over / into annex inline symbols (e.g. $createHandle)
    - prevent from slowing down on the program exit (make possible to inidicate
      to the sistem that this step is the last in the program)
    - optimize debugger step collection access (use some kind of hash table,
      divide the code range into several bands and before direct search use
      it to narrow collection)
    - we do not need stop over inline symbols (except at the symbol beginning)
    - try to deal with the slowing debugger when it goes through the window
      system code in trap mode (e.g. in case of failed method in GUI application
      which terminates the application - is it correct?)
      (try to use breakpoint for any external code call to skip the step mode
      inside external written code - in fact no sense to do it)
    - gui applications are not released from the memory after debugging
    - test Undo / Redo operations for the small capacity (~40 or 50);
    - test operations with tab both virtual and real;
    - refactor dialogs module
    - too many duplicate code in editframe (toLowercase, toUpperCase, trim and
      so on), could we get rid of it?
    - maybe use CP_OEMCP then CP_ACP?
    - optimize (Styler)
    - check if window child created handles are destroyed (destroy method)
    - try to use DFA class for IDE sourcedoc class
    - possible problem when coping ascii text through clipboad - test with russian text
    - undo in overwrite mode works a bit strange
    - why if we have an error we do not see the warnings in messages window?
    - Plugins - and display message when selected
    - highlight the current line
    - new ide settings dialog: autocomp
    - debug watch should be able to display the longest possible identifer
      with the longest possible type e.g. IDENTIFIER_LEN * 2
    - show escape symbols
    - should not be possible close / open / compile project during debug -
      either break the debug or stop the operation
    - debugwatch should indicate if the object plays a role (shifted mode)
    - convert encoding routines
    - make possible not to load some source files (to simplify the debugging)
    - before start debugging make sure debug module is up to date
    - indent / outdent should align the selected code rather then simply
      move it (like in VS IDE)
    - find out optimal page size / history buffer capacity
    - tune up horizontal and vertical scrollers (like it's done in NP++)
    - set read only (?)
    - hide status bar (?)
    - display correct messages when the project is not compiled (missing
      exe / source files)
    - save the last active document / cursor position (?)
    - shows the number of warnings
    - source code assisten plug-in written with ELENA
    - configurable styles: colors / fonts
    - Outlining
    - Class Wizard
    - Auto complete?
    - Code patterns?
    - Message dictionary
    - error recovering (several errors)
    - make possible to change all tabs to spaces
    - code patterns like in VS (type short cut and press tab-tab)
    - Print
    - add Add Watch menu option
    - full screen mode
    - "find in files" function
    - Two editor panels like in NPP
    - clone current view
    - macros
    - autoformat
    - zoom in / zoom out
    - try to bring as much functionality as in notepad++
    - an icon on tab page?
    - make possible to treat the object as an array of bytes
    - make sure in the case of crash saveAllAsDraft and saveSettings are called
    - should we add the path to the recent history right after the project
      was open (or save the project even the program is crashed)
    - try to minimize the number of repaint (after pressing F8 repaint is invoked
      two times instead of one)
    - introduce project templates (with basic forwards)
    - make possible not to close the console window after the program finishing
    - add the editor option controlling this feature
    - tips?
    - new short-cut to got to message / output window
    - remove the code to import old style project file (project\projecttype)
    - why we create the string every time in EditFrame::paint function?

--------------------------
[oo] Cross-platform support:
--------------------------
   - create IDE for Linux
   - create compiler for Linux
    - start to port the code to Linux: compilator
    - start to port the code to Linux: linker
    - resolve all postponed linux oriented issues (!! todo:linux)
    - at the moment on every cursor blink the whole screen is redrawn, think over
      optimization

--------------------------
Documentation
--------------------------
    - rewrite specification page



    - update script blog posts
    - new post: sun two numbers (using lx script) 
    - documentation: vm hook

    - next tutorial blog post: operation with strings
    - next tutorial blog post: dynamic creating objects

    - publish combination sample after 1.7.6 release

    - describe statemachin on calc sample
    - new sample to demostrate group objects (publish in code project)
    - update project web page, get rid of tutorials page, they will be in blog
    - post tutorial 1: hello world
    - post what's next: systems with open architecture: dynamic code without reflection
      (interpreter sample)
    - full language description

    - rewrite Getting started
    - link to rosetta codein in the project web page / blog

    - blog post: object model: extended version

    - blog post: bsort example (work with arrays)
    - blog post: open calc
    - blog post: tiny language, print, argithmetic operations, if, loop
    - context-dependent roles
    - continue to desrcibe the language terms
    - provide samples
    - rewrite ELENA specification
    - rewrite tutorials
    - rewrite ELENA API
    - localize documentation
    - review old documentations and copy the actual info
    - review ELENA API - is there enough info to use the object without looking
      into source code?
    - add samples
    - add long description
    - create a documentation describing the current Coder implemtation with
      known restrinction
    - documentation is not up to date and too laconic
    - ELENA compiler / language technical documentation should be reviewed
      and enhanced
    - creates a documentation describing the handlers and events used by
      gui package
    - make possible to provide the symbol parameter protocol for property symbols
    - add class full descriptions
    - add class roles
    - add class events
    - goes through the public message list and assigns the expected functionality
    - review that these messages are used in comply with these protocol list
    - update VMT structure (including hash table) info
    - provide the full list of language features
    - re-read / correct ELENA API
    - API index link to $elena module
    - Adds the long description to be shown on the main page (shortdescr would be
      used only in index page)
    - read, correct and extend API descriptions. (now it's too short)
    - add new method descriptions for all classes
    - list of object roles?
    - code samples?
    - list the class protocols separated by comma
    - example of work with arrays
    - example of work with files
    - Calculator
     - continue to formulate ELENA paradigm.
    - write the article Power Of VMT
    - document ELENA syntax
    - dl, dnl file structure
    - byte code description
    - document ELENA byte code
    - document ELENA internal structures
    - document ELENA file structures

--------------------------
Tools
--------------------------
    - ASM2BINX: clear labelhelper after each entry compiled
    - ASM2BINX: Warn on unresolved labels
    - Installation package
