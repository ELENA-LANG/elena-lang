------                                 
In development:
------         

              zdev
                * write - Programming in ELENA : cookbook

              ydev
                * interpreter example

              xdev syntax
                * test words
                * test pi2
                * test all samples

              ydev
                * script : support several operation in a row
                * calc example
                * js example
                * remove obsolete code

              xdev
                * i += i + 1; Tester.test(i*2+1)
                * operation with numeric constant should be used with constant symbol as well
                * optimize pi sample

              ydev

              xdev - language
                * 2*i should be compiled as i*2
                * call a property directly
                * simplified syntax to invoke dynamic message?
                * optimize:
                     int dump[4];
                     dump[i*2] := 3;

              ydev

              xdev - lib
                * (re)implement toUInt extension
                * add test case  : i := i + j, i := j + i, i := j + i*2, i := j + j*(i+2)

              zdev
                * source to expression tree
                * expression tree to source

------                                                           
Pipeline:
------   
              xdev - tutorials
                * duck typing tutorial

              xdev - bytecode optimization
                * operations with stack-allocated array : dump[0] := 1;
                * operation with dynamic array should be direct???
                * inline arg : variadic normal arg list
                * inline arg : variadic long arg list
                                                                                      
              xdev - usability
                * warn if the project is not configurated
                * uncomment IDEController :: isOutaged
                *uncomment exclude from the project command

              ydev
                * redesign script code generation
                * build : returning (goto)
                * Stand alone executable: Script engine #64
                * ?fields

              xdev
                * public const commands := new::(1,2); - compiled incorrectly, should be not possible?
                * analizeSubExpression
                * analizeAltExpression

              xdev tests
                * #271
                * operations with weak array
                * operations with variadic array
                * check nil boxing
                * check boxing of incompatible types
                * test all examples \ rosetta code samples
                * test pi

              xdev
                * fixing #476
                * redesign invoke1..invoke31 - they should use the same class with messageid as a field

              xdev
                * primitive op where i is fields - i+=k
                * primitive op where i,k are fields - i+k

              xdev
                * (re)implement toUInt extension
                * #162 - explicit constructor
                * new system'dynamics'DynamicStruct() - raise an error
                * support lazyOp

              xdev  - int op - test and optimize
                * Tester.test(n+m*n);
                * pi sample

              xdev
                 * remove idle variable / field / constant (e.g. 2)
                 * import hashtable design

              xdev
                * debugger should show ref variable value

              ydev
                * test script examples

                * get rid of tape support??
                * get rid of extensions'dynamic'TapeAssembly??

              ydev - Linux
                * linker : adata + mdata + rdata (meta starts with size field)
                * get rid of debug section
                * suport elenart
                  
              ydev - build tape
                * support variadic argument list (if the number of arguments is bigger than 0x1F)
                * ssupport namespace import, so the build script can be shortened

              xdev
                 * opzimiation extension operation with a byte array parameter
                 * optimize i += 1
                 * optimize assign inp_op direct_call embeddable
                 * optimize direct_call direct_call embeddable
                 * optimize pi sample
                 * optimize r * n + 0.5r
                 * optimize dirty_ptr := dirty_ptr + int
                 * building expression tree - raise an exceptoion with missing class name

              ydev
                 * graph sample

              zdev
                 * reflector
                 * generate LIB40 API Doc

              xdev - elena 4.0
                 * primitive operations #86

                 * unboxing explicit local allocated extension #200
                 * Duplicate unboxing #370
                 * Operations with integer wrappers #427
                 * Optimization : operation with structure fields (byte or short) #278

                 * optimize gc - mg -> yg 
                 * migrate nodepad
                 * optimize intOp.Absolute method
                 * migrate chat sample
                 * test zeckendorf,zuang,wireworld
                 * uncomment c_a_g code
                 * migrate sqlite
                 * variadic closure : correctly free argument list - using the code to free until the zero is encounter
                 * gui : check default error handler
                 * bool_expr ? 1 : 0 - the expression result should be strong-typed
                 * support 2.2 syntax (without r postfix)
                 * optimize compiler : more efficient hash table, caching the results
                 * the following code should generate an error - lazy::(n < 5) - missing ^
                 * direct and, or, xor, shift, mul, div, equal, less
                 * pusha new bcopya popa => bcopya new bswap nop??
                 * direct operations with int constants e.g. $self create &int:(WS_STYLE1 || WS_STYLE2)
                 * Handle, Char : there should be special enbeddable cast T<int> = field - to allow using the integer field

                 * Various optimizations #431
                 * fix zeckendorf_arithm 

              dev - ide
                 * debugger : display message name

              dev - elena 4.0
                 * working on xforms

              ydev
                * closure

              dev - script engine
                * parse script and save it

              dev - elena 4.0
                 * optimize hash table implementation (both weak and strong typed)
                 * implement jsonObject.serializeTo(MyDTO);
                 * test: internal prop x, internal prop int x
                 * test prop, event
                 * prop public int x
                 * dynamic default constructor should create an empty dynamic object
                 * abstract class cannot be created
                 * read package info
                 * support seriaization properties - indicating which properties should be serilized
                 * support constants - declared only once and used through the class hierarchy
                 * support static fields - after declaration - every class child should initialize it
                 * support sealed static fields
                 * warn if the attribute value is not set
                 * support constant class meta attributes
                 * operations with meta data : introducing meta object : e.g
                     __meta[class][name] := class
                     __meta[class][dto] += name  

                 * supporting : const fields - constant values
                 * symbols : a += b
                 * fields : a += b

                 * (re)implement hashTable, using links, load control and so on
                 * fix : Hailstone sequence
                 * fix : Trigonometric functions (arctan)

                 * Reflection/List methods, Reflection/List properties, Runtime evaluation,Runtime evaluation/In an environment,
                 * Zhang-Suen thinning algorithm
                 * implenent break analog
                 * Support enumeration list #265
                 * Sockets
                 * review new {a,b,c} - syntax, it is inconsisten with root expression
                 * replace new object[]{-19.0r, 7.0r, -4.0r, 6.0r} with []{-19.0r, 7.0r, -4.0r, 6.0r}?
                 * property template - should support public / internal visibility attributes
                 * (re)implement UTF8Encoder.convert(..,string,byte[]) method
                 * implement Heap, Balanced Search Tree and Hash tables, review Map<T,Key> template, if it could be
                   optimized
                 * implement correctly - a[i][j] += 1 (see World Cup group stage)
                 * Wireworld
                 * modify quicksort to use insert selection for smaller amount (test on anagram)
                 * optimize calendar'Date.prop#Printable - do we need to copy value

                 * embeddable returning value : do not duplicate the method code - the original method should call
                   static one
                 * review RealNumber.#new<system'IntNumber>[1], is a new object created twice

                 * review if ref<int>.Value works correctly (it is embedded)
                 * check CharValue.WideLength
                 * review ByteConvertor
                 * check Array<..>
                 * review String / WideString, get rid of internal methods - use them directly

                 * (#378) support AccessViolation - _pxcptinfoptrs
                 * (#378) support Stackoverflow / OutOfMemory exception, reduce the maximal heap size in callstack
                 * lazy::(console.write("Reading a number:").readLine().toInt()) should generate an error?
                 * mixin :: { collection }, new::{ collection } - get rid of - new {}
                 * create a nested class / collection - syntax review

                 * direct,mixin should use the special syntax, get rid of hotfix in compileExpression
                 * property attribute - can be only the top most token
                 * no need to box variadic argument list for template opertions
                 * array operation with Array<type> should be resolved directly (an array is embeddable)
                 * support - singleton Code : BaseCode;
                 * syntax : template should be the last token in expression and one before the last for declaration
                 * => operator should work with expression as well - s.toInt() => ...
                   toInt is ignored
                 * calc sample - support properties
                 * review elenasm - simplify the coordination info, probably it should be encoded into the log itself,
                   so no need to fill the list (what about the string in calc sample)

                 * Thread.assign:(){} should be supported
                 * (re)implement tape debugger

                 * passing variadic list to the implicit constructor (see - TapeExpression)
                 * simplify operations with ref variable - if (0 == (cast int(theTop))) { ... }
                 * the following code - var arr := cast Array(o) ?? nil; - probably we have to skip the second typecasting, so it will
                   work
                 * attribute cannot be used as a class constant - s the code - 
                       = { bool equal(o) = self(object); }; - is not allowed
                 * allow to work with ref<int> directly
                 * implement a ? b, a ? b : c, a ? {}, a ? {} : {}
                 * abstract class cannot have constructors / default constructor
                 * uncomment validateClassDeclaration
                 * if (a) b else c;

                 * new anyToken { .. } - should raise an error?
                 * warn on operations with unassigned variable
                 * the following code should generate an error : var a.doSomething(b)
                 * stringOpHelper should be able to call the original trim method, currently it is not possible to call trim
                   method for the anonymous object
                 * in the interface it was possible to declare a parameter of non-existing class
                 * the following code - theIndexers[i] := arguments[i].indexer() - does not work correctly
                   (see SequentialEnumerator)
                 * debugger : variables inside for loop
                 * optimize SystemTime
                 * the following code should not be allowed - real n := n;
                 * uncomment __closuretape."#dispatch[1]  - check the subject correctly

                 * test unboxing with variadic arg list

                 * the folowing code should raise an error - real cast() = RealNumber new(self);
                 * long constant should not be boxed like int constants

                 * support Array<type> constructors

                 * reddit post - Switch statement

                 * identifier - message message

                 * the following code should be supported : newLength := newLength + cast int(theLength);
                 * TokenEnumerator : class TextBuilder should not be found (system'text is not imported)
                 * test try / catch operation : method not found, printing calling stack
                 * (re)implement dynamic variadic argument resolving
                 * primitive array should be passed directly without unboxing if allowed
                 * test - a[](...) - should be illegal
                 * test boxing / unboxing with dynamic reference
                 * support public & private templates
                 * property templates cannot be used directly and class templates cannot be used as a property one

                 * support c style return statement - return x;

                 * Indexer.Index property - should support abstract get and set accessors
                 * unboxing of boxing (in case if analizer does not resolve the issue)
                 * cache resolved built-in tampletes
                 * test all possible syntax combination
                 * simplify DerivationWriter :: newNode - use a common mask for all expression nonterminals
                 * optimizate operations with byref dynamic variable (no need for boxing / unboxing) - should be locally
                   boxed
                 * elt - exception handlers
                 * support mta_gui, vm_console, vm_mta_console
                 * the following code does not work - theOwner.resize(int width, int height)  (see forms'SDIWindowListener.onsize)
                 * interface - can the wrapper class be saved to use it several times?
                 * reimplement loop similar to lazy / direct
                 * set operation with constant array should not be allowed
                 * vm client : incorrect error if the program entry is not defined
                 * support static prefix to allow operations with static field only
                 * sealed static fields, cannot be changed in the child classes?!
 
              dev - debugger
                 * debugger : step over message operation
                 * fix debugger watch : bsort - ref<int> is not correctly recognized

              dev - tests          
                 * test elt

              exp - live programming
                 * implement code generation
                 * implement code transformation
                 * use script to build objects
                 * use script to parse
                 * use script generate code

              dev - tests          
                 * test vm sta : preloaded symbols / initializers
                 * test vm sta : exception handlers
                 * vm : Runtime evaluation, Runtime evaluation/In an environment
                 * mta system : check the situation when too many threads (> MAX_THREAD)
                 * nested code : read only outer field

              dev - general implementation
                 *  #77 : migrate GC algorithm
                 *  #77 : get rid of core_win, all functionality should be moved to elenart / elenavm
                 *  #77 : retiring core / corex 
                 *  #77 : get rid of tt_ptr field
                 * move system'core_routines'__exception register call to the system entry symbol

              dev - general implementation
                 * &0l - should be dynamically created

              dev - tests          
                 * gui : GUI component interaction, Hello world/Graphical, Simple windowed application

              dev - general implementation
                 * (re)implement sockets
                 * (re)implement tcpserver / tcpclient

              xdev - general optimization  
                 - closers passed as parameters should be stack-allocated

