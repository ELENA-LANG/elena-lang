------                                 
In development:
------                              

              dev - elena 4.0
                 * static field initializer should be invoked only if the class is used
                 * implement class attribute - a preloaded code which is invoked only if the
                   class is used
                 * array accumulation - operation to be implemented in compile time
                 * operations with meta data : introducing meta object : e.g
                     __meta[class][name] := class
                     __meta[class][dto] += name
  

                 * attr_template prop_template ... prop
                 * attr_template ... method

                 * property attributes should be leading ones

                 * class attributes (run-time / meta)
                 * global attributes / manifest
                 * mainfest info

                 * (re)implement hashTable
                 * fix : Hailstone sequence
                 * fix : Trigonometric functions (arctan)

                 * Reflection/List methods, Reflection/List properties, Runtime evaluation,Runtime evaluation/In an environment,
                 * Zhang-Suen thinning algorithm
                 * implenent break analog
                 * Support enumeration list #265
                 * Sockets
                 * review new {a,b,c} - syntax, it is inconsisten with root expression
                 * replace new object[]{-19.0r, 7.0r, -4.0r, 6.0r} with []{-19.0r, 7.0r, -4.0r, 6.0r}?
                 * property template - should support public / internal visibility attributes
                 * (re)implement UTF8Encoder.convert(..,string,byte[]) method
                 * implement Heap, Balanced Search Tree and Hash tables, review Map<T,Key> template, if it could be
                   optimized
                 * implement correctly - a[i][j] += 1 (see World Cup group stage)
                 * Wireworld
                 * modify quicksort to use insert selection for smaller amount (test on anagram)

------                                                           
Pipeline:
------                                                                                         

              dev - elena 4.0
                 * (#378) support AccessViolation - _pxcptinfoptrs
                 * (#378) support Stackoverflow / OutOfMemory exception, reduce the maximal heap size in callstack
                 * lazy::(console.write("Reading a number:").readLine().toInt()) should generate an error?
                 * embeddable get should work with nonstructure types #424
                 * embeddable eval[1]
                 * embeddable get[1]
                 * embeddable eval[2]
                 * mixin :: { collection }, new::{ collection } - get rid of - new {}
                 * create a nested class / collection - syntax review

                 * implement textdb sample

                 * direct,mixin should use the special syntax, get rid of hotfix in compileExpression
                 * property attribute - can be only the top most token
                 * no need to box variadic argument list for template opertions
                 * array operation with Array<type> should be resolved directly (an array is embeddable)
                 * support - singleton Code : BaseCode;
                 * syntax : template should be the last token in expression and one before the last for declaration
                 * => operator should work with expression as well - s.toInt() => ...
                   toInt is ignored
                 * calc sample - support properties
                 * review elenasm - simplify the coordination info, probably it should be encoded into the log itself,
                   so no need to fill the list (what about the string in calc sample)

                 * Thread.assign:(){} should be supported
                 * (re)implement tape debugger

                 * passing variadic list to the implicit constructor (see - TapeExpression)
                 * simplify operations with ref variable - if (0 == (cast int(theTop))) { ... }
                 * the following code - var arr := cast Array(o) ?? nil; - probably we have to skip the second typecasting, so it will
                   work
                 * attribute cannot be used as a class constant - s the code - 
                       = { bool equal(o) = self(object); }; - is not allowed
                 * support 2.2 syntax (without r postfix)
                 * allow to work with ref<int> directly
                 * implement a ? b, a ? b : c, a ? {}, a ? {} : {}
                 * IntNumber.#cast<'IntNumber> - why it always creates a new object?
                 * abstract class cannot have constructors / default constructor
                 * uncomment validateClassDeclaration
                 * if (a) b else c;

                 * new anyToken { .. } - should raise an error?
                 * warn on operations with unassigned variable
                 * the following code should generate an error : var a.doSomething(b)
                 * stringOpHelper should be able to call the original trim method, currently it is not possible to call trim
                   method for the anonymous object
                 * in the interface it was possible to declare a parameter of non-existing class
                 * the following code - theIndexers[i] := arguments[i].indexer() - does not work correctly
                   (see SequentialEnumerator)
                 * debugger : variables inside for loop
                 * optimize SystemTime
                 * the following code should not be allowed - real n := n;
                 * uncomment __closuretape."#dispatch[1]  - check the subject correctly

                 * test unboxing with variadic arg list

                 * the folowing code should raise an error - real cast() = RealNumber new(self);
                 * long constant should not be boxed like int constants

                 * support Array<type> constructors

                 * reddit post - Switch statement

                 * identifier - message message

                 * the following code should be supported : newLength := newLength + cast int(theLength);
                 * TokenEnumerator : class TextBuilder should not be found (system'text is not imported)
                 * test try / catch operation : method not found, printing calling stack
                 * (re)implement dynamic variadic argument resolving
                 * primitive array should be passed directly without unboxing if allowed
                 * test - a[](...) - should be illegal
                 * test boxing / unboxing with dynamic reference
                 * support public & private templates
                 * property templates cannot be used directly and class templates cannot be used as a property one

                 * support c style return statement - return x;

                 * Indexer.Index property - should support abstract get and set accessors
                 * unboxing of boxing (in case if analizer does not resolve the issue)
                 * cache resolved built-in tampletes
                 * test all possible syntax combination
                 * simplify DerivationWriter :: newNode - use a common mask for all expression nonterminals
                 * optimizate operations with byref dynamic variable (no need for boxing / unboxing) - should be locally
                   boxed
                 * elt - exception handlers
                 * support mta_gui, vm_console, vm_mta_console
                 * the following code does not work - theOwner.resize(int width, int height)  (see forms'SDIWindowListener.onsize)
                 * interface - can the wrapper class be saved to use it several times?
                 * reimplement loop similar to lazy / direct
                 * set operation with constant array should not be allowed
                 * vm client : incorrect error if the program entry is not defined
                 * bool_expr ? 1 : 0 - the expression result should be strong-typed
 
              dev - tests          
                 * test elt

              exp - live programming
                 * implement code generation
                 * implement code transformation
                 * use script to build objects
                 * use script to parse
                 * use script generate code

              dev - tests          
                 * test vm sta : preloaded symbols / initializers
                 * test vm sta : exception handlers
                 * vm : Runtime evaluation, Runtime evaluation/In an environment
                 * mta system : check the situation when too many threads (> MAX_THREAD)
                 * nested code : read only outer field

              dev - general implementation
                 *  #77 : migrate GC algorithm
                 *  #77 : get rid of core_win, all functionality should be moved to elenart / elenavm
                 *  #77 : retiring core / corex 
                 *  #77 : get rid of tt_ptr field
                 * move system'core_routines'__exception register call to the system entry symbol

              dev - general implementation
                 * #200 : unboxing explicit local allocated extension 
                 * &0l - should be dynamically created

              dev - tests          
                 * gui : GUI component interaction, Hello world/Graphical, Simple windowed application
                 * mta / gc : Hailstone sequence

              dev - general implementation
                 * (re)implement sockets
                 * (re)implement tcpserver / tcpclient

              xdev - general optimization  
                 - optimize r * n + 0.5r
                 - closers passed as parameters should be stack-allocated

