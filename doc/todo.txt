------                                
In development:
------         

[development]
  ### EPIC: elena 6.2 ###

  === Iteration 25 (14.6.24) ===
  --------------------------------------
  opt:pi under 6 sec, #611, #602, #601, #586
  maint:#650
  exp: generate code templates - e.g. simple console app
  ide:vm debugger, #617, linux ide, linux debugger
  tools:#618, #620
  prom:#635 on reddit;elena in nutshell every 1 week; 
  port:elenavm / elt for linux, helloworld gui sample (button)
  doc:api - add descriptions
  --------------------------------------
  - vm : GC statistics
  - github action : build for linux
  - ide : editor settings - tab
  - ide : debugger settings
  - generate code templates : generate a code based on a record
  - generate code templates : project templates
  - #184 : linux simplest gui (refresh textview, onDocumentUpdate ...)
  * #590 : vm : InjectProxyTypeLA 
  - #590 : implementing interface injection : strong interface
  - elt : nested call must not stop / start vm 
  - elt : fails after executing several times
  - #661 : fix an issue
  - #658 : create debug adapter
  - #265
  - #637(bt tests (>=4), all bc tests)
  - #562 : when the setting is on, does not allow to return / assign nil value
  - chat sample : client - try to connect
  - fix gui samples (create apropriate tests)
  - #562 : nullable
  * #562 : boxing to Nullable<T>?
  * #562 : warn if nullable operation is executed without checking if it is nil
  * #562 : support nullable reference : if option set - nil can be returned only for nullable reference
  * #562 : support nullable reference : if option not set - just like a normal type
  - #562 : nullable : int? + int? -> return int? (if both nil -> the result is nil)
  - #562 : nullable : int? a := null; int b := a ?? 0;
  - #562 : nullable : int? a := 2; int b := a;
  --------------------------------------
  int? a := nil;  <- box the reference into Nullable<int>
  int b := a ?? 0;  // !!
  int b := a // !! is not allowed

  obbect b := a;
  a.hasValue and so on   

  * direct operation - passed the address of the variable
  * when passed as weak - boxed into Nullable<T>
  * nullable : strong typed - is passed directly nil or boxed value

  * declared nullable variable - reference to the variable containing the reference value or nil

  * int? a := 2;  // -- is declared as NullableLocal - which is boxed specially

  * #562 : nullable : nullable struct

  * #562 : 
    - int? n := nil; // the variabe n has a type of int, but is is dynamically allocated : so the type of the object is NullableLocal

int? n := 2; // - the constant symbol is used
var o := n;  // - no boxing is involved

  === Iteration 26 ===
  --------------------------------------
  dev: #574,#619,#580,#658(debug,compile,build,IntelliSense)
  op:github action - create a draft release
  opt:
  maint:#283, #620, #486, #506
  exp:
  ide:
  tools:
  prom:post an article about attributes (decorate a class, defining which operation is allowed)
  port:#79

  ### EPIC: elena 6.3 ###

  === Iteration 27 ===
  --------------------------------------
  dev:#97,#98,#99
  op:
  opt:
  maint:
  exp:
  ide:
  tools:
  prom:
  port:

  === Iteration 28 ===
  --------------------------------------
  dev: async programming
  op:
  opt:
  maint:
  exp:
  ide:
  tools:
  prom:
  port:

  === Iteration 29 ===
  --------------------------------------
  dev: 
  op:
  opt:
  maint:
  exp:
  ide:
  tools:
  prom:
  port:

  === Iteration 30 ===
  --------------------------------------
  dev: 
  op:
  opt:
  maint:
  exp:
  ide:
  tools:
  prom:
  port:

  === Iteration 31 ===
  --------------------------------------
  dev: 
  op:
  opt:
  maint:
  exp:
  ide:
  tools:
  prom:
  port:
