1) ELENA API is a set of symbols

   Symbol is a reference to an object / class
   
2) Message consists of a verb and a signature. The signature defines role / interface / type of the message operands . It consists of
   message result subject (it can be omitted) and the operand ones

3) Operator implementation
   - an operator implements the appropriate action with its operands, if operands are unknown then the operator is replaced with the
     appropriate generic message

---


1) The qualified subject is used to define the possible operation with the object ; the one starts with type define the primitive object -
   pure data, the appropriate role is used to work with it
   
   Qualified subject garanetee the content by sending the appropriate subject to the object, if the object is unknown or simply passing it
   if the object was already identified

   alternatively can we use the appropriate role to work with the object ?? 

   what about primitive one ? in this case the reference to the stack is passed


1) Modules, namespaces

   every class / symbol has a namespace which defines the class location (the module name). The namespace may consist of several parts 
   (separated by comma) - the module location in the file system 

   private:
      if the class / symbol starts with '$' symbol it is considered to be private (accessible only in its own module)    
    
2) Messages                                                                                           

   Message consists of the signature(list of subjects + param count) and verb ; 
   it is possible to change the message subject (dispatching, message invoking)

3) Subjects

   Subjects defines the message parameter role: they could be generic, named and typed
   
   - generic:
       it is not neccessary to name the message subjects ; in this case they considered to be named as &param
  
       e.g.  x add:y (- add&param) , action eval:x:y  (eval&param&param)

   - named
       if the parameter should be implicitly named (e.g. to provide its role)
       
   - typed
       if the parameter should have a namespace ; the typed subject should be explicitly declared in the coresponding module
       
   - primitives                          
       (types'xxx) specifies the object "type", they should not be declared, but the list is limited to:
       int, long, real, short, byte, widestr, bytearray, index, length, reference, widechar
             
4) Verbs

   - custom verb is replaced with the subject plus EVAL message, it can contain several parameters as well

5) Class / Symbol Declarations / Primitive Types / Inline classes / Inline actions (both generic and named) / Messages / Signatures

   Class - may have parent or inherit super object system'Object ; could be static or dynamic; "structure", "fieldset" or stateless

   Symbol - saved expression (class name is either class class reference or stateless constant)

   Primitive - there are several built-in "structure" classes - int, long, real, widechar, wideliteral

   Inline / Nested classes - may have only stateless parent, always define the object

        { add &param:n [ ... ] subtract &param:n [ ... ] }

        MyStateless { add &param:n [ ... ] subtract &param:n [ ... ] }

   
   Inline Actions: the one method nested class, cannot have a parent

      &&x:x &y:y [ ... ] - named parameter list

      &&x &y [ ... ] unnamed parameter list - <=> &&param:x &param:y
      
    Inline Array
       MyArray ( n1, n2, ... ) 

    Inline Constructor
       MyInteger [ $self new &type'int:0 ].
   

     
6) Constructors
    constructors are in fact class class methods
    
    - "normal": a constructor code automatically creates the object instance (calling default constructor) before executing
       the constructor code

    - stateless : cannot have a constructor
    
    - dynamic : first parameter should always be type'length

7) Methods
     - code block
     - ret expression

8) Generic handler / Horizontal inheritance (old annex and union)

     - old annex : #method => expression - redirects to another object (self points to the same object)
     
     - old union   : #method => [ ... ] - resend the incoming message to the result of expression, (self and $self points to the result)
     
9) Generic dispatching
     - change signature and send back
     - change message and send back

12) Interactions

13) Operations

   - normal operator: operators invoke verb handlers 

   - primitive: if both operands are known the operation is replaced with direct code

   - branching

        a == b ? [ .. ]  ! [ .. ]

   - looping
   
       [ a > 0 ] run:[ a -= 1 ]

       [ a == 10 ] runUntil:[ a += 1 ]

       MyList~EEnumerable run &each:&&x [ 'program'Output << x ]

       MyIndexer~EIndexable set &each:&&x [ Real new::x ]

       Action dispatch method should redirect to param


   - arithmetic
   - logic
      (a == 2) and:(b == 2)
      (a == 2) and: [b == 2]

   - property operation
        loperand Prop <operator> roperand
        
   - index operation

        loperand @ index <operator> roperand


         a@2 << b
   
14) Dispatching
   - explicit
   - implicit

15) Message invoking

     obj ~ einvoker eval:message


16) Exception handling

     -  #throw obj

     - a message | onError:[]     

17) Roles

    - obj ~ role message


18) Reflection / Dynamic programmings

19) Group objects


Patterns:
 - Property implementation

   #class Indexer
   {

      #method get &Index = theIndex.

      #method set &Index:anIndex
      [
         theIndex := anIndex.
      ]
   }
    
  a) MyIndexer Index := MyIndexer Index + 1.

- Scan indexer

  anArray Indexer ~ EIterator setEach: &&index [ index clone ]
  
- Constructors

   MyInteger


   #class MyInteger : Integer
   {
      #constuctor new &type'int:anInteger
      [
          $self << anInteger.
      ]
   }

   #class Array
   {
      #constructor new &type'length:aLength
      [
      ]
                                   
      #constructor new &type'length:aLength &forEach:anAction
      [
         #var anArray := $self new &type'length:aCount.

         anArray Indexer ~ EIterator set &each:anAction.

          ^ anArray.
      ]
   }

- Operators / dispatching

     a == b  => a equal:b

     #class MyInteger
     {      	
        #method equal => %equal

        #method <= &type'int:$self
     }

- Loops

   while loop:

   - [ a += 1 ] eval &while:[ a < 10 ]

   - [ a += 1 ] while:[ a < 10 ]
   - [ a += 1 ] until:[ a < 10 ]
   
   - break implementation

- Boolean operation

   do &if &else

   do &else

   a == true