
Introduction

ELENA is a general-purpose, object-oriented, polymorphic language with late binding. 
It promotes more object-oriented program design, reusable and more standardized code. 

Namespaces

Any ELENA program or library consists of modules (files with .NL extension) containing 
classes and symbols. Every class or symbol may be referred by its namespace 
(or to put it other way around a symbol namespace is a path to the symbol module). 

All source files (files with .L extension) located in the same folder are compiled into 
the corresponding module. A project file (a file with .PRJ extension) defines the root 
namespace and the output type (stand-alone executable, VM executable or a library). 
The project may produce several modules if it contains the files located in sub folders 
(the new module namespace consists of the root one plus the folder relative path)


Messaging

As in the most of dynamic object-oriented languages the main way to interact with objects 
in ELENA is sending a message. Unlike others the message name is structured and consists 
of a verb, a signature and a parameter counter. The verb defines a message action, 
for example read or write some data. There are only limited set of possible verbs (
e.g. eval[uate], add, set, get, run, seek and so on). In general the signature is 
user defined and describes the message parameters. It can be used to define some custom 
action as well (e.g. writeLine, which in fact is eval&writeLine(1)). If the signature is 
not provided the message is considered to be generic and can be qualified (for example 
by dispatching).

If the object wants to handle the message it has to contain the method with the same name. 
If no method mapping was found the flow is considered to be broken and the control goes to 
the next alternative flow (exception handler) or the program is stopped.

The simple code to send a message looks like this:

    console write:"Hello World".

Note: "write" is a generic message; a literal constant is a parameter. 

Several messages can be send in one statement, the parameter itself may be result of 
object interactions:

    console write "2 + 2 =" write:(2 add:2).

We could use operators to have the shorter code:

    console << "2+2=" << 2 + 2.

Note: In most cases "<<" is a synonym to "write" and "+" to "add".

Several parameters can be passed in the message as well:

    control foreach: (1,2,3) &do:printingLn.

Ampersand is used to indicate that the signature has several arguments (subjects). The actual 
message name is eval&foreach&do(2).

The generic message can have several parameters as well:

    consoleEx writeLine:”a+b=”: (a + b).
