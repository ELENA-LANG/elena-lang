/* C style comments are used */
// Period (.) is the statement seperator

/*************************************************************************
 * Console:                                                              *
 *************************************************************************/
console clear.                                               // clear the console
console write: "Hello World".                                // output string in console
console writeLine: "Hello World".                            // output string in console followed by the line terminator

//************************************************************************
//* Assignment:                                                          *
//************************************************************************
#var x := 4.                                                  // new variable
x := 5.                                                       // assignment
x := Object new.                                              // allocated instance of a class

//************************************************************************
//* Constants:                                                           *
//************************************************************************
#var b := true.                                               // true constant
b := false.                                                   // false constant
b := nil.                                                     // nil object constant
x := 1.                                                       // integer constants
x := 3.14r.                                                   // float constants
x := -1.                                                      // negative constants
x := "Hello".                                                 // string constant
x := "I""m here".                                             // single quote escape
x := symbol.                                                  // symbol constants
x := (3, 2, 1).                                               // array constants
x := ("abc", 2, 2.3r).                                        // mixing of types allowed

//************************************************************************
//* Booleans:                                                            *
//************************************************************************
#var x := 1.
#var y := 2.
#var b := (x == y).                                           // equals
b := (x != y).                                                // not equals
b := (x equal &reference: y).                                 // identical
b := (x > y).                                                 // greater than
b := (x < y).                                                 // less than"
b := (x >= y).                                                // greater than or equal
b := (x <= y).                                                // less than or equal
b := b not.                                                   // boolean not
b := (x < 5) and: (y > 1).                                    // boolean and
b := (x < 5) or: (y > 1).                                     // boolean or
b := (x < 5) and: [y > 1].                                    // boolean and (short-circuit)
b := (x < 5) or: [y > 1].                                     // boolean or (short-circuit)
b := (x < 5) xor: (y > 1).                                    // test if one true and other false

//************************************************************************
//* Arithmetic expressions:                                              *
//************************************************************************
#var x.
x := 6 + 3.                                                 // addition
x := 6 - 3.                                                 // subtraction
x := 6 * 3.                                                 // multiplication
x := 5 / 3.                                                 // integer divide
x := extensions'math'modulus:5:3.                           // integer remainder
x := 5.0r / 3.0r.                                           // division with float result"
x := -5.                                                    // unary minus
x := 5 Negative.                                            // negate receiver
x := 6 * 3.1r.                                              // auto convert to float
x := extensions'math'power:5.0r:2.0r.                       // power function

//************************************************************************
//* Bitwise Manipulation:                                                *
//************************************************************************
#var b.
#var x.
x := 0FFh and: 0Fh.                                         // and bits
x := 0F0h or: 0Fh.                                          // or bits
x := 0FFh xor: 0Fh.                                         // xor bits
x := 0FFh not.                                              // invert bits
x := 0Fh shift &index: -4.                                  // left shift
x := 0F0h shift &index: 4.                                  // right shift
b := 0FFh allMask: 0Fh.                                     // test if all bits set in mask set in receiver
b := 0FFh anyMask: 0Fh.                                     // test if any bits set in mask set in receiver