Q: Could you tell me about the history of the language? why did you invent it? does it solve any problems?
A: I did it out of curiosity. I was interested in learning more about dynamic object-oriented languages. 
   It is a general purpose language, so I didn't solve any paricular type of the problems.
 
   I'm currently interested in dynamic code generation using some special type of a turning machine.
   You may look here - https://github.com/ELENA-LANG/elena-lang/wiki/ELENA-Programming-Language#working-with-dynamic-code

Q: the portability 
A: it is written in C++ & x86 assembly. The previous version (2.x) was ported to Linux x86. The migration of the current one (4.0) is still undergoing
   (mostly it is done, some work should be done with the linker part).  To support other CPU's the assembly should be ported.
   So in general the compiler could be relatively easy ported to other Linux-based platforms.
 
Q: the reliability    
A: the current version is quite stable. The language support exception handling (including critical ones).
 
Q: writability and readiability
A: The current syntax is similar to C-style grammar (though it is not 100% compatible). So it has the same advantages / disadvantages.
   In general ELENA uses LL(1) grammar. The language syntax structures can be extended using templates. E.g if, while, for - are user-defined code template patterns.
   The language does not have built-in keywords. They are user-defined as well. (As a result it could be quite easily localized).
   The language uses UTF-8 source files by default.
 
Q: abstract classes
A: yes, using abstract attribute: https://github.com/ELENA-LANG/elena-lang/blob/master/src40/system/basic.l#:L2
 
Q: interfaces 
A: using interface attribute - https://www.reddit.com/r/elena_lang/comments/c1ljg4/elena_40_interfaces/

Q: difference between an inteface and abstract 
A: The difference is similar to C#. ELENA does not support a multiply inheritance. As a result the class can have only one parent.
   To support several interfaces, the class templates are used (a class can be extended using a template).
   And the second difference is that in a class based on the interface cannot have new public methods (only existing ones can be overridden)
   (see the interface template declaration - https://github.com/ELENA-LANG/elena-lang/blob/master/src40/system/templates.l#L1)
 
Q: Is there recursion in ELENA

A: ELENA is Turing complete, multi-paradigm language - including procedural, OO and functional programming
 
Q: The parameters to function are passed by reference/ by value/ by result? - 
A: by default any parameter is passed by reference. But if the class is a constant structure, it could be considered as
   passed by value (no changes are possible). Similar to C#, a structure can stored in the stack, so boxing and unboxing (if required) are done with it before and after passing to the function.
   It is possible to use ref attribute to return several parameters from the function - http://rosettacode.org/wiki/Return_multiple_values#Elena
 
Q: GC 
A: yes, it uses generational GC (two generations)
