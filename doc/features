============================================================================
 ELENA Programming Language
============================================================================

----------------------------------------------------------------------------
 A class method invoke closure
----------------------------------------------------------------------------

import extensions;

class A
{
   Func1 onClick : event;

   constructor()
   {
      onClick := &onExit;
   }

   onExit(sender)
   {
     console.printLine("onExit was called by ", sender);
   }

   invoke(sender)
   {
      onClick(sender)
   }
}

public program()
{
   var a := new A();

   a.invoke(this self);
}

----------------------------------------------------------------------------
 A shared code
----------------------------------------------------------------------------

import extensions;

textblock Shared
{
   foo()
   {
      console.writeLine("foo")
   }
}

class A : using(Shared)
{
   bar()
   {
      console.writeLine("bar")
   }
}

public program()
{
   var a := new A();

   a.foo();
   a.bar();
}


----------------------------------------------------------------------------
 Preloaded symbols
----------------------------------------------------------------------------

    symbol startUp : preloaded = true.then(
    {  
       console.writeLine("Starting up")
    });

    public myFunction()
    {
       console.writeLine("Working");
    }

    public program()
    {
       myFunction()
    }

----------------------------------------------------------------------------
 String interpolation
----------------------------------------------------------------------------

  var s := $"a_{ 1 }_b_{ 2 }_c";

----------------------------------------------------------------------------
 user-defined literals
----------------------------------------------------------------------------

    import extensions;
    
    sealed struct OctalNumber
    {
        int value;
    
        int cast() = value;
    
        constructor(int n)
        {
            value := n;
        }
        
        cast o(string s)
        {
            value := s.toInt(8);
        }
    }

    public program()
    {
       var n := 12o;
    } 

----------------------------------------------------------------------------
 function reference
----------------------------------------------------------------------------
import extensions;

import extensions;
import system'threading;

myFunction()
{
   console.writeLine("Hello from the thread");
}

public program()
{
   auto myThread := Thread.assign(&myFunction);
}

----------------------------------------------------------------------------
 threads
----------------------------------------------------------------------------

-- Without argumnet ---

import extensions;
import system'threading;

myFunction()
{
   console.writeLine("Hello from the thread");
}

public program()
{
   auto myThread := Thread.assign(&myFunction);

   var priority := myThread.Priority;

   console.printLine("Thread priority ", priority);

   myThread.start();

   console.readChar()
}

-- With argumnet ---

import extensions;
import system'threading;

myFunction(arg)
{
   console.writeLine($"{arg} from the thread");
}

public program()
{
   auto myThread := Thread.assign(&myFunction);

   var priority := myThread.Priority;

   console.printLine("Thread priority ", priority);

   myThread.start("Good bay");

   console.readChar()
}

----------------------------------------------------------------------------
 Environment
----------------------------------------------------------------------------

import extensions;
import system'runtime;

public program()
{
   console.writeLine($"Processor type:{Environment.ProcessorType}");
   console.writeLine($"Processor count:{Environment.ProcessorCount}");
}

----------------------------------------------------------------------------
 Accessing a variable from the upper scope
----------------------------------------------------------------------------

import extensions;

public program()
{
   var variable := "Level 0";
   {
      var variable := "Level 1";

      console.printLine(super variable);
      console.printLine(variable);
   }
}

----------------------------------------------------------------------------
 Auto fields 
----------------------------------------------------------------------------

----------------------------------------------------------------------------
 Private fields 
----------------------------------------------------------------------------

----------------------------------------------------------------------------
 Module info
----------------------------------------------------------------------------

import extensions;
import extensions'runtime;

public program()
{
  var o := new MyObject();
  Console.printLine("MyObject info:", o.getFullPackageInfo());
}

----------------------------------------------------------------------------
 Async program entry
----------------------------------------------------------------------------

import system'threading;
import extensions'threading;

async public program()
{
   Task t1 := Task.run({ Console.printLineConcurrent("Enjoy") });
   Task t2 := Task.run({ Console.printLineConcurrent("Rosetta") });
   Task t3 := Task.run({ Console.printLineConcurrent("Code") });

   :await Task.whenAllArgs(t1, t2, t3);
}

----------------------------------------------------------------------------
 Evaluating a script without compilation
----------------------------------------------------------------------------

import extensions;
import extensions'scripting;
   
public program()
{
    Console.print("Evaluating:");

    var t := new ScriptEngine()
            .loadScript("[[ #grammar build ]]")
            .loadPath("~\scripts\grammar60.es")
            .loadPath("~\scripts\lscript60.es");
            
    var o := t.buildScript("import extensions; public program() { Console.printLine(""Hello "", ""World"") }");
    
    o.eval();
}

