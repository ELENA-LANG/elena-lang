============================================================================
 ELENA Programming Language
============================================================================

----------------------------------------------------------------------------
 A class method invoke closure
----------------------------------------------------------------------------

import extensions;

class A
{
   Func1 onClick : event;

   constructor()
   {
      onClick := &onExit;
   }

   onExit(sender)
   {
     console.printLine("onExit was called by ", sender);
   }

   invoke(sender)
   {
      onClick(sender)
   }
}

public program()
{
   var a := new A();

   a.invoke(this self);
}

----------------------------------------------------------------------------
 A shared code
----------------------------------------------------------------------------

import extensions;

textblock Shared
{
   foo()
   {
      console.writeLine("foo")
   }
}

class A : using(Shared)
{
   bar()
   {
      console.writeLine("bar")
   }
}

public program()
{
   var a := new A();

   a.foo();
   a.bar();
}


----------------------------------------------------------------------------
 Preloaded symbols
----------------------------------------------------------------------------

    symbol startUp : preloaded = true.then(
    {  
       console.writeLine("Starting up")
    });

    public myFunction()
    {
       console.writeLine("Working");
    }

    public program()
    {
       myFunction()
    }

----------------------------------------------------------------------------
 String interpolation
----------------------------------------------------------------------------

  var s := $"a_{ 1 }_b_{ 2 }_c";

----------------------------------------------------------------------------
 user-defined literals
----------------------------------------------------------------------------

    import extensions;
    
    sealed struct OctalNumber
    {
        int value;
    
        int cast() = value;
    
        constructor(int n)
        {
            value := n;
        }
        
        cast o(string s)
        {
            value := s.toInt(8);
        }
    }

    public program()
    {
       var n := 12o;
    } 

----------------------------------------------------------------------------
 function reference
----------------------------------------------------------------------------
import extensions;

import extensions;
import system'threading;

myFunction()
{
   console.writeLine("Hello from the thread");
}

public program()
{
   auto myThread := Thread.assign(&myFunction);
}

----------------------------------------------------------------------------
 threads
----------------------------------------------------------------------------

-- Without argumnet ---

import extensions;
import system'threading;

myFunction()
{
   console.writeLine("Hello from the thread");
}

public program()
{
   auto myThread := Thread.assign(&myFunction);

   var priority := myThread.Priority;

   console.printLine("Thread priority ", priority);

   myThread.start();

   console.readChar()
}

-- With argumnet ---

import extensions;
import system'threading;

myFunction(arg)
{
   console.writeLine($"{arg} from the thread");
}

public program()
{
   auto myThread := Thread.assign(&myFunction);

   var priority := myThread.Priority;

   console.printLine("Thread priority ", priority);

   myThread.start("Good bay");

   console.readChar()
}

----------------------------------------------------------------------------
 Environment
----------------------------------------------------------------------------

import extensions;
import system'runtime;

public program()
{
   console.writeLine($"Processor type:{Environment.ProcessorType}");
   console.writeLine($"Processor count:{Environment.ProcessorCount}");
}

----------------------------------------------------------------------------
 Accessing a variable from the upper scope
----------------------------------------------------------------------------

import extensions;

public program()
{
   var variable := "Level 0";
   {
      var variable := "Level 1";

      console.printLine(super variable);
      console.printLine(variable);
   }
}

----------------------------------------------------------------------------
 Auto fields 
----------------------------------------------------------------------------

----------------------------------------------------------------------------
 Private fields 
----------------------------------------------------------------------------

----------------------------------------------------------------------------
 Module info
----------------------------------------------------------------------------

import extensions;
import extensions'runtime;

public program()
{
  var o := new MyObject();
  Console.printLine("MyObject info:", o.getFullPackageInfo());
}

----------------------------------------------------------------------------
 Async program entry
----------------------------------------------------------------------------

import system'threading;
import extensions'threading;

async public program()
{
   Task t1 := Task.run({ Console.printLineConcurrent("Enjoy") });
   Task t2 := Task.run({ Console.printLineConcurrent("Rosetta") });
   Task t3 := Task.run({ Console.printLineConcurrent("Code") });

   :await Task.whenAllArgs(t1, t2, t3);
}

----------------------------------------------------------------------------
 Evaluating a script without compilation
----------------------------------------------------------------------------

import extensions;
import extensions'scripting;
   
public program()
{
    Console.print("Evaluating:");

    var t := new ScriptEngine()
            .loadScript("[[ #grammar build ]]")
            .loadPath("~\scripts\grammar60.es")
            .loadPath("~\scripts\lscript60.es");
            
    var o := t.buildScript("import extensions; public program() { Console.printLine(""Hello "", ""World"") }");
    
    o.eval();
}

----------------------------------------------------------------------------
 Using a callback function declared in ELENA
----------------------------------------------------------------------------

const int CTRL_C_EVENT = 0;
const int CTRL_BREAK_EVENT = 1;

extern int myFunction(uint fdwCtrlType)
{
   fdwCtrlType =>
      CTRL_C_EVENT : { Console.writeLine("Ctrl-C event"); ^ -1 }
      CTRL_BREAK_EVENT : { Console.writeLine("Ctrl-Break event"); ^ 0 };
      
   ^ 0;      
}

public program()
{
   extern KERNEL32.SetConsoleCtrlHandler(&myFunction, -1);
   
   Console.writeLine("The Control Handler is installed.");
   Console.writeLine("-- Now try pressing Ctrl+C or Ctrl+Break");
   
   while(true) {}
}

----------------------------------------------------------------------------
 Enumerations
----------------------------------------------------------------------------

public const struct Color : enum<int>(Red ::= 1,Green ::= 2,Blue ::= 3);

public program()
{
    Color color := Color.Red; 
}

----------------------------------------------------------------------------
 Type short-cuts
----------------------------------------------------------------------------

use extern KERNEL32;
use system'text'StringBuilder; 

public program()
{
   StringBuilder sb := new StringBuilder(); // allow to use the class proper name without importing the whole namespace

   pointer commandLinePtr := KERNEL32.GetCommandLineW(); // skipping extern attribute
}

----------------------------------------------------------------------------
 Providing an external library name
----------------------------------------------------------------------------

use extern libcxx : importing("libc++");

public program()
{
   libcxx.do();
}

----------------------------------------------------------------------------
 Conditional compilation
----------------------------------------------------------------------------

#if (__project["_Win32"])

class Win32A
{
}

#elif (__project["_Win64"])

class Win64A
{
}

#endif

----------------------------------------------------------------------------
 Calling extension template directly
----------------------------------------------------------------------------
extension testOp<T> : T
{
   testMe(Func<T,T> f)
      = f(self);
}

public program()
{
   var r := 3::testMe<int>((int x => x + 1));
   Console.writeLine("3+1=",r);
}

----------------------------------------------------------------------------
 Specify the lambda function returning value
----------------------------------------------------------------------------

  var f := ([real]int x => x + 1);
  o.testMe::([object]int x => x + 1);

----------------------------------------------------------------------------
 Declaring a parametrized template
----------------------------------------------------------------------------

class TemplateWithDefaults<T>(defValue)::
{
   T X := defValue;
}

MyClass : TemplateWithDefaults<int>(2)
{
}

----------------------------------------------------------------------------
 Calling property with message constant
----------------------------------------------------------------------------

singleton A { X = 2; }

public program()
{
    var o := get mssg X(A);
}

----------------------------------------------------------------------------
 Declaring a record
----------------------------------------------------------------------------

MyRecord : record(string FirstName,string LastName,int Age);

public program()
{
   MyRecord r := new MyRecord("Ivan", "Ivanov", 22);
   MyRecord r2 := new MyRecord("Ivan", "Ivanov", 22);

   Assert.ifTrue(r == r2);
}
