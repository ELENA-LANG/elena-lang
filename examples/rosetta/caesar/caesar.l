import system'routines.
import system'math.
import extensions.
import extensions'text.

// --- Constants ---

const Letters    = "abcdefghijklmnopqrstuvwxyz".
const BigLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
const TestText   = "Pack my box with five dozen liquor jugs.".
const Key = 12.

// --- Encrypt / Decript ---

class Encrypting :: Enumerator
{
    object theKey.
    object theEnumerator.
    
    constructor key:aKey text:aText
    [
        theKey := aKey.
        theEnumerator := aText enumerator.
    ]
    
    bool next => theEnumerator.
    
    reset => theEnumerator.
    
    enumerable => theEnumerator.
    
    get
    [
        var aChar := theEnumerator get.
        
        var anIndex := Letters indexOf:aChar at:0.
        
        if (-1 < anIndex)
            [
                ^ Letters[(theKey+anIndex) mod:26]
            ];
            [
                anIndex := BigLetters indexOf:aChar at:0.
                if (-1 < anIndex)
                    [
                        ^ BigLetters[(theKey+anIndex) mod:26]
                    ];
                    [
                        ^ aChar
                    ].
            ].
    ]
}

// --- Functions ---

extension encryptOp
{
    encrypt : aKey
        = Encrypting key:aKey text:self; summarize(StringWriter new). 

    decrypt :aKey
        = Encrypting key(26 - aKey) text:self; summarize(StringWriter new). 
}

// --- Program ---

public program
[
    console printLine("Original text :",TestText).
        
    var anEncryptedText := TestText encrypt:Key.

    console printLine("Encrypted text:",anEncryptedText).

    var aDecryptedText := anEncryptedText decrypt:Key.

    console printLine("Decrypted text:",aDecryptedText).

    console readChar
]