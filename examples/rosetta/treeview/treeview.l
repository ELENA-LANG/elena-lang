/// a program to produce a visual representation of some tree. 

import system'routines.
import extensions.

class Node
{
    object theValue.
    object theChildren.
    
    constructor new : value children:children
    [
        theValue := value.
                
        theChildren := children toArray.
    ]
    
    constructor new : value
        <= new:value children:nil.
        
    constructor new children:children
        <= new:emptyLiteralValue children:children.
        
    constructor new : value child:child
        <= new:value children(Array new object:child).
        
    get = theValue.
    
    children = theChildren.
}

extension treeOp
{
    writeTree : node : prefix : childrenProp
    [
        var children := node~childrenProp get.
        var length := children length.
        
        children zip(RangeEnumerator new from:1 to:length) forEach(:child:index)
        [
            self printLine(prefix,"|").
            self printLine(prefix,"+---",child get).                
            
            var nodeLine := prefix + (index==length)iif("    ","|   ").
            
            self writeTree(child,nodeLine,childrenProp).
        ].
        
        ^ self.
    ]
    
    writeTree : node : childrenProp  
        = self~treeOp writeTree(node,"",childrenProp).
}

program =
[
    var tree := Node new children:
                 (
                    Node new:"a" children:
                    (
                        Node new:"b" child:(Node new:"c"),
                        Node new:"d"
                    ),
                    Node new:"e"
                 ).
                 
    console writeTree(tree, %children); readChar.
].
