ELENA Script Engine : Creating your own script language

In this article we will see how to implement your own script language using ELENA script engine.

We will take several implementations of Bulls and Cows from Rosetta code site (Javascript, BBC Basic and Julia) and will try
to implement a grammar to run them. We will create a two versions: dynamic interpreter and a statically compiled program.

Of course we are not going to make it 100% compatible with our target languages, our goal is to demonstrate how the script engine
could be used to customize ELENA language.

Let's create a VM console client. We will use a command cycle template. First we have to create a project file (vmconsole.prj):

    [project]
    executable=vmconsole.exe
    namespace=vmconsole
    template=vm_console

    [files]
    vmconsole.l

    [forwards]
    'program=extensions'programLoop
    'program'control=vmconsole'control

Now let's create a simple feedback loop (vmconsole.l):

    control =
    {
        prompt
            = ">".
        
        proceed : command
        [
            command == "exit"
                ? [ 'program stop. ^ "leaving...". ]
                ! [ ^ command ].
        ]
    }.

For working with an ELENA script engine and a virtual machine we will need extensions'scripting'scriptEngine singleton.

We will start with predefined elena script grammar:

    #import extensions'scripting.
    
    control =
    {                                                        
        initializing
        [
            scriptEngine 
                load &path:"~\scripts\elena.es".
        ]
        
        prompt
            = ">".
        
        proceed : command
        [
            command == "exit"
                ? [ 'program stop. ^ "leaving...". ]
                ! [ scriptEngine eval:command. ^ 'newLine. ].
        ]
    }.

Now let's compile and run our program. In the console let's type:

   >system'console writeLine:"Hello"

The output will be:

   Hello
 
Now let's customize it a little bit - we will provide a grammar in the command line:

   #import extensions.
   #import extensions'scripting.
   
   // --- Control ---
   
   control =
   {
       initializing
       [
           1 till:('program'arguments length) &doEach:(:arg) 
                      [ 
                         try(scriptEngine load &path:('program'arguments@arg))
                         {
                             ! e [ console writeLine:(e message). ]
                         }
                      ].
       ]
       
       prompt
           = ">".
       
       proceed : command
       [
           if(command == "exit")
               [ 'program stop. ^ "leaving...". ];
               [
                   try(scriptEngine eval:command)
                   {
                       ! e [ console writeLine:(e message). ]
                   }.
                   
                   ^ 'newLine.
               ].
       ]
   }.


Let's start with interpreting a simple JavaScript code:
  
   print("Hello");

We should turn it into the following code using grammar rules:

   root
   (
      symbol
      (
          identifier = printing
   
          expression
          (
              reference = system'console 
              message = writeLine
              literal = "Hello World"
          )
      )
   )   

This script can be compiled as a library or be converted into a tape

The naive approach would be to implement the following grammar set:

      #define start     ::= code end;
      #define end       ::= $eof;
   
      #define code      ::= 
   <= 
   root
   (
      singleton
      (
          identifier = program
   
          method
          (
             message = eval
   
             code
             ( 
   =>
                command+
   <= 
             )
          )
      )
   )   
   =>;
   
      #define command    ::= "print" "(" print ")" ";" ;
   
      #define print      ::= 
   <= 
                expression
                (
                   reference = system'console 
                   message = writeLine
   =>
                   argument
   <=
                )
   =>;
   
      #define argument   ::= <= literal = "$literal" =>;
