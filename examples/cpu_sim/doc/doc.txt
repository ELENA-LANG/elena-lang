======  Dados tecnicos da CPU ====== 
Arquitetura: 32bits

=-= Memoria =-= 
Maximo de memoria endereçável: 4gb

=-= Memoria virtual =-= 
Cada parte do sistema é separado em blocos de memoria virtual
Cada bloco possui o tamanho de 4096 bytes.
Quando carregado os perifericos, é criado um bloco de memoria
para cada periférico.

=-= Registradores =-= 
Todos os registradores possuem tamanho de 32bits.

Intrução:
<opcode><Operando, ...>

=-= OpCodes =-=
Add   = 0h.
Adc   = 01h.
Addu  = 02h.
Sub   = 03h.
Sbc   = 04h.
Subu  = 05h.
Mul   = 06h.
Multu = 07h.
Div   = 08h.
Divu  = 09h.
Mod   = 0Ah. 
Neg   = 0Bh.
Sal   = 0Ch.
Sar   = 0Dh.
Shl   = 0Eh.
Shr   = 0Fh.
Xor   = 10h.
Bor   = 11h.
And   = 12h.
Not   = 13h.
Li    = 14h.
Lb    = 15h.
Lw    = 16h.
Sb    = 17h.
Sw    = 18h.
Br    = 19h.
Bl    = 1Ah.
Cmp   = 1Bh.
Tst   = 1Ch.
Teq   = 1Dh.
IRtn  = 1Eh.
Rtn   = 1Fh.
Sc    = 20h.
Push  = 21h.
Pop   = 22h.
Lctl  = 23h.
Sctl  = 24h.
Livt  = 25h.
Sivt  = 26h.

====== Linguagem assembly do projeto "CPU-Simulator" ====== 

Sintaxe basica:
=-= Comentarios:
    Comentarios são colocados usando o caractere ';' ( ponto e virgula )

=-= Sintaxe comum:
    <Instrução> <operador1>, <operador2>, ..., <operador N>

Registradores:
r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15

Registradores de uso geral:
*r0
*r1
*r2
*r3
*r4
*r5
*r6
*r7
*r8
*r9
*r10 

Registradores de acesso da CPU:
*r11 ( LR )     === Link register
*r12 ( FLAGS )  === Flags
*r13 ( BP )     === Base Pointer
*r14 ( SP )     === Stack Pointer
*r15 ( PC )     === Program Counter

Tipos de endereçamento:
%r<N> === Acesso direto ao registrador
@r<N> === Acesso indireto ao registrador

Instruções:
=-=-= Addi =-=-=
  Soma o valor de um registrador com um imediato.
  O resltado tem como destino o primeiro registrador 
  informado na instrução.
  
  :Flags afetadas:
  * Carry
  * Overflow
  * Sign
  
  :Exemplo:
  ; Soma o valor do registrador %r1 com 0x10
  li %r1, 0xA
  addi %r0, %r1, 0x10

=-=-= Add =-=-=
  Soma o valor de 2 registradores e coloca o resultado no primeiro
  registrador informado na operação.
  
  :Flags afetadas:
  * Carry
  * Overflow
  * Sign
   
  :Exemplo:
  li %r1, 0xA
  li %r2, 0xB
  add %r3, %r1, %r2
  
=-=-= Subi =-=-=
  Subtrai o valor de um registrador com um imediato.
  O resltado tem como destino o primeiro registrador 
  informado na instrução.
  
  :Flags afetadas:
  * Carry
  * Overflow
  * Sign
  
  :Exemplo:
  ; subtrai o valor do registrador %r1 com 0x10
  li %r1, 0xA
  subi %r0, %r1, 0x10

=-=-= Sub =-=-=
  Subtrai o valor de 2 registradores e coloca o resultado no primeiro
  registrador informado na operação.
  
  :Flags afetadas:
  * Carry
  * Overflow
  * Sign
   
  :Exemplo:
  li %r1, 0xA
  li %r2, 0xB
  sub %r3, %r1, %r2
  
=-=-= li =-=-=
  Carrega um imediato para um registrador
  
  :Exemplo:
  li %r1, 0xFFFF

=-=-= Mul =-=-=
  Multiplica 2 valores guardados em registradores
  Resultado colocado no primeiro registrador informado na operação
  
  :Flags afetadas:
  * Carry
  * Overflow
  * Sign
  
  :Exemplo:
  li %r1, 0xA
  li %r2, 0xA
  mul %r3, %r1, %r2
  
=-=-= Div =-=-=
  Divide 2 valores guardados em registradores
  Resultado colocado no primeiro registrador informado na operação
  
  :Flags afetadas:
  * Carry
  * Overflow
  * Sign
  
  :Exemplo:
  li %r1, 0x28 ; valor 40
  li %r2, 0x02
  div %r3, %r1, %r2
  
=-=-= Or =-=-=
  Realiza a operação logica OR com 2 valores guardados em registradores
  Resultado colocado no primeiro registrador informado na operação
  
  :Exemplo:
  li %r1, 0x28 ; valor 40
  li %r2, 0x02
  or %r3, %r1, %r2
  
=-=-= BR =-=-=
  Branch Range
  Faz um jump, para algum ponto especifico do programa.
  
  Condições de JUMP:
  "br"  -- Jump incondicional
  "bs"  -- Sign FLAG == 1
  "bv"  -- Overflow FLAG == 1
  "bc"  -- Carry flag == 1
  "bz"  -- Zero flag == 1
  "be"  -- Equal flag == 1
  "bne" -- Not equal FLAG == 1
  "blt" -- LessThanOrEqual
  "bgt" -- GreaterThan
  "ble" -- LessThanOrEqual
  "bge" -- GreaterThanOrEqual
  
  :Exemplo:
  main:
    li %r5, 0xA
  .loop:
    subi %r5, %r5, 0x5
    cmpi %r5, 0x0
    bne .loop
    ; Saiu do LOOP
    rtn   
    
=-=-= BL =-=-=
  Branch Link
  Faz um jump, para algum ponto especifico do programa mantendo 
  uma "conexão" com o ponto do qual foi feito o jump, para poder
  retornar.
  
  Condições de JUMP:
  "bl"  -- Jump incondicional
  "bls"  -- Sign FLAG == 1
  "blv"  -- Overflow FLAG == 1
  "blc"  -- Carry flag == 1
  "blz"  -- Zero flag == 1
  "ble"  -- Equal flag == 1
  "blne" -- Not equal FLAG == 1
  "bllt" -- LessThanOrEqual
  "blgt" -- GreaterThan
  "blle" -- LessThanOrEqual
  "blge" -- GreaterThanOrEqual
  
  :Exemplo:
  main:
    ; ...
    bl funcao
    rtn
  
  funcao:
    push %r3, %r4, %r5, %r6
    mov %r3, %r0
    ; ...
    pop %r3, %r4, %r5, %r6
    rtn
    
=-=-= LB =-=-=
  Load Byte
  Carrega um BYTE de algum ponto da memoria, colocando o BYTE lido 
  no primeiro registrador informado
  
  :exemplo:
  lb %r4, @r3
  ;
  lb %r4, 0xFF

=-=-= LW =-=-=
  Load Byte
  Carrega um WORD de algum ponto da memoria, colocando o WORD lido 
  no primeiro registrador informado
  
  :exemplo:
  lw %r4, @r3
  ;
  lw %r4, 0xFF
  
=-=-= SB =-=-=
  Store Byte
  Guarda um BYTE de em algum ponto da memoria
  
  :exemplo:
  sb %r4, @r3
  ;
  sb %r4, 0xFF
  

=-=-= SW =-=-=
  Store Word
  Guarda um Word de em algum ponto da memoria
  
  :exemplo:
  sw %r4, @r3
  ;
  sw %r4, 0xFF
  
=-=-= Cmp =-=-=
  Compara 2 informações passadas por registradores
  E altera as flags, conforme sua diferença, ou igualdade.
  
  :Flags afetadas:
  * Carry
  * Overflow
  * Sign
   
  :Exemplo:
  li %r4, 0xA
  li %r3, 0xE
  cmp %r3, %r4
  
=-=-= Cmpi =-=-=
  Compara um imediato com os dados de um registradores
  E altera as flags, conforme sua diferença, ou igualdade.
  
  :Flags afetadas:
  * Carry
  * Overflow
  * Sign
   
  :Exemplo:
  li %r3, 0xA
  cmpi %r3, 0xA
  
=-=-= Push =-=-=
  Adiciona na pilha o espaço para o numero de registradores informados
  
  :Exemplo:
  push %r3, %r4, %r5, %r6, ..., %r14
  
=-=-= Pop =-=-=
  Retira da pilha o espaço para o numero de registradores informados
  
  :Exemplo:
  pop %r3, %r4, %r5, %r6, ..., %r14    
  
=-=-= Sli =-=-=
  Shift left - Imediato
  Faz o deslocamento de bits, para a esquerda, com base no imediato informado.
  
  :exemplo:
  li %r0, 0xA
  sli %r1, %r0, 2 ; faz o deslocamento em 2 bits para a esquerda
  
=-=-= Sri =-=-=
  Shift right - Imediato
  Faz o deslocamento de bits, para a direita, com base no imediato informado.
  
  :exemplo:
  li %r0, 0xA
  sri %r1, %r0, 2 ; faz o deslocamento em 2 bits para a direita