[#general#]
#name=system'routines
#shortdescr=Provides classes that describe the basic patterns

[#list#]
arrayOp
BasePattern
enumerableOp
Filter
ifOrdered
indexableOp
literalOp
Selector
stringOp
Summing
TopFilter
wideOp

[arrayOp]
#title=Extension arrayOp
#shortdescr=An array extension
#protocol=array
#method=deepClone,,array;Returns the array deep clone
#method=exchange,&index:int&index:int;Exchanges the array items with specified indexes
#method=reallocate,&length:int,array;Reallocates the array
#method=set,&every:nfunc;Executes a function for every array item and sets the result accordingly
#method=sort,func2;Sorts the array with a help of a provided function<br/>Executes a function for every ordered pair and exchange them if the function result is false

[enumerableOp]
#title=Extension enumerableOp
#shortdescr=An enumerable extension
#protocol=enumerable
#method=array,,array;Converts the enumeration into an array
#method=filter,&each:function,enumerator;Returns a filter enumerator
#method=find,object;Returns the enumeration member equals to a provided one
#method=first,,object;Returns the first enumeration member
#method=last,,object;Returns the last enumeration member
#method=run,&each:function;Executes a function for each enumeration member
#method=seek,&each:function;Executes a function for each enumeration member until the function returns true and returns it<br/>Otherwise returns system'nil.
#method=select,&each:function,enumerator;Returns a select enumerator
#method=top,int,enumerator;Returns the top enumerator

[literalOp]
#title=Extension literalOp
#shortdescr=A literal extension
#protocol=literal
#method=endingWith,&literal:literal,bool;Returns true if the object ends with a provided literal
#method=indexOf,&char:char,int;Returns the index of the first occurence of the specified symbol.<br/>If the substring is not found. returns -1
#method=indexOf,&literal:literal,int;Returns the index of the first occurence of the specified symbol.<br/>If the substring is not found. returns -1
#method=is,&empty,,bool;Returns true if the literal is empty (a length is equal to 0)
#method=lowerCase,,literal;Returns a copy of this literal converted to lowercase.
#method=padLeft,&char:char&length:int,literal;Returns a new literal that right-aligns the characters in this instance by padding them on the left with a specified character
#method=padRight,&char:char&length:int,literal;Returns a new literal that left-aligns the characters in this instance by padding them on the right with a specified character
#method=replace,&literal:literal&literal:literal,literal;Replaces all occurences of the provided literal with a second one
#method=replaceFirst,&literal:literal&literal:literal,literal;Replaces the first occurence of the provided literal with a second one
#method=split,&by:object,array;Returns an array of literals that contains the substrings that are delimited by a provided splitter
#method=split,&char:char,array;Returns an array of literals that contains the substrings that are delimited by a provided character
#method=split,&literal:literal,array;Returns an array of literals that contains the substrings that are delimited by a provided literal
#method=startingWith,&literal:literal,bool;Returns true if the object starts with a provided literal
#method=Substring,&index:int,literal;Returns the substring
#method=trim,,literal;Removes all leading and trailing spaces
#method=trim,&char:char,literal;Removes all leading and trailing occurrences of a character
#method=trimLeft,,literal;Removes all leading spaces
#method=trimLeft,&char:char,literal;Removes all leading occurrences of a character
#method=trimRight,,literal;Removes all trailing spaces
#method=trimRight,&char:char,literal;Removes all trailing occurrences of a character
#method=upperCase,,literal;Returns a copy of this literal converted to uppercase.

[indexableOp]
#title=Extension indexableOp
#shortdescr=An indexable extension
#protocol=indexable
#method=array,,array;Converts the indexable into an array
#method=exchange,int&:int;Exchanges the items with specified indexes
#method=exchange,&index:int&index:int;Exchanges the items with specified indexes
#method=set,&every:nfunc;Executes a function for every item and sets the result accordingly
#method=Substring,&index:int&length:int,array;Returns the subarray
#method=sort,func2;Sorts the indexable with a help of a provided function<br/>Executes a function for every ordered pair and exchange them if the function result is false

[indexableOp]
#title=Extension stringOp
#shortdescr=A string extension
#protocol=text
#method=write,literal&length:int;Appends a specified literal int times
#method=write,literal&padding:int&with:char;Appends an aligned literal
#method=write,literal&paddingLeft:int&with:char;Appends a right aligned literal
#method=write,literal&paddingRight:int&with:char;Appends a left aligned literal

[ifOrdered]
#title=symbol ifOrdered
#shortdescr=A function of two variables that returns true if parameters are ordered by magnitude
#protocol=func2

[TopFilter]
#title=Class TopFilter
#shortdescr=A first several members enumerator
#protocol=enumerator
#parent=system.html#Object:system'Object
#parent=system.html#Enumerator:system'Enumerator
#constructor=new,&length:int&enumerator:enumerator;Creates an enumerator that returns the first int enumerator members
#method=get,,object;Returns the current list item
#method=enumerator,,enumerator;Returns itself
#method=next,,bool;Goes to the next list item and returns true if it is not the last member
#method=reset,,;Resets the enumerator

[Filter]
#title=Class Filter
#shortdescr=A filtered enumerator
#protocol=enumerator
#parent=system.html#Object:system'Object
#parent=system.html#Enumerator:system'Enumerator
#constructor=new,&each:function&enumerator:enumerator;Creates an enumerator that filters the provided one
#method=get,,object;Returns the current list item
#method=enumerator,,enumerator;Returns itself
#method=next,,bool;Goes to the next list item and returns true if it is not the last member
#method=reset,,;Resets the enumerator

[Selector]
#title=Class Selector
#shortdescr=A selecting enumerator
#protocol=enumerator
#parent=system.html#Object:system'Object
#parent=system.html#Enumerator:system'Enumerator
#constructor=new,&each:function&enumerator:enumerator;Creates an enumerator that selects the result of the provided one
#method=get,,object;Returns the current list item
#method=enumerator,,enumerator;Returns itself
#method=next,,bool;Goes to the next list item and returns true if it is not the last member
#method=reset,,;Resets the enumerator

[BasePattern]
#title=Class Selector
#shortdescr=A selecting enumerator
#field=theResult;The pattern result
#parent=system.html#Object:system'Object
#parent=system.html#BaseFunction1:system'BaseFunction1
#method=run,&enumerator:enumerator,object;Executes the pattern for a specified enumerator and returns the result

[Summing]
#title=Class Summing
#shortdescr=A summing pattern
#field=theResult;The pattern result
#parent=system.html#Object:system'Object
#parent=system.html#BaseFunction1:system'BaseFunction1
#parent=system_routines.html#BasePattern:system'routines'BasePattern
#constructor=new,variable;Creates a pattern and assigned the provided variable to the pattern result field
#method=eval,object;Appends the parameter to the result varialble

[wideOp]
#title=Extension wideOp
#shortdescr=A wide literal extension
#protocol=wide
#method=endingWith,&wide:wide,bool;Returns true if the object ends with a provided literal
#method=indexOf,&char:char,int;Returns the index of the first occurence of the specified symbol.<br/>If the substring is not found. returns -1
#method=indexOf,&wide:wide,int;Returns the index of the first occurence of the specified symbol.<br/>If the substring is not found. returns -1
#method=is,&empty,,bool;Returns true if the literal is empty (a length is equal to 0)
#method=lowerCase,,wide;Returns a copy of this literal converted to lowercase.
#method=padLeft,&char:char&length:int,wide;Returns a new literal that right-aligns the characters in this instance by padding them on the left with a specified character
#method=padRight,&char:char&length:int,wide;Returns a new literal that left-aligns the characters in this instance by padding them on the right with a specified character
#method=replace,&wide:wide&wide:wide,wide;Replaces all occurences of the provided literal with a second one
#method=replaceFirst,&wide:wide&wide:wide,wide;Replaces the first occurence of the provided literal with a second one
#method=split,&by:object,array;Returns an array of literals that contains the substrings that are delimited by a provided splitter
#method=split,&char:char,array;Returns an array of literals that contains the substrings that are delimited by a provided character
#method=split,&literal:literal,array;Returns an array of literals that contains the substrings that are delimited by a provided literal
#method=startingWith,&wide:wide,bool;Returns true if the object starts with a provided literal
#method=Substring,&index:int,wide;Returns the substring
#method=trim,,wide;Removes all leading and trailing spaces
#method=trim,&char:char,wide;Removes all leading and trailing occurrences of a character
#method=trimLeft,,wide;Removes all leading spaces
#method=trimLeft,&char:char,wide;Removes all leading occurrences of a character
#method=trimRight,,wide;Removes all trailing spaces
#method=trimRight,&char:char,wide;Removes all trailing occurrences of a character
#method=upperCase,,wide;Returns a copy of this literal converted to uppercase.
