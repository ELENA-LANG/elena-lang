[#general#]
#name=system
#shortdescr=Contains the basic functionality

[#list#]
BaseValue
BaseNumber
BreakException
control
EAction
EFunction
false
IntBaseNumber
IntNumber
LongNumber
nil
Object
RealNumber
true

[Object]
#title=Class Object
#shortdescr=A common ancestor
#protocol=object
#method=equal,object,bool;Returns true if the specified object is equal to the current object; otherwise, false.<br/>By default compares the object references.
#method=equal,&type'object:type_object,bool;Returns true if the specified object instances are equal; otherwise, false.
#method=notequal,object,bool;Returns false if the specified object is equal to the current object; otherwise, true.<br/>By default compares the object references.

[nil]
#title=Symbol nil
#shortdescr=A nil value symbol
#protocol=object
#method=equal,object,bool;Returns true if the specified object is nil; otherwise, false.

[true]
#title=Symbol true
#shortdescr=A true value symbol
#protocol=object
#protocol=bool
#method=and,object,bool;Executes logical AND operation
#method=and,&action:bool_action,bool;Executes logical AND operation with a boolean expression
#method=and,&bool:bool,bool;Executes logical AND operation with a boolean value
#method=and,&type'int:type_int,bool;Executes logical AND operation with an integer value
#method=else,action;Always returns nil.
#method=equal,object,bool;Determines whether the specified object is equal to the current object boolean value / expression.
#method=equal,&action:bool_action,bool;Determines whether the specified object is equal to the current object boolean expression.
#method=equal,&bool:bool,bool;Determines whether the specified object is equal to the current object boolean value.
#method=not,,bool;Always returns false.
#method=Literal,,type_widestr;Returns literal representation.
#method=or,object,bool;Executes logical OR operation<br/>Always return true
#method=then,action;Executes the action;
#method=then,action&else:action;Executes then-action;
#method=xor,object,bool;Executes logical XOR operation
#method=xor,&action:bool_action,bool;Executes logical XOR operation with a boolean expression
#method=xor,&bool:bool,bool;Executes logical XOR operation with a boolean value

[false]
#title=Symbol false
#shortdescr=A false value symbol
#protocol=object
#protocol=bool
#method=and,object,bool;Executes logical AND operation<br/>Always return false
#method=and,&action:bool_action,bool;Executes logical AND operation with a boolean expression
#method=else,action;Executes the action;
#method=equal,object,bool;Determines whether the specified object is equal to the current object boolean value / expression.
#method=equal,&action:bool_action,bool;Determines whether the specified object is equal to the current object boolean expression.
#method=equal,&bool:bool,bool;Determines whether the specified object is equal to the current object boolean value.
#method=Literal,,type_widestr;Returns literal representation.
#method=not,,bool;Always returns false.
#method=or,object,bool;Executes logical OR operation
#method=or,&action:bool_action,bool;Executes logical OR operation with a boolean expression
#method=then,action;Always returns nil.
#method=then,action&else:action;Executes else-action;
#method=xor,object,bool;Executes logical XOR operation
#method=xor,&action:bool_action,bool;Executes logical XOR operation with a boolean expression
#method=xor,&bool:bool,bool;Executes logical XOR operation with a boolean value

[BreakException]
#title=Class BreakException
#shortdescr=A break exception
#parent=system.html#Object:system'Object
#field=theResult
#method=stop,,;Returns the result

[EAction]
#title=Class EAction
#shortdescr=An action role
#parent=system.html#Object:system'Object
#protocol=action
#method=run,&if:bool;Executes the action while the parameter is true
#method=run,&until:bool;Executes the action while the parameter is false

[EFunction]
#title=Class EFunction
#shortdescr=A function role
#parent=system.html#Object:system'Object
#protocol=function
#method=reverse,&for:numeric_variable&from:numeric_value&till:numeric_value&by:numeric_value,;Iterates the code for the specified range [till,from) in the reverse order
#method=reverse,&for:numeric_variable&from:numeric_value&to:numeric_value&by:numeric_value,;Iterates the code for the specified range [to,from] in the reverse order
#method=run,&each:enumerator,object;Executes the function code for every enumeration value
#method=run,&each:enumerator&where:bool_function,object;Executes the function code for every enumeration value satisfying the condition
#method=run,&for:numeric_variable&from:numeric_value&till:numeric_value&by:numeric_value,;Iterates the code for the specified range [from,till)
#method=run,&for:numeric_variable&from:numeric_value&to:numeric_value&by:numeric_value,;Iterates the code for the specified range [from,to]

[control]
#title=Symbol control
#shortdescr=A control helper symbol
#method=do,action;Executes the action
#method=do,action&until:bool_action;Executes the action until the condition is met
#method=for,numeric_variable&from:numeric_value&backTo:numeric_value&by:numeric_value&do:function,;Iterates the function for the specified range [from,to] in the reverse order
#method=for,numeric_variable&from:numeric_value&to:numeric_value&by:numeric_value&do:function,;Iterates the function for the specified range [from,to]
#method=from,numeric_value&backTo:numeric_value&do:function,;Iterates the function for the specified range [from,to] in the reverse order with step equals to 1.
#method=from,numeric_value&till:numeric_value&do:function,;Iterates the function for the specified range [from,till) with step equals to 1.
#method=from,numeric_value&to:numeric_value&do:function,;Iterates the function for the specified range [from,to] with step equals to 1.
#method=foreach,enumerable&do:function;Executes the function for each collection member
#method=foreach,enumerable&until:bool_function,;Enumerates the collection until the member meet the condition and return it; otherwise, return nil.
#method=while,bool_action;Evaluates the boolean expression while it is true
#method=while,bool_action&do:action;Evaluates action while the boolean expression is true

[BaseValue]
#title=Class BaseValue
#shortdescr=A base value class
#protocol=value
#parent=system.html#Object:system'Object
#method=equal,value,bool;Compares the values
#method=greater,value,bool;Compares the values
#method=less,value,bool;Compares the values
#method=notequal,value,bool;Compares the values
#method=notgreater,value,bool;Compares the values
#method=notless,value,bool;Compares the values

[BaseNumber]
#title=Class BaseNumber
#shortdescr=A base numeric value class
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#method=add,numeric_value,numeric_value;Adds the values
#method=divide,numeric_value,numeric_value;Divuides the values
#method=multiply,numeric_value,numeric_value;Divides the values
#method=subtract,numeric_value,numeric_value;Subtracts the values

[IntBaseNumber]
#title=Class IntBaseNumber
#shortdescr=A base integer value class
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#method=allMask,numeric_value,bool;Returns true if all the mask bits are set
#method=and,numeric_value,numeric_value;Execute bitwise AND operation
#method=anyMask,numeric_value,bool;Returns true if any of the mask bits are set
#method=or,numeric_value,numeric_value;Execute bitwise OR operation
#method=xor,numeric_value,numeric_value;Execute bitwise XOR operation

[IntNumber]
#title=Class IntNumber
#shortdescr=An integer value class
#protocol=numeric_value
#protocol=type_int
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseNumber:system'BaseIntNumber
#constructor=new,,type_int;Creates the object with zero value
#constructor=new,&type'int:type_int,type_int;Creates the object with specified value
#method=add,&type'int:type_int,type_int;Returns the sum of integers
#method=add,&type'long:type_long,type_long;Returns the sum of integers
#method=add,&type'real:type_real,type_real;Returns the sum
#method=and,&type'int:type_int,type_int;Returns the result of bitwise AND operation
#method=divide,&type'int:type_int,type_int;Returns the result of integer division
#method=divide,&type'long:type_long,type_long;Returns the result of integer division
#method=divide,&type'real:type_real,type_real;Returns the result of division
#method=equal,&type'int:type_int,bool;Compares the integer value
#method=equal,&type'long:type_long,bool;Compares the integer value
#method=less,&type'int:type_int,bool;Compares the integer value
#method=less,&type'long:type_long,bool;Compares the integer value
#method=Literal,,type_widestr;Returns the literal presentation
#method=multiply,&type'int:type_int,type_int;Returns the product of integers
#method=multiply,&type'long:type_long,type_long;Returns the product of integers
#method=multiply,&type'real:type_real,type_real;Returns the product
#method=not,,type_int;Bitwise inversion
#method=notless,&type'int:type_int,bool;Compares the integer value
#method=Negative,,type_int;Negates the value
#method=or,&type'int:type_int,type_int;Returns the result of bitwise OR operation
#method=shift,type_int,type_int;Bitwide shift operation
#method=subtract,&type'int:type_int,type_int;Returns the difference of integers
#method=subtract,&type'long:type_long,type_long;Returns the difference of integers
#method=subtract,&type'real:type_real,type_real;Returns the difference
#method=type'index,,type_int;Returns itself
#method=type'int,,type_int;Returns itself
#method=xor,&type'int:type_int,type_int;Returns the result of bitwise XOR operation

[LongNumber]
#title=Class LongNumber
#shortdescr=A long integer value class
#protocol=numeric_value
#protocol=type_long
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseNumber:system'BaseIntNumber
#constructor=new,,type_long;Creates the object with zero value
#constructor=new,&type'int:type_int,type_long;Creates the object with specified value
#constructor=new,&type'long:type_long,type_long;Creates the object with specified value
#method=add,&type'int:type_int,type_long;Returns the sum of integers
#method=add,&type'long:type_long,type_long;Returns the sum of integers
#method=add,&type'real:type_real,type_real;Returns the sum
#method=and,&type'long:type_long,type_long;Returns the result of bitwise AND operation
#method=divide,&type'int:type_int,type_long;Returns the result of integer division
#method=divide,&type'long:type_long,type_long;Returns the result of integer division
#method=divide,&type'real:type_real,type_real;Returns the result of division
#method=equal,&type'int:type_int,bool;Compares the integer value
#method=equal,&type'long:type_long,bool;Compares the integer value
#method=less,&type'int:type_int,bool;Compares the integer value
#method=less,&type'long:type_long,bool;Compares the integer value
#method=Literal,,type_widestr;Returns the literal presentation
#method=multiply,&type'int:type_int,type_long;Returns the product of integers
#method=multiply,&type'long:type_long,type_long;Returns the product of integers
#method=multiply,&type'real:type_real,type_real;Returns the product
#method=Negative,,type_long;Negates the value
#method=not,,type_long;Bitwise inversion
#method=notless,&type'long:type_int,bool;Compares the integer value
#method=or,&type'long:type_long,type_long;Returns the result of bitwise OR operation
#method=shift,type_int,type_long;Bitwide shift operation
#method=subtract,&type'int:type_int,type_long;Returns the difference of integers
#method=subtract,&type'long:type_long,type_long;Returns the difference of integers
#method=subtract,&type'real:type_real,type_real;Returns the difference
#method=type'long,,type_long;Returns itself
#method=xor,&type'long:type_long,type_long;Returns the result of bitwise XOR operation

[RealNumber]
#title=Class RealNumber
#shortdescr=A float numeric value class
#protocol=numeric_value
#protocol=type_real
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseNumber:system'BaseIntNumber
#constructor=new,,type_real;Creates the object with zero value
#constructor=new,&type'int:type_int,type_real;Creates the object with specified value
#constructor=new,&type'long:type_long,type_real;Creates the object with specified value
#constructor=new,&type'real:type_real,type_real;Creates the object with specified value
#method=add,&type'int:type_int,type_real;Returns the sum of numbers
#method=add,&type'real:type_real,type_real;Returns the sum of numbers
#method=divide,&type'int:type_int,type_real;Returns the result of the division
#method=divide,&type'real:type_real,type_real;Returns the result of division
#method=equal,&type'real:type_real,bool;Compares the integer value
#method=less,&type'real:type_real,bool;Compares the integer value
#method=Literal,,type_widestr;Returns the literal presentation
#method=notless,&type'real:type_real,bool;Compares the integer value
#method=multiply,&type'int:type_int,type_real;Returns the product of numbers
#method=multiply,&type'real:type_real,type_real;Returns the product
#method=subtract,&type'int:type_int,type_real;Returns the difference of integers
#method=subtract,&type'real:type_real,type_real;Returns the difference
#method=type'real,,type_real;Returns itself
