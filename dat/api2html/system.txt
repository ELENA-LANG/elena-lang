[#general#]
#name=system
#shortdescr=Contains the basic functionality

[#list#]
actionOp
Array
ArrayIterator
BaseValue
BaseNumber
Boolean
BreakException
CharValue
console
control
emptyLiteralValue
Exception
false
FormatException
functionOp
Integer
IntBaseNumber
intConvertor
IntNumber
InvalidArgumentException
literalConvertor
LiteralIterator
LiteralValue
Long
longConvertor
LongNumber
nil
Object
OutOfRangeException
Real
realConvertor
RealNumber
String
true
Variable
Variant

[console]
#title=Symbol console
#shortdescr=A console
#method=readChar,,char;	Reads the next character from the standard input stream.
#method=write,literal;Writes the specified literal value to the standard output stream.
#method=writeLine,literal;Writes the specified literal value, followed by the current line terminator, to the standard output stream.
#method=readLine,,literal;Reads the next line of characters from the standard input stream.

[Object]
#title=Class Object
#shortdescr=A common ancestor
#method=equal,object,bool;Returns true if the specified object is equal to the current object; otherwise, false.<br/>By default compares the object references.
#method=equal,&object:object,bool;Returns true if the specified object instances are equal; otherwise, false.
#method=notequal,object,bool;Returns false if the specified object is equal to the current object; otherwise, true.<br/>By default compares the object references.

[nil]
#title=Symbol nil
#shortdescr=A nil value symbol

[LiteralValue]
#title=Class LiteralValue
#shortdescr=A wide literal value
#protocol=enumerable
#protocol=literal
#protocol=value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#constructor=new,&length:int,literal;Creates the literal string with specified length
#constructor=new,&length:int&literal:literal,literal;Creates the literal string with specified length and copies the parameter value
#constructor=new,&length:int&char:value,literal;Creates the literal string with specified length fills with spciefied character value
#constructor=new,&literal:literal,literal;Creates the literal string copy
#method=add,object,literal;Concatinates the values
#method=add,&char:value,literal;Concatinates the values
#method=add,&literal:literal,literal;Concatinates the values
#method=delete,&index:int&length:int,literal;Deletes the substring from the object and returns the new one
#method=enumerator,,enumerator;Returns the object enumerator
#method=equal,&char:value,bool;Compares the values
#method=equal,&literal:literal,bool;Compares the values
#method=getAt,object,value;Returns the character with specified index
#method=getAt,&index:int&out'short:short;Copies the character value to the stack allocated variable
#method=indexOf,&index:int&literal:literal,int;Returns the index of the first occurence of the specified substring.<br/>If the substring is not found. returns -1
#method=indexOf,&index:int&literal:literal&out'int:int;Copies the index of the first occurence of the specified substring to the stack allocated variable.<br/>If the substring is not found. returns -1
#method=indexOf,&index:int&char:value,int;Returns the index of the first occurence of the specified symbol.<br/>If the substring is not found. returns -1
#method=insert,&index:int&literal:literal,literal;Inserts the substring into and returns the new one
#method=length,,int;Returns the string length
#method=literal,,literal;Returns itself
#method=less,&literal:literal,bool;Compares the values
#method=less,&char:value,bool;Compares the values
#method=notless,&literal:literal,bool;Compares the values
#method=Substring,&index:int&length:int,literal;Returns the substring

[IntNumber]
#title=Class IntNumber
#shortdescr=An integer value class
#protocol=numeric_value
#protocol=int
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#constructor=new,,int;Creates the object with zero value
#constructor=new,&int:int,int;Creates the object with specified value
#method=add,&int:int,int;Returns the sum of integers
#method=add,&long:long,long;Returns the sum of integers
#method=add,&real:real,real;Returns the sum
#method=and,&int:int,int;Returns the result of bitwise AND operation
#method=divide,&int:int,int;Returns the result of integer division
#method=divide,&long:long,long;Returns the result of integer division
#method=divide,&real:real,real;Returns the result of division
#method=equal,&int:int,bool;Compares the integer value
#method=equal,&long:long,bool;Compares the integer value
#method=index,,int;Returns itself
#method=int,,int;Returns itself
#method=less,&int:int,bool;Compares the integer value
#method=less,&long:long,bool;Compares the integer value
#method=literal,,literal;Returns the literal presentation
#method=multiply,&int:int,int;Returns the product of integers
#method=multiply,&long:long,long;Returns the product of integers
#method=multiply,&real:real,real;Returns the product
#method=negative,,int;Negates the value
#method=not,,int;Bitwise inversion
#method=notless,&int:int,bool;Compares the integer value
#method=or,&int:int,int;Returns the result of bitwise OR operation
#method=shift,int,int;Bitwise shift operation
#method=subtract,&int:int,int;Returns the difference of integers
#method=subtract,&long:long,long;Returns the difference of integers
#method=subtract,&real:real,real;Returns the difference
#method=xor,&int:int,int;Returns the result of bitwise XOR operation

[CharValue]
#title=Class CharValue
#shortdescr=A character symbol
#protocol=value                                                                             
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#constructor=new,,char;Creates the object with zero value
#constructor=new,object,char;Creates the object with specified value
#constructor=new,&char:char,char;Creates the object with specified numeric value
#constructor=new,&int:int,char;Creates the object with specified numeric value
#constructor=new,&short:short,char;Creates the object with specified numeric value
#method=char,,value;Returns itself
#method=equal,&char:value,bool;Compares the value with value
#method=equal,&int:int,bool;Compares the value with numeric value
#method=equal,&literal:literal,bool;Compares the value with value
#method=int,,int;Returns the numeric value
#method=less,&int:int,bool;Compares the value with numeric value
#method=less,&char:value,bool;Compares the value with value
#method=literal,,literal;Returns the literal value
#method=notless,&int:int,bool;Compares the value with numeric value
#method=notless,&widechar:value,bool;Compares the value with value

[control]
#title=Symbol control
#shortdescr=A control helper symbol
#method=do,action;Executes the action
#method=do,action&until:bool_expr;Executes the action until the condition is met
#method=for,variable&from:value&backTo:value&by:value&do:function;Executes the function for every value in the specified range in the reverse order
#method=for,variable&from:value&to:value&by:value&do:function;Executes the function for every value in the specified range
#method=foreach,enumerable&do:function;Executes the function for every member of the enumerable object
#method=foreach,enumerable&until:bool_function;Executes the function until the condition is true
#method=from,value&till:value&do:function;Executes the function for every value in the specified range
#method=from,value&to:value&do:function;Executes the function for every value in the specified range
#method=while,bool_expr;Checks the condition until it is true
#method=while,bool_expr&do:action;Executes the action while the condition is true

[actionOp]
#title=Class actionOp
#shortdescr=An action role
#parent=system.html#Object:system'Object
#protocol=action
#method=run,&if:bool_expr;Executes the action while the parameter is true
#method=run,&until:bool_expr;Executes the action while the parameter is false

[true]
#title=Symbol true
#shortdescr=A true value symbol
#protocol=bool
#method=and,object,bool;Executes logical AND operation
#method=and,&action:bool_action,bool;Executes logical AND operation with a boolean expression
#method=and,&bool:bool,bool;Executes logical AND operation with a boolean value
#method=and,&int:int,bool;Executes logical AND operation with an integer value
#method=bool,,bool;Returns itself.
#method=else,action;Always returns nil.
#method=equal,object,bool;Determines whether the specified object is equal to the current object boolean value / expression.
#method=equal,&action:bool_action,bool;Determines whether the specified object is equal to the current boolean expression.
#method=equal,&bool:bool,bool;Determines whether the specified object is equal to the current object boolean value.
#method=int,,int;Returns numeric value.
#method=literal,,literal;Returns literal representation.
#method=not,,bool;Always returns false.
#method=or,object,bool;Executes logical OR operation<br/>Always return true
#method=then,action;Executes the action;
#method=then,action&else:action;Executes then-action;
#method=xor,object,bool;Executes logical XOR operation
#method=xor,&action:bool_action,bool;Executes logical XOR operation with a boolean expression
#method=xor,&bool:bool,bool;Executes logical XOR operation with a boolean value

[false]
#title=Symbol false
#shortdescr=A false value symbol
#protocol=bool
#method=and,object,bool;Executes logical AND operation<br/>Always return false
#method=and,&action:bool_action,bool;Executes logical AND operation with a boolean expression
#method=bool,,bool;Returns itself.
#method=else,action;Executes the action;
#method=equal,object,bool;Determines whether the specified object is equal to the current object boolean value / expression.
#method=equal,&action:bool_action,bool;Determines whether the specified object is equal to the current boolean expression.
#method=equal,&bool:bool,bool;Determines whether the specified object is equal to the current object boolean value.
#method=int,,int;Returns numeric value.
#method=literal,,literal;Returns literal representation.
#method=not,,bool;Always returns true.
#method=or,object,bool;Executes logical OR operation
#method=or,&action:bool_action,bool;Executes logical OR operation with a boolean expression
#method=or,&bool:bool,bool;Executes logical OR operation with a boolean value
#method=or,&int:int,bool;Executes logical OR operation with a numeric value
#method=then,action;Always returns nil.
#method=then,action&else:action;Executes else-action;
#method=xor,object,bool;Executes logical XOR operation
#method=xor,&action:bool_action,bool;Executes logical XOR operation with a boolean expression
#method=xor,&bool:bool,bool;Executes logical XOR operation with a boolean value

[Integer]
#title=Class Integer
#shortdescr=An integer variable class
#protocol=int
#protocol=numeric_variable
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#parent=system.html#IntNumber:system'IntNumber
#constructor=new,int,numeric_variable;Creates an integer variable
#method=append,numeric_value;Appends the integer value
#method=append,&int:int;Appends the integer value
#method=divideInto,numeric_value;Divides into the integer value
#method=divideInto,&int:int;Divides into the integer value
#method=multiplyBy,numeric_value;Multiplies by the integer value
#method=multiplyBy,&int:int;Multiplies by the integer value
#method=number,,int;Returns the integer value
#method=reduce,numeric_value;Reduces the integer value
#method=reduce,&int:int;Reduces the integer value
#method=write,numeric_value;Copies the integer value
#method=write,&int:int;Copies the integer value

[BreakException]
#title=Class BreakException
#shortdescr=A break exception
#parent=system.html#Object:system'Object
#field=theResult
#method=stop,,;Returns the result

[emptyLiteralValue]
#title=Symbol emptyLiteralValue
#shortdescr=An empty literal value
#protocol=literal
#method=add,object,literal;Returns the parameter literal value
#method=add,&literal:literal,literal;Returns the parameter
#method=equal,&literal:literal,bool;Compares with literal value
#method=length,,int;Returns 0
#method=less,&literal:literal,bool;Compares with literal value
#method=literal,,literal;Returns empty literal value
#method=notless,&literal:literal,bool;Compares with literal value

[String]
#title=Class String
#shortdescr=A wide literal variable
#protocol=enumerable
#protocol=literal
#protocol=value
#protocol=variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#field=theValue;The literal value
#constructor=new,,variable;Creates an empty literal variable 
#constructor=new,value,variable;Creates a literal variable with specified value
#method=append,value,;Appends the value
#method=append,&literal:literal,;Appends the value
#method=clear,,;Clears the variable value
#method=delete,&index:int&length:int,;Deletes a sub string
#method=insert,&index:int&literal:literal,;Inserts a sub string
#method=write,value,;Writes the value
#method=write,&literal:literal,;Writes the value

[Variant]
#title=Class Variant
#shortdescr=A basic type variant class
#protocol=enumerable
#protocol=variant
#protocol=variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#String:system'String
#field=theValue;The literal value
#method=int,,int;Tries to convert the value to the integer number
#method=long,,long;Tries to convert the value to the integer number
#method=real,,real;Tries to convert the value to the real number

[Exception]
#title=Class Exception
#shortdescr=A basic exception
#parent=system.html#Object:system'Object
#field=theMessage
#constructor=new,literal;Creates the exception with the provided message
#method=literal,,literal;Returns the message
#method=Messages,,literal;Returns the message

[FormatException]
#title=Class FormatException
#shortdescr=A conversion exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates the exception
#method=onFormatError,function;Executes the exception handling code

[InvalidArgumentException]
#title=Class InvalidArgumentException
#shortdescr=An out of range argument exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates the exception
#method=onInvalidArgumentError,function;Executes the exception handling code

[LongNumber]
#title=Class LongNumber
#shortdescr=A long integer value class
#protocol=numeric_value
#protocol=long
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#constructor=new,,long;Creates the object with zero value
#constructor=new,&int:int,long;Creates the object with specified value
#constructor=new,&long:long,long;Creates the object with specified value
#method=add,&int:int,long;Returns the sum of integers
#method=add,&long:long,long;Returns the sum of integers
#method=add,&real:real,real;Returns the sum
#method=and,&long:long,long;Returns the result of bitwise AND operation
#method=divide,&int:int,long;Returns the result of integer division
#method=divide,&long:long,long;Returns the result of integer division
#method=divide,&real:real,real;Returns the result of division
#method=equal,&int:int,bool;Compares the integer value
#method=equal,&long:long,bool;Compares the integer value
#method=less,&int:int,bool;Compares the integer value
#method=less,&long:long,bool;Compares the integer value
#method=literal,,literal;Returns the literal presentation
#method=long,,long;Returns itself
#method=multiply,&int:int,long;Returns the product of integers
#method=multiply,&long:long,long;Returns the product of integers
#method=multiply,&real:real,real;Returns the product
#method=negative,,long;Negates the value
#method=not,,long;Bitwise inversion
#method=notless,&long:int,bool;Compares the integer value
#method=or,&long:long,long;Returns the result of bitwise OR operation
#method=shift,int,long;Bitwise shift operation
#method=subtract,&int:int,long;Returns the difference of integers
#method=subtract,&long:long,long;Returns the difference of integers
#method=subtract,&real:real,real;Returns the difference
#method=xor,&long:long,long;Returns the result of bitwise XOR operation

[RealNumber]
#title=Class RealNumber
#shortdescr=A float numeric value class
#protocol=numeric_value
#protocol=real
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#constructor=new,,real;Creates the object with zero value
#constructor=new,&int:int,real;Creates the object with specified value
#constructor=new,&long:long,real;Creates the object with specified value
#constructor=new,&real:real,real;Creates the object with specified value
#method=add,&int:int,real;Returns the sum of numbers
#method=add,&real:real,real;Returns the sum of numbers
#method=divide,&int:int,real;Returns the result of the division
#method=divide,&real:real,real;Returns the result of division
#method=equal,&real:real,bool;Compares the integer value
#method=less,&real:real,bool;Compares the integer value
#method=literal,,literal;Returns the literal presentation
#method=notless,&real:real,bool;Compares the integer value
#method=multiply,&int:int,real;Returns the product of numbers
#method=multiply,&real:real,real;Returns the product
#method=subtract,&int:int,real;Returns the difference of integers
#method=subtract,&real:real,real;Returns the difference
#method=real,,real;Returns itself

[BaseValue]
#title=Class BaseValue
#shortdescr=A base value class
#protocol=value
#parent=system.html#Object:system'Object
#method=equal,value,bool;Compares the values
#method=greater,value,bool;Compares the values
#method=less,value,bool;Compares the values
#method=notequal,value,bool;Compares the values
#method=notgreater,value,bool;Compares the values
#method=notless,value,bool;Compares the values

[BaseNumber]
#title=Class BaseNumber
#shortdescr=A base numeric value class
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#method=add,numeric_value,numeric_value;Adds the values
#method=divide,numeric_value,numeric_value;Divuides the values
#method=multiply,numeric_value,numeric_value;Divides the values
#method=subtract,numeric_value,numeric_value;Subtracts the values

[IntBaseNumber]
#title=Class IntBaseNumber
#shortdescr=A base integer value class
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#method=allMask,numeric_value,bool;Returns true if all the mask bits are set
#method=and,numeric_value,numeric_value;Execute bitwise AND operation
#method=anyMask,numeric_value,bool;Returns true if any of the mask bits are set
#method=or,numeric_value,numeric_value;Execute bitwise OR operation
#method=xor,numeric_value,numeric_value;Execute bitwise XOR operation

[LiteralIterator]
#title=Class LiteralIterator
#shortdescr=A literal value iterator
#parent=system.html#Object:system'Object
#protocol=enumerator
#field=theIndex;The current index
#field=theLiteral;The target
#constructor=new,&literal:literal,enumerator;Returns the parameter iterator
#method=append,&index:int;Increaments the index by specified value
#method=available,,bool;Returns false if the index out of range
#method=get,,value;Returns the current character
#method=index,,int;Returns the index value.
#method=next,,bool;Goes to the next character and returns true if the index is not out of range
#method=set,&index:int;Sets the index by specified value
#method=reset,,;Resets the enumerator

[intConvertor]
#title=Symbol intConvertor
#shortdescr=An integer convertor
#method=convert,&int:int,int;Returns the parameter
#method=convert,&literal:literal,int;Converts the literal value to the integer number

[longConvertor]
#title=Symbol longConvertor
#shortdescr=A long integer convertor
#method=convert,&literal:literal,long;Converts the literal value to the integer number
#method=convert,&long:long,long;Returns the parameter

[realConvertor]
#title=Symbol realConvertor
#shortdescr=A real number convertor
#method=convert,&int:int,real;Converts the integer value to the real number
#method=convert,&literal:literal,real;Converts the literal value to the real number
#method=convert,&long:long,real;Converts the integer value to the real number
#method=convert,&real:real,real;Returns the parameter

[literalConvertor]
#title=Symbol literalConvertor
#shortdescr=A literal convertor
#method=convert,&int:int,literal;Converts the parameter to the literal value
#method=convert,&int:int&base:int,literal;Converts the parameter to the literal value with the provided radix
#method=convert,&literal:literal,literal;Returns the parameter
#method=convert,&long:long,literal;Converts the parameter to the literal value
#method=convert,&object:object,literal;Converts the parameter to the literal value
#method=convert,&real:real,literal;Converts the parameter to the literal value

[Real]
#title=Class Real
#shortdescr=A real number variable class
#protocol=real
#protocol=numeric_variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#RealNumber:system'RealNumber
#constructor=new,numeric_value,numeric_variable;Creates a real number variable with specified value
#method=append,numeric_value;Appends the numeric value
#method=append,&int:int;Appends the integer value
#method=append,&real:real;Appends the real number value
#method=divideInto,numeric_value;Divides into the numeric value
#method=divideInto,&int:int;Divides into the integer value
#method=divideInto,&real:real;Divides into the numeric real value
#method=multiplyBy,numeric_value;Multiplies by the numeric value
#method=multiplyBy,&int:int;Multiplies by the integer value
#method=multiplyBy,&real:real;Multiplies by the real numeric value
#method=number,,real;Returns the real number value
#method=reduce,numeric_value;Reduces the numeric value
#method=reduce,&int:int;Reduces the integer value
#method=reduce,&real:real;Reduces by the real numeric value
#method=write,numeric_value;Copies the numeric value
#method=write,&real:real;Copies the real number value
#method=write,&int:int;Copies the integer value

[Long]
#title=Class Long
#shortdescr=A long integer variable class
#protocol=long
#protocol=numeric_variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#parent=system.html#LongNumber:system'LongNumber
#method=append,numeric_value;Appends the integer value
#method=append,&int:int;Appends the integer value
#method=append,&long:long;Appends the integer value
#method=divideInto,numeric_value;Divides into the integer value
#method=divideInto,&int:int;Divides into the integer value
#method=divideInto,&long:long;Divides into the integer value
#method=multiplyBy,numeric_value;Multiplies by the integer value
#method=multiplyBy,&int:int;Multiplies by the integer value
#method=multiplyBy,&long:long;Multiplies by the integer value
#method=number,,long;Returns the integer value
#method=reduce,numeric_value;Reduces the integer value
#method=reduce,&int:int;Reduces the integer value
#method=reduce,&long:long;Reduces the integer value
#method=write,numeric_value;Copies the integer value
#method=write,&int:int;Copies the integer value
#method=write,&long:long;Copies the integer value

[Boolean]
#title=Class Boolean
#shortdescr=A boolean variable
#protocol=bool
#protocol=value
#protocol=variable
#constructor=new,value,variable;Creates a boolean variable with specified value
#method=append,value,bool;Executes logical OR operation
#method=equal,value,bool;Compares the value
#method=invert,,;Inverts the boolean value
#method=multiplyBy,value,bool;Executes logical AND operation
#method=notequal,value,bool;Compares the value
#method=value,,bool;Returns the boolean value
#method=write,value,;Writes the value

[Variable]
#title=Class Variable
#shortdescr=A variable
#protocol=numeric_variable
#parent=system.html#Object:system'Object
#constructor=new,numeric_value,variable;Creates the variable
#method=append,numeric_value;Appends the value
#method=divideInto,numeric_value;Divides into the value
#method=get,,numeric_value;Returns the object
#method=multiplyBy,numeric_value;Multiplies by the value
#method=reduce,numeric_value;Subtructs the value
#method=write,numeric_value;Assigns the variable

[OutOfRangeException]
#title=Class OutOfRangeException
#shortdescr=An out of range exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates the exception
#method=onOutOfRangeError,function;Executes the exception handling code

[functionOp]
#title=Class functionOp
#shortdescr=A function role
#parent=system.html#Object:system'Object
#protocol=function
#method=reverse,&for:variable&from:value&till:value&by:value,object;Executes the function for every value in the specified range in the reverse order
#method=reverse,&for:variable&from:value&to:value&by:value,object;Executes the function for every value in the specified range in the reverse order
#method=run,&for:enumerator,object;Executes the function for every enumeration item
#method=run,&for:enumerator&where:bool_function,object;Executes the function for every enumeration item when the condition is true
#method=run,&for:variable&from:value&backTo:value&by:value,object;Executes the function for every value in the specified range in the reverse order
#method=run,&for:variable&from:value&till:value&by:value,object;Executes the function for every value in the specified range
#method=run,&for:variable&from:value&to:value&by:value,object;Executes the function for every value in the specified range

[ArrayIterator]
#title=Class ArrayIterator
#shortdescr=An array iterator
#parent=system.html#Object:system'Object
#protocol=enumerator
#field=theArray;The target
#field=theCount;The array length
#field=theIndex;The current index
#constructor=new,&array:array,enumerator;Returns the parameter iterator
#method=append,&index:int;Increaments the index by specified value
#method=available,,bool;Returns false if the index out of range
#method=get,,value;Returns the current member
#method=index,,int;Returns the index value.
#method=next,,bool;Goes to the next character and returns true if the index is not out of range
#method=set,object;Sets the current array member
#method=set,&index:int;Sets the index by specified value
#method=reset,,;Resets the enumerator

[Array]
#title=Class Array
#shortdescr=An array
#parent=system.html#Object:system'Object
#protocol=enumerable
#protocol=array
#constructor=new,&length:int,array;Creates the array with the specified length
#method=add,array,array;Concatinates the arrays
#method=add,&array:array,array;Concatinates the arrays
#method=array,,array;Returns itself
#method=enumerator,,enumerator;Returns the array enumerator
#method=getAt,int,object;Returns the specified array member
#method=getAt,&index:int,object;Returns the specified array member
#method=length,,int;Returns the array length
#method=setAt,int,object;Sets the specified array member
#method=setAt,&index:int,object;Sets the specified array member

[literalConvertor]
#title=Symbol literalConvertor
#shortdescr=A literal convertor
#method=convert,&int:int,literal;Converts the integer value to the literal value
#method=convert,&int:int&base:int,literal;Converts the integer value to the literal value with the specified base
#method=convert,&literal:literal,real;Converts the literal value to the real number
#method=convert,&literal:literal,literal;Returns the parameter
#method=convert,&long:long,literal;Converts the integer value to the literal one
#method=convert,&real:real,literal;Converts the real value to the literal one
