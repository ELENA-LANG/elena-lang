[#general#]
#name=system
#shortdescr=Contains the basic functionality

[#list#]
AbortException
Array
ArrayEnumerator
ArrayIterator
BaseArray
BaseByteArray
BaseFunction
BaseFunction1
BaseFunction10
BaseFunction11
BaseFunction2
BaseFunction3
BaseFunction4
BaseFunction5
BaseFunction6
BaseFunction7
BaseFunction8
BaseFunction9
BaseIntArray
BaseNumber
BaseValue
BaseVariable
Boolean
ByteArray
byteConvertor
ByteNumber
CallStack
characterController
charConvertor
CharArray
CharValue
commandLine
console
emptyLiteralValue
emptyWideLiteralValue
Enumerator
Exception
false
FormatException
Handle
IndexFunction1
IndexFunction2
IndexFunction3
IntBaseNumber
IntBaseVariable
intConvertor
IntArray
Integer
IntNumber
InvalidArgumentException
Iterator
literalConvertor
LiteralEnumerator
LiteralIterator
LiteralValue
Long
longConvertor
LongNumber
Message
MethodNotFoundException
nil
NotSupportedException
Object
objectOp
OutOfRangeException
Pointer
Real
realConvertor
RealNumber
ShortArray
shortConvertor
ShortNumber
Signature
String
subjectOp
Symbol
true
Variable
Variant
Verb
WideLiteralEnumerator
WideLiteralIterator
WideLiteralValue
WideString

[console]
#title=Symbol console
#shortdescr=A console
#method=readLine,,literal;Reads the next line of characters from the standard input stream.
#method=write,literal;Writes the specified literal value to the standard output stream.
#method=write,&literal:literal;Writes the specified literal value to the standard output stream.
#method=writeLine,,;Writes the current line terminator to the standard output stream.
#method=writeLine,literal;Writes the specified literal value, followed by the current line terminator, to the standard output stream.

#method=readChar,,char;	Reads the next character from the standard input stream.

[Object]
#title=Class Object
#shortdescr=A common ancestor
#constructor=new,,object;Creates the object
#method=equal,object,bool;Returns true if the specified object is equal to the current object; otherwise, false.<br/>By default compares the object references.

[objectOp]
#title=Extension objectOp
#shortdescr=A generic extension
#method=back,object,object;Returns the parameter
#method=equal,&reference:object,bool;Returns true if the specified object instances are equal; otherwise, false.
#method=is,&integer,,bool;Returns true if the object is integer numereric
#method=is,&literal,,bool;Returns true if the object is literal or character
#method=is,&numeric,,bool;Returns true if the object is numereric
#method=isNil,,bool;Returns true if the object is nil
#method=safeEqual,object,bool;Returns true if the parameter is equal to the object or false. It does not raise an exception if the objects are not compatible

[nil]
#title=Symbol nil
#shortdescr=A nil value
#method=clone,,object;Returns itself

[LiteralValue]
#title=Class LiteralValue
#shortdescr=A UTF-8 literal value
#protocol=enumerable
#protocol=literal
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#constructor=min,,literal;Creates the empty literal
#constructor=new,&length:int,literal;Creates the literal string with specified length
#constructor=new,&length:int&char:char,literal;Creates the literal string with specified length fills with spciefied character value
#constructor=new,&length:int&index:int&chararray:chararray,literal;Creates the copy of a subarray
#constructor=new,&length:int&literal:literal,literal;Creates the literal string with specified length and copies the parameter value
#constructor=new,&literal:literal,literal;Creates the literal string copy
#method=add,object,literal;Concatinates the values
#method=add,&char:char,literal;Concatinates the values
#method=add,&literal:literal,literal;Concatinates the values
#method=cast,verb&to:object,object;Dispatches the verb to the target object with literal subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with literal subject
#method=clone,,literal;Clones the value
#method=delete,&index:int&length:int,literal;Deletes the substring from the object and returns the new one
#method=enumerator,,enumerator;Returns the object enumerator
#method=equal,&char:char,bool;Compares the values
#method=equal,&lite1ral:literal,bool;Compares the values
#method=getAt,object,char;Returns the character with specified index
#method=getAt,&index:int,char;Returns the character with specified index
#method=indexOf,&index:int&char:char,int;Returns the index of the first occurence of the specified symbol.<br/>If the substring is not found. returns -1
#method=indexOf,&index:int&literal:literal,int;Returns the index of the first occurence of the specified substring.<br/>If the substring is not found. returns -1
#method=insert,&index:int&char:char,literal;Inserts a character into and returns the new one
#method=insert,&index:int&literal:literal,literal;Inserts the substring into and returns the new one
#method=iterator,,iterator;Returns the object iterator
#method=length,,int;Returns the string length
#method=less,&char:char,bool;Compares the values
#method=less,&literal:literal,bool;Compares the values
#method=literal,,literal;Returns itself
#method=Substring,&index:int&length:int,literal;Returns the substring
#method=wide,,wide;Converts to UTF-16 literal

[IntNumber]
#title=Class IntNumber
#shortdescr=A signed 32 bit integer
#protocol=numeric_value
#protocol=int
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#constructor=max,,int;Creates the object with the maximal value
#constructor=min,,int;Creates the object with the minimal value
#constructor=new,,int;Creates the object with zero value
#constructor=new,&byte:byte,byte;Creates the object with specified value
#constructor=new,&int:int,int;Creates the object with specified value
#constructor=new,&short:int,int;Creates the object with specified value
#method=add,&byte:byte,int;Returns the sum of integers
#method=add,&int:int,int;Returns the sum of integers
#method=add,&long:long,long;Returns the sum of integers
#method=add,&real:real,real;Returns the sum of integers
#method=add,&short:short,int;Returns the sum of integers
#method=and,&byte:byte,int;Returns the result of bitwise AND operation
#method=and,&int:int,int;Returns the result of bitwise AND operation
#method=and,&long:long,long;Returns the result of bitwise AND operation
#method=and,&short:short,int;Returns the result of bitwise AND operation
#method=byte,,byte;Returns the byte value
#method=cast,verb&to:object,object;Dispatches the verb to the target object with int subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with int subject
#method=clone,,int;Clones the value
#method=divide,&byte:byte,int;Returns the result of division
#method=divide,&int:int,int;Returns the result of integer division
#method=divide,&long:long,long;Returns the result of integer division
#method=divide,&real:real,real;Returns the result of division
#method=divide,&short:short,int;Returns the result of division
#method=equal,&byte:byte,bool;Compares the integer value
#method=equal,&int:int,bool;Compares the integer value
#method=equal,&long:long,bool;Compares the integer value
#method=equal,&real:real,bool;Compares the integer value
#method=equal,&short:short,bool;Compares the integer value
#method=int,,int;Returns itself
#method=less,&byte:byte,bool;Compares the integer value
#method=less,&int:int,bool;Compares the integer value
#method=less,&long:long,bool;Compares the integer value
#method=less,&real:real,bool;Compares the integer value
#method=less,&short:short,bool;Compares the integer value
#method=literal,,literal;Returns the literal presentation
#method=long,,long;Returns the long integer
#method=multiply,&byte:byte,byte;Returns the product
#method=multiply,&int:int,int;Returns the product of integers
#method=multiply,&long:long,long;Returns the product of integers
#method=multiply,&real:real,real;Returns the product
#method=multiply,&short:short,int;Returns the product of integers
#method=negative,,int;Negates the value
#method=not,,int;Bitwise inversion
#method=or,&byte:byte,int;Returns the result of bitwise OR operation
#method=or,&int:int,int;Returns the result of bitwise OR operation
#method=or,&long:long,long;Returns the result of bitwise OR operation
#method=or,&short:short,int;Returns the result of bitwise OR operation
#method=real,,real;Returns the real number
#method=shift,int,&index:int;Bitwise shift operation
#method=short,,short;Returns the value as a short integer
#method=subtract,&byte:byte,int;Returns the difference
#method=subtract,&int:int,int;Returns the difference of integers
#method=subtract,&long:long,long;Returns the difference of integers
#method=subtract,&real:real,real;Returns the difference
#method=subtract,&short:short,int;Returns the difference of integers
#method=wide,,wide;Returns the wide literal presentation
#method=xor,&byte:byte,int;Returns the result of bitwise XOR operation
#method=xor,&int:int,int;Returns the result of bitwise XOR operation
#method=xor,&long:long,int;Returns the result of bitwise XOR operation
#method=xor,&short:short,int;Returns the result of bitwise XOR operation

[CharValue]
#title=Class CharValue
#shortdescr=An UTF-32 character symbol
#protocol=char
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#constructor=max,,char;Returns the maximal possible character value (0FFFFh)
#constructor=min,,char;Returns the minimal possible character value (0)
#constructor=new,,char;Creates the object with zero value
#constructor=new,&char:char,char;Creates the object with specified numeric value
#method=cast,verb&to:object,object;Dispatches the verb to the target object with char subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with char subject
#method=char,,value;Returns itself
#method=clone,,char;Clones the value
#method=equal,&char:char,bool;Compares the value with value
#method=int,,int;Returns the numeric value
#method=length,,int;Retuns the number of bytes to represent the symbol
#method=less,&char:char,bool;Compares the value with value
#method=literal,,literal;Returns the literal value
#method=wide,,wide;Returns the wide literal value

[true]
#title=Symbol true
#shortdescr=A true value symbol
#protocol=bool
#method=and,object,bool;Executes logical AND operation
#method=bool,,bool;Returns itself.
#method=cast,verb&to:object,object;Dispatches the verb to the target object with bool subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with bool subject
#method=clone,,object;Returns itself.
#method=else,action;Always returns nil.
#method=equal,&bool:bool,bool;Determines whether the specified object is equal to the current object boolean value.
#method=equal,object,bool;Determines whether the specified object is equal to the current object boolean value / expression.
#method=literal,,literal;Returns literal representation.
#method=not,,bool;Always returns false.
#method=or,object,bool;Executes logical OR operation<br/>Always return true
#method=then,action;Executes the action;
#method=then,action&else:action;Executes then-action;
#method=wide,,wide;Returns the wide literal representation.
#method=xor,object,bool;Executes logical XOR operation

[false]
#title=Symbol false
#shortdescr=A false value symbol
#protocol=bool
#method=and,object,bool;Executes logical AND operation<br/>Always return false
#method=bool,,bool;Returns itself.
#method=cast,verb&to:object,object;Dispatches the verb to the target object with bool subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with bool subject
#method=clone,,object;Returns itself.
#method=else,action;Executes the action;
#method=equal,object,bool;Determines whether the specified object is equal to the current object boolean value / expression.
#method=literal,,literal;Returns literal representation.
#method=or,object,bool;Executes logical OR operation
#method=not,,bool;Always returns true.
#method=then,action;Always returns nil.
#method=then,action&else:action;Executes else-action;
#method=wide,,wide;Returns the wide literal representation.
#method=xor,object,bool;Executes logical XOR operation

[Integer]
#title=Class Integer
#shortdescr=A 32bit signed integer variable. It extends system'IntNumber class
#protocol=int
#protocol=numeric_variable
#protocol=numeric_value
#protocol=int
#protocol=int_variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#parent=system.html#IntBaseVariable:system'IntBaseVariable
#field=theValue;The integer value
#constructor=new,,intvar;Creates an integer variable
#constructor=new,int,intvar;Creates an integer variable
#constructor=new,&byte:byte,int_variable;Creates an integer variable
#constructor=new,&int:int,int_variable;Creates an integer variable
#constructor=new,&short:short,int_variable;Creates an integer variable
#method=add,&int:int,int;Returns the sum of integers
#method=and,&int:int,int;Returns the result of bitwise AND operation
#method=append,&byte:byte;Appends the integer value
#method=append,&int:int;Appends the integer value
#method=append,&short:short;Appends the integer value
#method=clone,,int;Clones the varaible
#method=divide,&int:int,int;Returns the result of integer division
#method=divideInto,&byte:byte;Divides into the integer value
#method=divideInto,&int:int;Divides into the integer value
#method=divideInto,&short:short;Divides into the integer value
#method=equal,&int:int,bool;Compares the integer value
#method=int,,int;Returns the integer value
#method=intvar,,int_variable;Returns itself
#method=less,&int:int,bool;Compares the integer value
#method=literal,,literal;Returns the literal presentation
#method=long,,long;Returns the value
#method=multiply,&int:int,int;Returns the product of integers
#method=multiplyBy,&byte:byte;Multiplies by the integer value
#method=multiplyBy,&int:int;Multiplies by the integer value
#method=multiplyBy,&short:short;Multiplies by the integer value
#method=or,&int:int,int;Returns the result of bitwise OR operation
#method=real,,real;Returns the value
#method=reduce,&byte:byte;Reduces the integer value
#method=reduce,&int:int;Reduces the integer value
#method=reduce,&short:short;Reduces the integer value
#method=subtract,&int:int,int;Returns the difference of integers
#method=value,,int;Returns the integer value
#method=wide,,wide;Returns the wide literal presentation
#method=write,&byte:byte;Copies the integer value
#method=write,&int:int;Copies the integer value
#method=write,&short:short;Copies the integer value
#method=xor,&int:int,int;Returns the result of bitwise XOR operation
#method=dispatch,,int;Dispatches others messages to its value

[emptyLiteralValue]
#title=Symbol emptyLiteralValue
#shortdescr=An empty literal value
#protocol=literal
#method=add,object,literal;Returns the parameter literal value
#method=add,&literal:literal,literal;Returns the parameter
#method=equal,&literal:literal,bool;Compares with literal value
#method=length,,int;Returns 0
#method=less,&literal:literal,bool;Compares with literal value
#method=literal,,literal;Returns empty literal value

[String]
#title=Class String
#shortdescr=A wide literal variable. Extends system'LiteralValue value
#protocol=literal
#protocol=variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#field=theValue;The literal value
#constructor=new,,variable;Creates an empty literal variable 
#constructor=new,value,variable;Creates a literal variable with specified value
#constructor=new,&char:char,variable;Creates a literal variable with specified value
#constructor=new,&literal:literal,variable;Creates a literal variable with specified value
#method=append,value,;Appends the value
#method=append,&char:char,;Appends the value
#method=append,&literal:literal,;Appends the value
#method=cast,verb&to:object,object;Dispatches the verb to the target object with literal subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with literal subject
#method=clear,,;Clears the variable value
#method=clone,,object;Clones the object
#method=delete,&index:int&length:int,;Deletes a sub string
#method=insert,&index:int&char:char,;Inserts a character
#method=insert,&index:int&literal:literal,;Inserts a sub string
#method=literal,,literal;Returns the literal value
#method=value,,literal;Returns the literal value
#method=write,value,;Writes the value
#method=write,char:char,;Writes the value
#method=write,&literal:literal,;Writes the value
#method=dispatch,,literal;Dispatches others messages to its value

[Variant]
#title=Class Variant
#shortdescr=A basic type variant class
#protocol=variant
#protocol=variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#String:system'String
#field=theValue;The literal value
#method=byte,,byte;Tries to convert the literal value to a byte number
#method=char,,char;Tries to convert the literal value to a character
#method=int,,int;Tries to convert the literal value to the integer number
#method=long,,long;Tries to convert the literal value to the long integer number
#method=real,,real;Tries to convert the literal value to the real number
#method=short,,short;Tries to convert the literal value to a short integer number

[Exception]
#title=Class Exception
#shortdescr=A basic exception
#parent=system.html#Object:system'Object
#field=theCallStack;The exception call stack
#field=theError;The exception type
#field=theMessage;The message
#constructor=new,&message:literal&error_type:subject,object;Creates the exception with the provided message and error type
#method=if,&Error:function;Executes the generic exception handler
#method=if,&error_type:function;If incoming subject equals to the exception type, executes the exception handler<br/>Otherwise goes to the next exception handler
#method=literal,,literal;Returns the message and the call stack                                                                         1
#method=messages,,literal;Returns the message
#method=on,object;Executes the exception handler for the current exception if available<br/>Otherwise goes to the next exception handler
#method=wide,,wide;Returns the message and the call stack

[FormatException]
#title=Class FormatException
#shortdescr=A conversion exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates the exception
#method=if,&FormatError:function;Executes the exception handling code

[OutOfRangeException]
#title=Class OutOfRangeException
#shortdescr=An out of range argument exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates the exception
#constructor=new,&message:literal,;Creates an exception with a custom error message
#method=if,&OutOfRangeError:function;Executes the exception handling code

[InvalidArgumentException]
#title=Class InvalidArgumentException
#shortdescr=An invalid argumemt exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates the exception
#constructor=new,&message:literal,;Creates an exception with a custom error message
#method=if,&InvalidArgumentError:function;Executes the exception handling code

[LongNumber]
#title=Class LongNumber
#shortdescr=A signed 64 bit integer value
#protocol=numeric_value
#protocol=long
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#parent=system.html#IntBaseVariable:system'IntBaseVariable
#constructor=max,,long;Returns the maximal value
#constructor=min,,long;Returns the minimal value
#constructor=new,,long;Creates the object with zero value
#constructor=new,&byte:byte,long;Creates the object with specified value
#constructor=new,&int:int,long;Creates the object with specified value
#constructor=new,&long:long,long;Creates the object with specified value
#constructor=new,&short:short,long;Creates the object with specified value
#method=add,&byte:byte,long;Returns the sum of integers
#method=add,&int:int,long;Returns the sum of integers
#method=add,&long:long,long;Returns the sum of integers
#method=add,&real:real,real;Returns the sum of integers
#method=add,&short:short,long;Returns the sum of integers
#method=and,&byte:byte,long;Returns the result of bitwise AND operation
#method=and,&int:int,long;Returns the result of bitwise AND operation
#method=and,&long:long,long;Returns the result of bitwise AND operation
#method=and,&short:short,long;Returns the result of bitwise AND operation
#method=byte,,byte;Returns the byte value
#method=cast,verb&to:object,object;Dispatches the verb to the target object with long subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with long subject
#method=clone,,long;Clones the value
#method=divide,&byte:byte,long;Returns the result of division
#method=divide,&int:int,long;Returns the result of integer division
#method=divide,&long:long,long;Returns the result of integer division
#method=divide,&real:real,real;Returns the result of division
#method=divide,&short:short,long;Returns the result of division
#method=equal,&byte:byte,bool;Compares the integer value
#method=equal,&int:int,bool;Compares the integer value
#method=equal,&long:long,bool;Compares the integer value
#method=equal,&real:real,bool;Compares the integer value
#method=equal,&shrot:short,bool;Compares the integer value
#method=less,&byte:byte,bool;Compares the integer value
#method=less,&int:int,bool;Compares the integer value
#method=less,&long:long,bool;Compares the integer value
#method=less,&real:real,bool;Compares the integer value
#method=less,&short:short,bool;Compares the integer value
#method=literal,,literal;Returns the literal presentation
#method=long,,long;Returns itself
#method=multiply,&byte:byte,long;Returns the product
#method=multiply,&int:int,long;Returns the product of integers
#method=multiply,&long:long,long;Returns the product of integers
#method=multiply,&real:real,real;Returns the product
#method=multiply,&short:short,long;Returns the product
#method=negative,,long;Negates the value
#method=not,,long;Bitwise inversion
#method=or,&byte:byte,long;Returns the result of bitwise OR operation
#method=or,&int:int,long;Returns the result of bitwise OR operation
#method=or,&long:long,long;Returns the result of bitwise OR operation
#method=or,&short:short,long;Returns the result of bitwise OR operation
#method=real,,real;Returns as a real value
#method=shift,&index:int,long;Bitwise shift operation
#method=short,,short;Returns the value as a short integer
#method=subtract,&byte:byte,long;Returns the difference of integers
#method=subtract,&int:int,long;Returns the difference of integers
#method=subtract,&long:long,long;Returns the difference of integers
#method=subtract,&real:real,real;Returns the difference
#method=subtract,&short:short,long;Returns the difference of integers
#method=wide,,wide;Returns the wide literal presentation
#method=xor,&byte:byte,long;Returns the result of bitwise XOR operation
#method=xor,&int:int,long;Returns the result of bitwise XOR operation
#method=xor,&long:long,long;Returns the result of bitwise XOR operation
#method=xor,&short:short,long;Returns the result of bitwise XOR operation

[RealNumber]
#title=Class RealNumber
#shortdescr=A 64bit float numeric value
#protocol=numeric_value
#protocol=real
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#constructor=max,,real;Returns the maximal value
#constructor=min,,real;Returns the minimal value
#constructor=new,,real;Creates the object with zero value
#constructor=new,&byte:byte,real;Creates the object with specified value
#constructor=new,&int:int,real;Creates the object with specified value
#constructor=new,&long:long,real;Creates the object with specified value
#constructor=new,&real:real,real;Creates the object with specified value
#constructor=new,&short:short,real;Creates the object with specified value
#method=add,&byte:byte,real;Returns the sum of numbers
#method=add,&int:int,real;Returns the sum of numbers
#method=add,&long:long,real;Returns the sum of numbers
#method=add,&real:real,real;Returns the sum of numbers
#method=add,&short:short,real;Returns the sum of numbers
#method=cast,verb&to:object,object;Dispatches the verb to the target object with real subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with real subject
#method=clone,,real;Clones the value
#method=divide,&byte:byte,real;Returns the result of the division
#method=divide,&int:int,real;Returns the result of the division
#method=divide,&long:long,real;Returns the result of the division
#method=divide,&real:real,real;Returns the result of division
#method=divide,&short:short,real;Returns the result of the division
#method=equal,&byte:byte,bool;Compares the integer value
#method=equal,&int:int,bool;Compares the integer value
#method=equal,&long:long,bool;Compares the integer value
#method=equal,&real:real,bool;Compares the integer value
#method=equal,&short:short,bool;Compares the integer value
#method=less,&byte:byte,bool;Compares the integer value
#method=less,&int:int,bool;Compares the integer value
#method=less,&long:long,bool;Compares the integer value
#method=less,&real:real,bool;Compares the integer value
#method=less,&short:short,bool;Compares the integer value
#method=literal,,literal;Returns the literal presentation
#method=multiply,&byte:byte,real;Returns the product of numbers
#method=multiply,&int:int,real;Returns the product of numbers
#method=multiply,&long:long,real;Returns the product of numbers
#method=multiply,&real:real,real;Returns the product
#method=multiply,&short:short,real;Returns the product of numbers
#method=negative,,real;Negates the value
#method=real,,real;Returns itself
#method=subtract,&byte:byte,real;Returns the difference of numbers
#method=subtract,&int:int,real;Returns the difference of numbers
#method=subtract,&long:long,real;Returns the difference of numbers
#method=subtract,&real:real,real;Returns the difference
#method=subtract,&short:short,real;Returns the difference of numbers
#method=wide,,wide;Returns the wide literal presentation

[BaseValue]
#title=Class BaseValue
#shortdescr=A base value
#protocol=value
#parent=system.html#Object:system'Object
#method=equal,value,bool;Compares the values
#method=greater,value,bool;Compares the values
#method=less,value,bool;Compares the values

[BaseNumber]
#title=Class BaseNumber
#shortdescr=A base numeric value
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#method=add,numeric_value,numeric_value;Adds the value
#method=divide,numeric_value,numeric_value;Divides into the value
#method=multiply,numeric_value,numeric_value;Multiply by the value
#method=subtract,numeric_value,numeric_value;Subtracts the value

[IntBaseNumber]
#title=Class IntBaseNumber
#shortdescr=A base integer value
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#method=allMask,numeric_value,bool;Returns true if all the mask bits are set
#method=and,numeric_value,numeric_value;Execute bitwise AND operation
#method=anyMask,numeric_value,bool;Returns true if any of the mask bits are set
#method=or,numeric_value,numeric_value;Execute bitwise OR operation
#method=negative,,numeric_value;Returns the inverted value
#method=xor,numeric_value,numeric_value;Execute bitwise XOR operation

[LiteralIterator]
#title=Class LiteralIterator
#shortdescr=A literal value iterator
#protocol=iterator
#parent=system.html#Object:system'Object
#parent=system.html#Iterator:system'Iterator
#field=theIndex;The current index
#field=theLiteral;The target
#constructor=new,&literal:literal,iterator;Returns the literal iterator
#method=available,,bool;Returns false if the index out of range
#method=get,,char;Returns the current character
#method=set,&index:int;Sets the index by specified value
#method=write,&index:int;Sets the index by specified value

[intConvertor]
#title=Symbol intConvertor
#shortdescr=An integer convertor
#method=convert,&byte:byte,int;Converts to the integer value
#method=convert,&char:char,int;Converts to the integer value
#method=convert,&int:int,int;Returns the parameter
#method=convert,&literal:literal,int;Converts the literal value to the integer number
#method=convert,&long:long,int;Converts to the integer value
#method=convert,&real:real,int;Converts to the integer value
#method=convert,&short:short,int;Converts to the integer value
#method=convert,&wide:wide,int;Converts the wide literal value to the integer number

[longConvertor]
#title=Symbol longConvertor
#shortdescr=A long integer convertor
#method=convert,&byte:byte,long;Converts to the integer value
#method=convert,&char:char,long;Converts to the integer value
#method=convert,&int:int,long;Converts to the integer value
#method=convert,&literal:literal,long;Converts the literal value to the integer number
#method=convert,&long:long,long;Returns the parameter
#method=convert,&real:real,long;Converts to the integer value
#method=convert,&short:short,long;Converts to the integer value
#method=convert,&wide:wide,int;Converts the wide literal value to the integer number

[realConvertor]
#title=Symbol realConvertor
#shortdescr=A real number convertor
#method=convert,&byte:byte,real;Converts to to the real number
#method=convert,&int:int,real;Converts the integer value to the real number
#method=convert,&literal:literal,real;Converts the literal value to the real number
#method=convert,&long:long,real;Converts the integer value to the real number
#method=convert,&real:real,real;Returns the parameter
#method=convert,&short:short,real;Converts the integer value to the real number
#method=convert,&wide:wide,int;Converts the wide literal value to the integer number

[literalConvertor]
#title=Symbol literalConvertor
#shortdescr=A literal convertor
#method=convert,&byte:byte,literal;Converts the parameter to the literal value
#method=convert,&byte:byte&index:int,literal;Converts the parameter to the literal value with the provided radix
#method=convert,&char:char,literal;Converts the parameter to the literal value
#method=convert,&int:int,literal;Converts the parameter to the literal value
#method=convert,&int:int&index:int,literal;Converts the parameter to the literal value with the provided radix
#method=convert,&literal:literal,literal;Returns the parameter
#method=convert,&long:long,literal;Converts the parameter to the literal value
#method=convert,&long:long&index:int,literal;Converts the parameter to the literal value with the provided radix
#method=convert,&real:real,literal;Converts the parameter to the literal value
#method=convert,&short:short,literal;Converts the parameter to the literal value
#method=convert,&short:short&index:int,literal;Converts the parameter to the literal value with the provided radix
#method=convert,&wide:wide,literal;Converts UTF-16 literal to UTF-8 one
#method=convert,object,literal;Converts the parameter to the literal value

[wideConvertor]
#title=Symbol wideConvertor
#shortdescr=A wide literal convertor
#method=convert,&byte:byte,wide;Converts the parameter to the literal value
#method=convert,&byte:byte&index:int,wide;Converts the parameter to the literal value with the provided radix
#method=convert,&char:char,wide;Converts the parameter to the literal value
#method=convert,&int:int,wide;Converts the parameter to the literal value
#method=convert,&int:int&index:int,wide;Converts the parameter to the literal value with the provided radix
#method=convert,&literal:literal,wide;Converts UTF-8 literal to UTF-16
#method=convert,&long:long,wide;Converts the parameter to the literal value
#method=convert,&long:long&index:int,wide;Converts the parameter to the literal value with the provided radix
#method=convert,&real:real,wide;Converts the parameter to the literal value
#method=convert,&short:short,wide;Converts the parameter to the literal value
#method=convert,&short:short&index:int,wide;Converts the parameter to the literal value with the provided radix
#method=convert,&wide:wide,wide;Returns the parameter
#method=convert,object,wide;Converts the parameter to the literal value

[Real]
#title=Class Real
#shortdescr=A 64bit real number variable. It extends system'RealNumber class
#protocol=real
#protocol=numeric_variable
#protocol=real_variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseVariable:system'BaseVariable
#field=theValue;The numeric value
#constructor=new,,numeric_variable;Creates a real variable
#constructor=new,&byte:byte,real_variable;Creates a real variable
#constructor=new,&int:int,real_variable;Creates a real variable
#constructor=new,long,real_variable;Creates a real variable
#constructor=new,&long:long,real_variable;Creates a real variable
#constructor=new,&real:real,real_variable;Creates a real variable
#constructor=new,&short:short,real_variable;Creates a real variable
#method=add,&real:real,real;Returns the sum of numbers
#method=append,&byte:byte;Appends the integer value
#method=append,&int:int;Appends the integer value
#method=append,&long:long;Appends the integer value
#method=append,&real:real;Appends the real number value
#method=append,&short:short;Appends the integer value
#method=clone,,real;Clones the variable
#method=divide,&real:real,real;Returns the result of division
#method=divideInto,&byte:byte;Divides into the integer value
#method=divideInto,&int:int;Divides into the integer value
#method=divideInto,&long:long;Divides into the integer value
#method=divideInto,&real:real;Divides into the numeric real value
#method=divideInto,&short:short;Divides into the integer value
#method=equal,&real:real,bool;Compares the integer value
#method=less,&real:real,bool;Compares the integer value
#method=literal,,literal;Returns the literal presentation
#method=multiply,&real:real,real;Returns the product
#method=multiplyBy,&byte:byte;Multiplies by the integer value
#method=multiplyBy,&int:int;Multiplies by the integer value
#method=multiplyBy,&long:long;Multiplies by the integer value
#method=multiplyBy,&real:real;Multiplies by the real numeric value
#method=multiplyBy,&short:short;Multiplies by the integer value
#method=real,,real;Returns the real value
#method=realvar,,real_variable;Returns itself
#method=reduce,&byte:byte;Reduces the integer value
#method=reduce,&int:int;Reduces the integer value
#method=reduce,&long:long;Reduces the integer value
#method=reduce,&real:real;Reduces by the real numeric value
#method=reduce,&short:short;Reduces the integer value
#method=subtract,&real:real,real;Returns the difference
#method=value,,real;Returns the value
#method=wide,,wide;Returns the wide literal presentation
#method=write,&byte:byte;Copies the integer value
#method=write,&int:int;Copies the integer value
#method=write,&long:long;Copies the integer value
#method=write,&real:real;Copies the real number value
#method=write,&short:short;Copies the integer value
#method=dispatch,,real;Dispatches others messages to its value

[Long]
#title=Class Long
#shortdescr=A 64bit signed integer variable. It extends system'LongNumber class
#protocol=long
#protocol=long_variable
#protocol=numeric_variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#parent=system.html#IntBaseVariable:system'IntBaseVariable
#field=theValue;The integer value
#constructor=new,,numeric_variable;Creates a long integer variable
#constructor=new,long,long_variable;Creates a long integer variable
#constructor=new,&byte:byte,long_variable;Creates a long integer variable
#constructor=new,&int:int,long_variable;Creates a long integer variable
#constructor=new,&long:long,long_variable;Creates a long integer variable
#constructor=new,&short:short,long_variable;Creates a long integer variable
#method=add,&long:long,long;Returns the sum of integers
#method=and,&long:long,long;Returns the result of bitwise AND operation
#method=append,&byte:byte;Appends the integer value
#method=append,&int:int;Appends the integer value
#method=append,&long:long;Appends the integer value
#method=append,&short:short;Appends the integer value
#method=clone,,long;Clones the value
#method=divide,&long:long,long;Returns the result of integer division
#method=divideInto,&byte:byte;Divides into the integer value
#method=divideInto,&int:int;Divides into the integer value
#method=divideInto,&long:long;Divides into the integer value
#method=divideInto,&short:short;Divides into the integer value
#method=equal,&int:int,bool;Compares the integer value
#method=equal,&long:long,bool;Compares the integer value
#method=less,&int:int,bool;Compares the integer value
#method=less,&long:long,bool;Compares the integer value
#method=literal,,literal;Returns the literal presentation
#method=long,,long;Returns the value
#method=longvar,,long_variable;Returns itself
#method=multiply,&long:long,long;Returns the product of integers
#method=multiplyBy,&byte:byte;Multiplies by the integer value
#method=multiplyBy,&int:int;Multiplies by the integer value
#method=multiplyBy,&long:long;Multiplies by the integer value
#method=multiplyBy,&short:short;Multiplies by the integer value
#method=or,&long:long,long;Returns the result of bitwise OR operation
#method=real,,real;Returns the value as a real number
#method=reduce,&byte:byte;Reduces the integer value
#method=reduce,&int:int;Reduces the integer value
#method=reduce,&long:long;Reduces the integer value
#method=reduce,&short:short;Reduces the integer value
#method=subtract,&long:long,long;Returns the difference of integers
#method=value,,long;Returns itself
#method=wide,,wide;Returns the wide literal presentation
#method=write,&byte:byte;Copies the integer value
#method=write,&int:int;Copies the integer value
#method=write,&long:long;Copies the integer value
#method=write,&short:short;Copies the integer value
#method=xor,&long:long,long;Returns the result of bitwise XOR operation
#method=dispatch,,long;Dispatches others messages to its value

[Boolean]
#title=Class Boolean
#shortdescr=A boolean variable. Extends an boolean value
#protocol=bool
#protocol=variable
#constructor=new,,variable;Creates a boolean variable with an initial value
#constructor=new,object,variable;Creates a boolean variable with specified value
#constructor=new,&bool:bool,variable;Creates a boolean variable with specified value
#method=append,object,variable;Executes logical OR operation
#method=bool,,bool;Returns the boolean value
#method=clone,,object;Clones the object
#method=invert,,;Inverts the boolean value
#method=multiplyBy,object,variable;Executes logical AND operation
#method=value,,bool;Returns the boolean value
#method=write,value,;Writes the value
#method=write,&bool:bool,;Writes the value

[Variable]
#title=Class Variable
#shortdescr=A generic variable. Extends an assigned value
#protocol=numeric_variable
#parent=system.html#Object:system'Object
#constructor=new,numeric_value,variable;Creates the variable
#constructor=new,,variable;Creates the empty variable
#method=append,numeric_value;Appends the value
#method=divideInto,numeric_value;Divides into the value
#method=multiplyBy,numeric_value;Multiplies by the value
#method=reduce,numeric_value;Subtructs the value
#method=value,,numeric_value;Returns the object
#method=write,numeric_value;Assigns the variable
#method=dispatch,,value;Dispatches others messages to its value

[ArrayIterator]
#title=Class ArrayIterator
#shortdescr=An array iterator
#parent=system.html#Object:system'Object
#parent=system.html#Iterator:system'Iterator
#protocol=iterator
#field=theArray;The target
#field=theIndex;The current index
#constructor=new,&array:array,iterator;Returns the parameter iterator
#method=available,,bool;Returns false if the index out of range
#method=get,,value;Returns the current member
#method=set,object;Sets the current member
#method=write,&index:int;Sets the index by specified value

[Array]
#title=Class Array
#shortdescr=An array
#parent=system.html#Object:system'Object
#parent=system.html#BaseArray:system'BaseArray
#protocol=enumerable
#protocol=array
#constructor=min,,array;Creates an empty array
#constructor=new,&array:array,array;Creates a copy of the provided array
#constructor=new,&length:int,array;Creates an array with the specified length
#constructor=new,&length:int&array:array,array;Creates an array with the specified length
#constructor=new,&length:int&index:int&array:array,array;Creates a copy of the provided sub array
#method=add,array,array;Concatinates the arrays
#method=add,&array:array,array;Concatinates the arrays
#method=array,,array;Returns itself
#method=cast,verb&to:object,object;Dispatches the verb to the target object with array subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with array subject
#method=clone,,array;Clones the array
#method=enumerator,,enumerator;Returns the array enumerator
#method=getAt,int,object;Returns the specified array member
#method=getAt,&index:int,object;Returns the specified array member
#method=iterator,,iterator;Returns the array iterator
#method=length,,int;Returns the array length
#method=setAt,int&:object,object;Sets the specified array member
#method=setAt,&index:int&object:object,object;Sets the specified array member

[ByteArray]
#title=Class ByteArray
#shortdescr=A byte array
#parent=system.html#Object:system'Object
#parent=system.html#BaseByteArray:system'BaseByteArray
#protocol=bytearray
#constructor=new,&length:int,bytearray;Creates the byte array with the specified length
#constructor=new,&length:int&bytearray:bytearray,bytearray;Creates the byte array copy
#constructor=new,&length:int&index:int&bytearray:bytearray,bytearray;Creates the copy of a byte subarray
#method=bytearray,,bytearray;Returns itself
#method=cast,verb&to:object,object;Dispatches the verb to the target object with bytearray subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with bytearray subject
#method=clone,,bytearray;Creates the object copy
#method=length,,int;Returns the byte array length
#method=read,&index:int&out'byte:byte;Reads a byte value at the specified position and saves it into an output variable
#method=read,&index:int&out'char:char;Reads a character value at the specified position and saves it into an output variable
#method=read,&index:int&out'int:int;Reads an integer value at the specified position and saves it into an output variable
#method=read,&index:int&out'long:long;Reads a long integer value at the specified position and saves it into an output variable
#method=read,&index:int&out'real:real;Reads a real value at the specified position and saves it into an output variable
#method=read,&index:int&out'short:short;Reads a short integer value at the specified position and saves it into an output variable
#method=read,&index:int&length:int&bytearray:bytearray;Copies a sub array to the provided one at the specified position
#method=write,&index:int&byte:byte;Writes the byte value at specified position
#method=write,&index:int&char:char;Writes a character value at the specified position
#method=write,&index:int&int:int;Writes an integer value at the specified position
#method=write,&index:int&length:int&bytearray:bytearray;Copies the byte array at the specified position
#method=write,&index:int&long:long;Writes a long integer value at the specified position
#method=write,&index:int&real:real;Writes a real value at the specified position
#method=write,&index:int&short:short;Writes a short integer value at the specified position

[IntBaseVariable]
#title=Class IntBaseVariable
#shortdescr=A base integer variable
#protocol=numeric_variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#method=append,numeric_value;Appends the numeric value
#method=divideInto,numeric_value;Divides into the numeric value and reassigns the value
#method=multiplyBy,numeric_value;Multiplies by the numeric value and reassigns the value
#method=reduce,numeric_value;Subtracts the numeric value and reassigns the value
#method=write,numeric_value;Assigns the numeric value

[BaseVariable]
#title=Class BaseVariable
#shortdescr=A base numeric variable
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#method=append,value;Appends the value
#method=divideInto,value;Divides into the value and reassigns the value
#method=multiplyBy,value;Multiplies by the value and reassigns the value
#method=reduce,value;Subtracts the value and reassigns the value
#method=write,value;Assigns the value

[ByteNumber]
#title=Class ByteNumber
#shortdescr=An unsigned 8 bit integer
#protocol=numeric_value
#protocol=byte
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#constructor=new,,byte;Creates the object with a minimal value (0)
#constructor=new,&byte:byte,byte;Creates the object with specified value
#constructor=min,,byte;Returns the minimal value (0)
#constructor=max,,byte;Returns the maxial value (255)
#method=add,&byte:byte,byte;Returns the sum
#method=add,&int:int,int;Returns the sum
#method=add,&long:long,long;Returns the sum
#method=add,&real:real,real;Returns the sum
#method=add,&short:short,short;Returns the sum
#method=and,&byte:byte,byte;Returns the result of bitwise AND operation
#method=and,&int:int,int;Returns the result of bitwise AND operation
#method=and,&long:long,long;Returns the result of bitwise AND operation
#method=and,&short:short,short;Returns the result of bitwise AND operation
#method=byte,,byte;Returns itself
#method=cast,verb&to:object,object;Dispatches the verb to the target object with byte subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with byte subject
#method=clone,,byte;Clones the value
#method=divide,&byte:byte,byte;Returns the result of integer division
#method=divide,&int:int,int;Returns the result of integer division
#method=divide,&long:long,long;Returns the result of integer division
#method=divide,&real:real,real;Returns the result of a division
#method=divide,&short:short,short;Returns the result of integer division
#method=equal,&byte:byte,bool;Compares the value
#method=equal,&int:int,bool;Compares the value
#method=equal,&long:long,bool;Compares the value
#method=equal,&real:real,bool;Compares the value
#method=equal,&short:short,bool;Compares the value
#method=int,,int;Returns the value as an integer
#method=less,&byte:byte,bool;Compares the values
#method=less,&int:int,bool;Compares the values
#method=less,&long:long,bool;Compares the values
#method=less,&real:real,bool;Compares the values
#method=less,&short:short,bool;Compares the values
#method=literal,,literal;Returns the literal presentation
#method=long,,long;Returns the value as an integer
#method=multiply,&byte:byte,byte;Returns the product
#method=multiply,&int:int,int;Returns the product
#method=multiply,&long:long,long;Returns the product
#method=multiply,&real:real,real;Returns the product
#method=multiply,&short:short,short;Returns the product
#method=not,,byte;Bitwise inversion
#method=or,&byte:byte,byte;Returns the result of bitwise OR operation
#method=or,&int:int,int;Returns the result of bitwise OR operation
#method=or,&long:long,long;Returns the result of bitwise OR operation
#method=or,&short:short,short;Returns the result of bitwise OR operation
#method=real,,real;Returns the value as a real numbrt
#method=shift,&index:int,byte;Bitwise shift operation
#method=short,,short;Returns the value as a short integer
#method=subtract,&byte:byte,byte;Returns the difference
#method=subtract,&int:int,int;Returns the difference
#method=subtract,&long:long,long;Returns the difference
#method=subtract,&real:real,real;Returns the difference
#method=subtract,&short:short,short;Returns the difference
#method=wide,,wide;Returns the wide literal presentation
#method=xor,&byte:byte,byte;Returns the result of bitwise XOR operation
#method=xor,&int:int,int;Returns the result of bitwise XOR operation
#method=xor,&long:long,long;Returns the result of bitwise XOR operation
#method=xor,&short:short,short;Returns the result of bitwise XOR operation

[ShortNumber]
#title=Class ShortNumber
#shortdescr=A signed 16 bit integer
#protocol=numeric_value
#protocol=short
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#IntBaseNumber:system'IntBaseNumber
#constructor=min,,short;Returns the minimal value (-32768)
#constructor=max,,short;Returns the maxial value (32767)
#constructor=new,&byte:byte,short;Creates the object with specified value
#constructor=new,&short:short,short;Creates the object with specified value
#method=add,&byte:byte,short;Returns the sum
#method=add,&int:int,int;Returns the sum
#method=add,&long:long,long;Returns the sum
#method=add,&real:real,real;Returns the sum
#method=add,&short:short,short;Returns the sum
#method=and,&byte:byte,short;Returns the result of bitwise AND operation
#method=and,&int:int,int;Returns the result of bitwise AND operation
#method=and,&long:long,long;Returns the result of bitwise AND operation
#method=and,&short:short,short;Returns the result of bitwise AND operation
#method=byte,,byte;Returns the byte value
#method=cast,verb&to:object,object;Dispatches the verb to the target object with short subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with short subject
#method=clone,,short;Clones the value
#method=divide,&byte:byte,short;Returns the result of integer division
#method=divide,&int:int,int;Returns the result of integer division
#method=divide,&long:long,long;Returns the result of integer division
#method=divide,&real:real,real;Returns the result of a division
#method=divide,&short:short,short;Returns the result of integer division
#method=equal,&byte:byte,bool;Compares the value
#method=equal,&int:int,bool;Compares the value
#method=equal,&long:long,bool;Compares the value
#method=equal,&real:real,bool;Compares the value
#method=equal,&short:short,bool;Compares the value
#method=int,,int;Returns the integer value
#method=less,&byte:byte,bool;Compares the values
#method=less,&int:int,bool;Compares the values
#method=less,&long:long,bool;Compares the values
#method=less,&real:real,bool;Compares the values
#method=less,&short:short,bool;Compares the values
#method=literal,,literal;Returns the literal presentation
#method=long,,long;Returns itself
#method=multiply,&byte:byte,short;Returns the product
#method=multiply,&int:int,int;Returns the product
#method=multiply,&long:long,long;Returns the product
#method=multiply,&real:real,real;Returns the product
#method=multiply,&short:short,short;Returns the product
#method=not,,short;Bitwise inversion
#method=or,&byte:byte,short;Returns the result of bitwise OR operation
#method=or,&int:int,int;Returns the result of bitwise OR operation
#method=or,&long:long,long;Returns the result of bitwise OR operation
#method=or,&short:short,short;Returns the result of bitwise OR operation
#method=real,,real;Returns itself
#method=shift,&index:int,short;Bitwise shift operation
#method=short,,short;Returns itself
#method=subtract,&byte:byte,short;Returns the difference
#method=subtract,&int:int,int;Returns the difference
#method=subtract,&long:long,long;Returns the difference
#method=subtract,&real:real,real;Returns the difference
#method=subtract,&short:short,short;Returns the difference
#method=wide,,wide;Returns the wide literal presentation
#method=xor,&byte:byte,short;Returns the result of bitwise XOR operation
#method=xor,&int:int,int;Returns the result of bitwise XOR operation
#method=xor,&long:long,long;Returns the result of bitwise XOR operation
#method=xor,&short:short,short;Returns the result of bitwise XOR operation

[byteConvertor]
#title=Symbol byteConvertor
#shortdescr=A byte convertor
#method=convert,&byte:byte,byte;Returns the parameter
#method=convert,&char:char,byte;Converts to a byte value
#method=convert,&int:int,byte;Converts to a byte value
#method=convert,&literal:literal,byte;Converts to a byte value
#method=convert,&long:long,byte;Converts to a byte value
#method=convert,&real:real,byte;Converts to a byte value
#method=convert,&short:short,byte;Converts to a byte value
#method=convert,&wide:wide,byte;Converts to a byte value

[shortConvertor]
#title=Symbol shortConvertor
#shortdescr=A 16bit integer convertor
#method=convert,&byte:byte,short;Converts to a short integer value
#method=convert,&char:char,short;Converts to a short integer value
#method=convert,&int:int,short;Converts to a short integer value
#method=convert,&literal:literal,short;Converts to a short integer value
#method=convert,&long:long,short;Converts to a short integer value
#method=convert,&real:real,short;Converts to a short integer value
#method=convert,&short:short,short;Returns the parameter
#method=convert,&wide:wide,byte;Converts to a byte value

[Enumerator]
#title=Class Enumerator
#shortdescr=An enumerator prototype
#protocol=enumerator
#parent=system.html#Object:system'Object
#method=get,,object;Returns the current object
#method=enumerator,,enumerator;Returns itself
#method=next,,bool;Goes to the next enumeration member and returns true if it is not the last member
#method=reset,,;Resets the enumerator

[Iterator]
#title=Class Iterator
#shortdescr=An iterator prototype
#protocol=iterator
#parent=system.html#Object:system'Object
#method=append,&index:int;Increaments the index by specified value
#method=available,,bool;Returns false if the index out of range
#method=get,,value;Returns the current member
#method=index,,int;Returns the index value.
#method=iterator,,iterator;Returns itself
#method=reduce,&index:int;Decreaments the index by specified value
#method=set,object;Sets the current member
#method=write,&index:int;Sets the index by specified value

[BaseFunction]
#title=Class BaseFunction
#shortdescr=A base action
#protocol=action
#parent=system.html#Object:system'Object
#method=eval,,object;Executes the action
#method=run,&if:bool,;Executes the action until the condition is false
#method=run,&until:bool,;Executes the action while the condition is false</br>Executes at least once

[BaseFunction1]
#title=Class BaseFunction1
#shortdescr=A base function
#protocol=function
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func1 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func1 subject
#method=eval,object,object;Executes the function
#method=retrieve,&enumerator:enumerator,object;Executes the function for every enumeration item until it returns true
#method=run,&enumerator:enumerator,object;Executes the function for every enumeration item

[BaseFunction2]
#title=Class BaseFunction2
#shortdescr=A base two variable function
#protocol=func2
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func2 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func2 subject
#method=eval,object&:object,object;Executes the function
#method=retrieve,&:object&enumerator:enumerator,object;Executes the function for a parameter and every enumeration item until it returns true
#method=run,&:object&enumerator:enumerator,object;Executes the function for a parameter and every enumeration item

[BaseFunction3]
#title=Class BaseFunction3
#shortdescr=A base three variable function
#protocol=func3
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func3 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func3 subject
#method=eval,object&:object&:object,object;Executes the function
#method=retrieve,&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item until it returns true
#method=run,&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item

[BaseFunction4]
#title=Class BaseFunction4
#shortdescr=A base four variable function
#protocol=func4
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func4 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func4 subject
#method=eval,object&:object&:object&:object,object;Executes the function
#method=retrieve,&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item until it returns true
#method=run,&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item

[BaseFunction5]
#title=Class BaseFunction5
#shortdescr=A base five variable function
#protocol=func5
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func5 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func5 subject
#method=eval,object&:object&:object&:object&:object,object;Executes the function
#method=retrieve,&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item until it returns true
#method=run,&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item

[BaseFunction6]
#title=Class BaseFunction6
#shortdescr=A base six variable function
#protocol=func6
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func6 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func6 subject
#method=eval,object&:object&:object&:object&:object&:object,object;Executes the function
#method=retrieve,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item until it returns true
#method=run,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item

[BaseFunction7]
#title=Class BaseFunction7
#shortdescr=A base seven variable function
#protocol=func7
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func7 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func7 subject
#method=eval,object&:object&:object&:object&:object&:object,object;Executes the function
#method=retrieve,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item until it returns true
#method=run,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item

[BaseFunction8]
#title=Class BaseFunction8
#shortdescr=A base eight variable function
#protocol=func8
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func8 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func8 subject
#method=eval,object&:object&:object&:object&:object&:object,object;Executes the function
#method=retrieve,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item until it returns true
#method=run,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item

[BaseFunction9]
#title=Class BaseFunction9
#shortdescr=A base nine variable function
#protocol=func9
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func9 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func9 subject
#method=eval,object&:object&:object&:object&:object&:object,object;Executes the function
#method=retrieve,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item until it returns true
#method=run,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item

[BaseFunction10]
#title=Class BaseFunction10
#shortdescr=A base ten variable function
#protocol=func10
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func10 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func10 subject
#method=eval,object&:object&:object&:object&:object&:object,object;Executes the function
#method=retrieve,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item until it returns true
#method=run,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item

[BaseFunction11]
#title=Class BaseFunction11
#shortdescr=A base eleven variable function
#protocol=func11
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with func11 subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with func11 subject
#method=eval,object&:object&:object&:object&:object&:object,object;Executes the function
#method=retrieve,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item until it returns true
#method=run,&:object&:object&:object&:object&:object&enumerator:enumerator,object;Executes the function for parameters and every enumeration item

[IndexFunction1]
#title=Class IndexFunction1
#shortdescr=A base index function
#protocol=nfunc
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with nfunc subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with nfunc subject
#method=eval,&index:int,object;Executes the function
#method=retrieve,&range&int:int&int:int&int:int,object;Executes the function for every value in the specified range (starting value, ending value, step) until it returns true
#method=rewind,&range&int:int&int:int&int:int,object;Executes the function for every value in the specified integer range (starting value, ending value, -step)
#method=run,&range&int:int&int:int&int:int,object;Executes the function for every value in the specified range (starting value, ending value, step)

[IndexFunction2]
#title=Class IndexFunction2
#shortdescr=A base two variable index function
#protocol=nnfunc
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with nnfunc subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with nnfunc subject
#method=eval,&index:int&index:int,object;Executes the function
#method=rewind,&area&int:int&int:int&int:int&int:int&int:int,object;Executes the function for every value in the specified integer area (starting x-value, starting y-value, ending x-value, ending y-value, -step)
#method=run,&area&int:int&int:int&int:int&int:int&int:int,object;Executes the function for every value in the specified range (starting x-value, starting y-value, ending x-value, ending y-value, step)

[IndexFunction3]
#title=Class IndexFunction3
#shortdescr=A base three variable index function
#protocol=n3func
#parent=system.html#Object:system'Object
#method=cast,verb&to:object,object;Dispatches the verb to the target object with n3func subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with n3func subject
#method=eval,&index:int&index:int&index:int,object;Executes the function
#method=rewind,&space&int:int&int:int&int:int&int:int&int:int&int:int&int:int,object;Executes the function for every value in the specified integer area (starting x-value, starting y-value, starting z-value, ending x-value, ending y-value, ending z-value, -step)
#method=run,&space&int:int&int:int&int:int&int:int&int:int&int:int&int:int,object;Executes the function for every value in the specified range (starting x-value, starting y-value, starting z-value, ending x-value, ending y-value, ending z-value, step)

[BaseByteArray]
#title=Class BaseByteArray
#shortdescr=A base byte array
#parent=system.html#Object:system'Object
#constructor=new,&length:int,object;Creates the byte array with the specified length

[ShortArray]
#title=Class ShortArray
#shortdescr=A short integer array
#parent=system.html#Object:system'Object
#protocol=shortarray
#constructor=new,&length:int,shortarray;Creates the short array with the specified length
#constructor=new,&length:int&index:int&shortarray:shortarray,shortarray;Creates the copy of a short subarray
#constructor=new,&length:int&shortarray:shortarray,shortarray;Creates the short array copy
#method=cast,verb&to:object,object;Dispatches the verb to the target object with shortarray subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with shortarray subject
#method=clone,,shortarray;Creates the object copy
#method=length,,int;Returns the array length
#method=read,&index:int&length:int&shortarray:shortarray;Copies a sub array to the provided one at the specified position
#method=read,&index:int&out'short:short;Reads a short integer value at the specified position and saves it into an output variable
#method=shortarray,,shortarray;Returns itself
#method=write,&index:int&length:int&shortarray:shortarray;Copies the short array at the specified position
#method=write,&index:int&short:short;Writes a short integer value at the specified position

[BaseIntArray]
#title=Class BaseIntArray
#shortdescr=A base integer array
#parent=system.html#Object:system'Object
#constructor=new,&length:int,object;Creates the integer array with the specified length

[IntArray]
#title=Class IntArray
#shortdescr=An array of integers
#parent=system.html#Object:system'Object
#parent=system.html#BaseIntArray:system'BaseIntArray
#protocol=intarray
#constructor=new,&length:int,intarray;Creates the array with the specified length
#constructor=new,&length:int&index:int&intarray:intarray,intarray;Creates the copy of a subarray
#constructor=new,&length:int&intarray:intarray,intarray;Creates the array copy
#method=cast,verb&to:object,object;Dispatches the verb to the target object with intarray subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with intarray subject
#method=clone,,intarray;Creates the object copy
#method=intarray,,intarray;Returns itself
#method=length,,int;Returns the array length
#method=read,&index:int&length:int&intarray:intarray;Copies a sub array to the provided one at the specified position
#method=read,&index:int&out'int:int;Reads an integer value at the specified position and saves it into an output variable
#method=write,&index:int&int:int;Writes an integer value at the specified position
#method=write,&index:int&length:int&intarray:intarray;Copies the short array at the specified position

[charConvertor]
#title=Symbol charConvertor
#shortdescr=A wide character convertor
#method=convert,&byte:byte,char;Converts to a character value
#method=convert,&char:char,char;Returns the parameter
#method=convert,&int:int,char;Converts to a character value
#method=convert,&literal:literal,char;Converts to a character value
#method=convert,&short:short,char;Converts to a character value
#method=convert,&wide:wide,char;Converts to a character value

[BaseArray]
#title=Class BaseByteArray
#shortdescr=A base array
#parent=system.html#Object:system'Object
#constructor=new,&length:int,object;Creates the array with the specified length

[LiteralEnumerator]
#title=Class LiteralEnumerator
#shortdescr=A literal enumerator
#protocol=enumerator
#parent=system.html#Object:system'Object
#parent=system.html#Enumerator:system'Enumerator
#constructor=new&literal:literal,enumerator
#method=get,,char;Returns the current character
#method=enumerator,,enumerator;Returns itself
#method=next,,bool;Goes to the next enumeration member and returns true if it is not the last member
#method=reset,,;Resets the enumerator

[ArrayEnumerator]
#title=Class ArrayEnumerator
#shortdescr=An array enumerator
#protocol=enumerator
#parent=system.html#Object:system'Object
#parent=system.html#Enumerator:system'Enumerator
#constructor=new,&array:array,enumerator;Createa an array enumerator
#method=get,,object;Returns the current object
#method=enumerator,,enumerator;Returns itself
#method=next,,bool;Goes to the next enumeration member and returns true if it is not the last member
#method=reset,,;Resets the enumerator

[Symbol]
#title=Class Symbol
#shortdescr=A dynamic symbol
#parent=system.html#Object:system'Object
#constructor=new,&name:literal,object;Creates a symbol
#method=dispatch,,object;Redirects incoming messages to the symbol

[Message]
#title=Class Message
#shortdescr=A message extensions
#protocol=mssg
#parent=system.html#Object:system'Object
#constructor=new,&mssg:mssg,mssg;Creates a dynamic message
#method=dispatch,,object;Dequalifies incoming messages if they are equal to its value and redirects to the target

[Verb]
#title=Class Verb
#shortdescr=A verb extensions
#protocol=verb
#parent=system.html#Object:system'Object
#constructor=new,&verb:verb,verb;Creates a dynamic verb
#method=dispatch,,object;Dispatches incoming messages and redirects to the target

[Signature]
#title=Class Signature
#shortdescr=A signature extensions
#protocol=subject
#parent=system.html#Object:system'Object
#constructor=new,&subject:subject,subject;Creates a dynamic signature
#method=dispatch,,object;Qualifies incoming messages and redirects to the target

[subjectOp]
#title=Extension Signature
#shortdescr=A subject extensions
#method=equal,&subject:subject,bool;Compares subject values

[CallStack]
#title=Class CallStack
#shortdescr=A call stack
#parent=system.html#Object:system'Object
#constructor=new,,object;Creates a current call stack
#method=literal,,literal;Generates the call stack literal representation

[MethodNotFoundException]
#title=Class MethodNotFoundException
#shortdescr=A method not found exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates the exception
#method=if,&MethodNotFoundError:function;Executes the exception handling code

[NotSupportedException]
#title=Class NotSupportedException
#shortdescr=A not supported exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates the exception
#constructor=new,&message:literal,;Creates an exception with a custom error message
#method=if,&NotSupportedError:function;Executes the exception handling code

[AbortException]
#title=Class AbortException
#shortdescr=An abort exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates the exception
#constructor=new,&message:literal,;Creates an exception with a custom error message
#method=if,&Abort:function;Executes the exception handling code

[Handle]
#title=Class Handle
#shortdescr=An WinAPI object handle wrapper
#parent=system.html#Object:system'Object
#protocol=handle
#constructor=new,&handle:handle,handle;Creates a handle
#method=close,,;Closes an open handle
#method=equal,&handle:handle,bool;Compares handles
#method=handle,,handle;Returns itself

[Pointer]
#title=Class Pointer
#shortdescr=A safe object reference
#parent=system.html#Object:system'Object
#constructor=new,&object,object;Creates a pointer referring to the specified object
#method=get,,object;Returns an object referred by
#method=index,,int;Returns the index in the global reference table
#method=close,,;Closes the pointer<br/>Releases a place in the global reference table

[commandLine]
#title=Symbol commandLine
#shortdescr=The command-line string for the current process
#protocol=literal

[characterController]
#title=Symbol characterController
#shortdescr=The OS specific character routine controller
#method=isLowerCase,&char:char,bool;Determines whether a character is lowercase
#method=isUpperCase,&char:char,bool;Determines whether a character is uppercase
#method=toLowerCase,&char:char,char;Converts a character to lowercase
#method=toUpperCase,&char:char,char;Converts a character to uppercase

[emptyWideLiteralValue]
#title=Symbol emptyWideLiteralValue
#shortdescr=An empty wide literal value
#protocol=wide
#method=add,object,wide;Returns the parameter literal value
#method=add,&wide:wide,wide;Returns the parameter
#method=equal,&wide:wide,bool;Compares with literal value
#method=length,,int;Returns 0
#method=less,&wide:wide,bool;Compares with literal value
#method=wide,,wide;Returns empty wide literal value

[WideLiteralValue]
#title=Class WideLiteralValue
#shortdescr=A UTF-18 literal value
#protocol=enumerable
#protocol=wide
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#constructor=min,,wide;Creates the empty literal
#constructor=new,&length:int,wide;Creates the literal string with specified length
#constructor=new,&length:int&char:char,wide;Creates the literal string with specified length fills with spciefied character value
#constructor=new,&length:int&index:int&chararray:chararray,wide;Creates the copy of a subarray
#constructor=new,&length:int&wide:wide,wide;Creates the literal string with specified length and copies the parameter value
#constructor=new,&wide:wide,wide;Creates the literal string copy
#method=add,object,wide;Concatinates the values
#method=add,&char:char,literal;Concatinates the values
#method=add,&wide:wide,wide;Concatinates the values
#method=cast,verb&to:object,object;Dispatches the verb to the target object with wide subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with wide subject
#method=clone,,wide;Clones the value
#method=delete,&index:int&length:int,wide;Deletes the substring from the object and returns the new one
#method=enumerator,,enumerator;Returns the object enumerator
#method=equal,&char:char,bool;Compares the values
#method=equal,&wide:wide,bool;Compares the values
#method=getAt,object,char;Returns the character with specified index
#method=getAt,&index:int,char;Returns the character with specified index
#method=indexOf,&index:int&char:char,int;Returns the index of the first occurence of the specified symbol.<br/>If the substring is not found. returns -1
#method=indexOf,&index:int&wide:wide,int;Returns the index of the first occurence of the specified substring.<br/>If the substring is not found. returns -1
#method=insert,&index:int&char:char,wide;Inserts a character into and returns the new one
#method=insert,&index:int&wide:wide,wide;Inserts the substring into and returns the new one
#method=iterator,,iterator;Returns the object iterator
#method=length,,int;Returns the string length
#method=less,&char:char,bool;Compares the values
#method=less,&wide:wide,bool;Compares the values
#method=literal,,literal;Converts to UTF-8 literal
#method=Substring,&index:int&length:int,wide;Returns the substring
#method=wide,,wide;Returns itself

[WideLiteralIterator]
#title=Class WideLiteralIterator
#shortdescr=A literal value iterator
#protocol=iterator
#parent=system.html#Object:system'Object
#parent=system.html#Iterator:system'Iterator
#field=theIndex;The current index
#field=theLiteral;The target
#constructor=new,&wide:wide,iterator;Returns the literal iterator
#method=available,,bool;Returns false if the index out of range
#method=get,,char;Returns the current character
#method=set,&index:int;Sets the index by specified value
#method=write,&index:int;Sets the index by specified value

[WideLiteralEnumerator]
#title=Class WideLiteralEnumerator
#shortdescr=A wide literal enumerator
#protocol=enumerator
#parent=system.html#Object:system'Object
#parent=system.html#Enumerator:system'Enumerator
#constructor=new&wide:wide,enumerator
#method=get,,char;Returns the current character
#method=enumerator,,enumerator;Returns itself
#method=next,,bool;Goes to the next enumeration member and returns true if it is not the last member
#method=reset,,;Resets the enumerator

[WideString]
#title=Class WideString
#shortdescr=A wide literal variable. Extends system'LiteralValue value
#protocol=wide
#protocol=variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#field=theValue;The wide literal value
#constructor=new,,variable;Creates an empty literal variable 
#constructor=new,value,variable;Creates a literal variable with specified value
#constructor=new,&char:char,variable;Creates a literal variable with specified value
#constructor=new,&literal:literal,variable;Creates a literal variable with specified value
#method=append,value,;Appends the value
#method=append,&char:char,;Appends the value
#method=append,&wide:wide,;Appends the value
#method=cast,verb&to:object,object;Dispatches the verb to the target object with wide subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with wide subject
#method=clear,,;Clears the variable value
#method=clone,,object;Clones the object
#method=delete,&index:int&length:int,;Deletes a sub string
#method=insert,&index:int&char:char,;Inserts a character
#method=insert,&index:int&wide:wide,;Inserts a sub string
#method=wide,,wide;Returns the literal value
#method=value,,wide;Returns the literal value
#method=write,value,;Writes the value
#method=write,char:char,;Writes the value
#method=write,&wide:wide,;Writes the value
#method=dispatch,,wide;Dispatches others messages to its value

[CharArray]
#title=Class CharArray
#shortdescr=An array of unicode characters (UTF-32)
#parent=system.html#Object:system'Object
#parent=system.html#BaseIntArray:system'BaseIntArray
#protocol=chararray
#constructor=new,&length:int,chararray;Creates the new array with a specified length
#constructor=new,&length:int&index:int&chararray:chararray,chararray;Creates the copy of a subarray
#method=cast,verb&to:object,object;Dispatches the verb to the target object with chararray subject
#method=cast,verb&with:object&to:object,object;Dispatches the verb to the target object with chararray subject
#method=chararray,,chararray;Returns itself
#method=clone,,chararray;Creates the object copy
#method=length,,int;Returns the array length
#method=read,&index:int&length:int&chararray:chararray;Copies a sub array to the provided one at the specified position
#method=read,&index:int&out'char:char;Reads a character value at the specified position and saves it into an output variable
#method=write,&index:int&char:char;Writes a character value at the specified position
#method=write,&index:int&length:int&chararray:chararray;Copies the array at the specified position
