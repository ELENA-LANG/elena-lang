[#general#]
#name=system
#shortdescr=Contains the basic functionality

[#list#]
Array
ArrayIterator
BaseValue
BaseNumber
Boolean
BreakException
ByteArray
CharValue
control
EAction
EFunction
EIntConvertor
EIntNumber
ELiteralConvertor
ELongConvertor
emptyLiteralValue
EReal
ERealConvertor
Exception
Extension
false
FormatException
IntBaseNumber
Integer
IntNumber
InvalidArgumentException
LiteralIterator
LiteralValue
Long
LongNumber
mathOp
nil
Object
OutOfRangeException
Real
RealNumber
RoleList
String
true
Variable
Variant
Wrap

[Object]
#title=Class Object
#shortdescr=A common ancestor
#protocol=object
#method=equal,object,bool;Returns true if the specified object is equal to the current object; otherwise, false.<br/>By default compares the object references.
#method=equal,&type'object:type_object,bool;Returns true if the specified object instances are equal; otherwise, false.
#method=notequal,object,bool;Returns false if the specified object is equal to the current object; otherwise, true.<br/>By default compares the object references.

[nil]
#title=Symbol nil
#shortdescr=A nil value symbol
#protocol=object
#method=equal,object,bool;Returns true if the specified object is nil; otherwise, false.

[true]
#title=Symbol true
#shortdescr=A true value symbol
#protocol=object
#protocol=bool
#method=and,object,bool;Executes logical AND operation
#method=and,&action:bool_action,bool;Executes logical AND operation with a boolean expression
#method=and,&bool:bool,bool;Executes logical AND operation with a boolean value
#method=and,&type'int:type_int,bool;Executes logical AND operation with an integer value
#method=else,action;Always returns nil.
#method=equal,object,bool;Determines whether the specified object is equal to the current object boolean value / expression.
#method=equal,&action:bool_action,bool;Determines whether the specified object is equal to the current object boolean expression.
#method=equal,&bool:bool,bool;Determines whether the specified object is equal to the current object boolean value.
#method=not,,bool;Always returns false.
#method=Literal,,type_widestr;Returns literal representation.
#method=or,object,bool;Executes logical OR operation<br/>Always return true
#method=then,action;Executes the action;
#method=then,action&else:action;Executes then-action;
#method=xor,object,bool;Executes logical XOR operation
#method=xor,&action:bool_action,bool;Executes logical XOR operation with a boolean expression
#method=xor,&bool:bool,bool;Executes logical XOR operation with a boolean value

[false]
#title=Symbol false
#shortdescr=A false value symbol
#protocol=object
#protocol=bool
#method=and,object,bool;Executes logical AND operation<br/>Always return false
#method=and,&action:bool_action,bool;Executes logical AND operation with a boolean expression
#method=else,action;Executes the action;
#method=equal,object,bool;Determines whether the specified object is equal to the current object boolean value / expression.
#method=equal,&action:bool_action,bool;Determines whether the specified object is equal to the current object boolean expression.
#method=equal,&bool:bool,bool;Determines whether the specified object is equal to the current object boolean value.
#method=Literal,,type_widestr;Returns literal representation.
#method=not,,bool;Always returns false.
#method=or,object,bool;Executes logical OR operation
#method=or,&action:bool_action,bool;Executes logical OR operation with a boolean expression
#method=then,action;Always returns nil.
#method=then,action&else:action;Executes else-action;
#method=xor,object,bool;Executes logical XOR operation
#method=xor,&action:bool_action,bool;Executes logical XOR operation with a boolean expression
#method=xor,&bool:bool,bool;Executes logical XOR operation with a boolean value

[BreakException]
#title=Class BreakException
#shortdescr=A break exception
#parent=system.html#Object:system'Object
#field=theResult
#method=stop,,;Returns the result

[EAction]
#title=Class EAction
#shortdescr=An action role
#parent=system.html#Object:system'Object
#protocol=action
#method=run,&if:bool;Executes the action while the parameter is true
#method=run,&until:bool;Executes the action while the parameter is false

[EFunction]
#title=Class EFunction
#shortdescr=A function role
#parent=system.html#Object:system'Object
#protocol=function
#method=reverse,&for:numeric_variable&from:numeric_value&till:numeric_value&by:numeric_value,;Iterates the code for the specified range [till,from) in the reverse order
#method=reverse,&for:numeric_variable&from:numeric_value&to:numeric_value&by:numeric_value,;Iterates the code for the specified range [to,from] in the reverse order
#method=run,&each:enumerator,object;Executes the function code for every enumeration value
#method=run,&each:enumerator&where:bool_function,object;Executes the function code for every enumeration value satisfying the condition
#method=run,&for:numeric_variable&from:numeric_value&till:numeric_value&by:numeric_value,;Iterates the code for the specified range [from,till)
#method=run,&for:numeric_variable&from:numeric_value&to:numeric_value&by:numeric_value,;Iterates the code for the specified range [from,to]

[control]
#title=Symbol control
#shortdescr=A control helper symbol
#method=do,action;Executes the action
#method=do,action&until:bool_action;Executes the action until the condition is met
#method=for,numeric_variable&from:numeric_value&backTo:numeric_value&by:numeric_value&do:function,;Iterates the function for the specified range [from,to] in the reverse order
#method=for,numeric_variable&from:numeric_value&to:numeric_value&by:numeric_value&do:function,;Iterates the function for the specified range [from,to]
#method=foreach,enumerable&do:function;Executes the function for each collection member
#method=foreach,enumerable&until:bool_function,;Enumerates the collection until the member meet the condition and return it; otherwise, return nil.
#method=from,numeric_value&backTo:numeric_value&do:function,;Iterates the function for the specified range [from,to] in the reverse order with step equals to 1.
#method=from,numeric_value&till:numeric_value&do:function,;Iterates the function for the specified range [from,till) with step equals to 1.
#method=from,numeric_value&to:numeric_value&do:function,;Iterates the function for the specified range [from,to] with step equals to 1.
#method=while,bool_action;Evaluates the boolean expression while it is true
#method=while,bool_action&do:action;Evaluates action while the boolean expression is true

[BaseValue]
#title=Class BaseValue
#shortdescr=A base value class
#protocol=value
#parent=system.html#Object:system'Object
#method=equal,value,bool;Compares the values
#method=greater,value,bool;Compares the values
#method=less,value,bool;Compares the values
#method=notequal,value,bool;Compares the values
#method=notgreater,value,bool;Compares the values
#method=notless,value,bool;Compares the values

[BaseNumber]
#title=Class BaseNumber
#shortdescr=A base numeric value class
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#method=add,numeric_value,numeric_value;Adds the values
#method=divide,numeric_value,numeric_value;Divuides the values
#method=multiply,numeric_value,numeric_value;Divides the values
#method=subtract,numeric_value,numeric_value;Subtracts the values

[IntBaseNumber]
#title=Class IntBaseNumber
#shortdescr=A base integer value class
#protocol=numeric_value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#method=allMask,numeric_value,bool;Returns true if all the mask bits are set
#method=and,numeric_value,numeric_value;Execute bitwise AND operation
#method=anyMask,numeric_value,bool;Returns true if any of the mask bits are set
#method=or,numeric_value,numeric_value;Execute bitwise OR operation
#method=xor,numeric_value,numeric_value;Execute bitwise XOR operation

[IntNumber]
#title=Class IntNumber
#shortdescr=An integer value class
#protocol=numeric_value
#protocol=type_int
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseNumber:system'BaseIntNumber
#constructor=new,,type_int;Creates the object with zero value
#constructor=new,&type'int:type_int,type_int;Creates the object with specified value
#method=add,&type'int:type_int,type_int;Returns the sum of integers
#method=add,&type'long:type_long,type_long;Returns the sum of integers
#method=add,&type'real:type_real,type_real;Returns the sum
#method=and,&type'int:type_int,type_int;Returns the result of bitwise AND operation
#method=divide,&type'int:type_int,type_int;Returns the result of integer division
#method=divide,&type'long:type_long,type_long;Returns the result of integer division
#method=divide,&type'real:type_real,type_real;Returns the result of division
#method=equal,&type'int:type_int,bool;Compares the integer value
#method=equal,&type'long:type_long,bool;Compares the integer value
#method=less,&type'int:type_int,bool;Compares the integer value
#method=less,&type'long:type_long,bool;Compares the integer value
#method=Literal,,type_widestr;Returns the literal presentation
#method=multiply,&type'int:type_int,type_int;Returns the product of integers
#method=multiply,&type'long:type_long,type_long;Returns the product of integers
#method=multiply,&type'real:type_real,type_real;Returns the product
#method=not,,type_int;Bitwise inversion
#method=notless,&type'int:type_int,bool;Compares the integer value
#method=Negative,,type_int;Negates the value
#method=or,&type'int:type_int,type_int;Returns the result of bitwise OR operation
#method=shift,type_int,type_int;Bitwide shift operation
#method=subtract,&type'int:type_int,type_int;Returns the difference of integers
#method=subtract,&type'long:type_long,type_long;Returns the difference of integers
#method=subtract,&type'real:type_real,type_real;Returns the difference
#method=type'index,,type_int;Returns itself
#method=type'int,,type_int;Returns itself
#method=xor,&type'int:type_int,type_int;Returns the result of bitwise XOR operation

[LongNumber]
#title=Class LongNumber
#shortdescr=A long integer value class
#protocol=numeric_value
#protocol=type_long
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseNumber:system'BaseIntNumber
#constructor=new,,type_long;Creates the object with zero value
#constructor=new,&type'int:type_int,type_long;Creates the object with specified value
#constructor=new,&type'long:type_long,type_long;Creates the object with specified value
#method=add,&type'int:type_int,type_long;Returns the sum of integers
#method=add,&type'long:type_long,type_long;Returns the sum of integers
#method=add,&type'real:type_real,type_real;Returns the sum
#method=and,&type'long:type_long,type_long;Returns the result of bitwise AND operation
#method=divide,&type'int:type_int,type_long;Returns the result of integer division
#method=divide,&type'long:type_long,type_long;Returns the result of integer division
#method=divide,&type'real:type_real,type_real;Returns the result of division
#method=equal,&type'int:type_int,bool;Compares the integer value
#method=equal,&type'long:type_long,bool;Compares the integer value
#method=less,&type'int:type_int,bool;Compares the integer value
#method=less,&type'long:type_long,bool;Compares the integer value
#method=Literal,,type_widestr;Returns the literal presentation
#method=multiply,&type'int:type_int,type_long;Returns the product of integers
#method=multiply,&type'long:type_long,type_long;Returns the product of integers
#method=multiply,&type'real:type_real,type_real;Returns the product
#method=Negative,,type_long;Negates the value
#method=not,,type_long;Bitwise inversion
#method=notless,&type'long:type_int,bool;Compares the integer value
#method=or,&type'long:type_long,type_long;Returns the result of bitwise OR operation
#method=shift,type_int,type_long;Bitwide shift operation
#method=subtract,&type'int:type_int,type_long;Returns the difference of integers
#method=subtract,&type'long:type_long,type_long;Returns the difference of integers
#method=subtract,&type'real:type_real,type_real;Returns the difference
#method=type'long,,type_long;Returns itself
#method=xor,&type'long:type_long,type_long;Returns the result of bitwise XOR operation

[RealNumber]
#title=Class RealNumber
#shortdescr=A float numeric value class
#protocol=numeric_value
#protocol=type_real
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseNumber:system'BaseIntNumber
#constructor=new,,type_real;Creates the object with zero value
#constructor=new,&type'int:type_int,type_real;Creates the object with specified value
#constructor=new,&type'long:type_long,type_real;Creates the object with specified value
#constructor=new,&type'real:type_real,type_real;Creates the object with specified value
#method=add,&type'int:type_int,type_real;Returns the sum of numbers
#method=add,&type'real:type_real,type_real;Returns the sum of numbers
#method=divide,&type'int:type_int,type_real;Returns the result of the division
#method=divide,&type'real:type_real,type_real;Returns the result of division
#method=equal,&type'real:type_real,bool;Compares the integer value
#method=less,&type'real:type_real,bool;Compares the integer value
#method=Literal,,type_widestr;Returns the literal presentation
#method=notless,&type'real:type_real,bool;Compares the integer value
#method=multiply,&type'int:type_int,type_real;Returns the product of numbers
#method=multiply,&type'real:type_real,type_real;Returns the product
#method=subtract,&type'int:type_int,type_real;Returns the difference of integers
#method=subtract,&type'real:type_real,type_real;Returns the difference
#method=type'real,,type_real;Returns itself

[CharValue]
#title=Class RealNumber
#shortdescr=A float numeric value class
#protocol=value                                                                             
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#constructor=new,,value;Creates the object with zero value
#constructor=new,object,value;Creates the object with specified value
#constructor=new,type_int,value;Creates the object with specified numeric value
#constructor=new,&widechar:value,value;Creates the object with specified value
#method=widechar,,value;Returns itself
#method=equal,&type'int:type_int,bool;Compares the value with numeric value
#method=equal,&widechar:value,bool;Compares the value with value
#method=less,&type'int:type_int,bool;Compares the value with numeric value
#method=less,&widechar:value,bool;Compares the value with value
#method=Literal,,type_widestr;Returns the literal value
#method=notless,&type'int:type_int,bool;Compares the value with numeric value
#method=notless,&widechar:value,bool;Compares the value with value
#method=Number,,type_int;Returns the numeric value

[emptyLiteralValue]
#title=Symbol emptyLiteralValue
#shortdescr=An empty literal value
#protocol=type_widestr
#method=add,object,type_widestr;Returns the parameter literal value
#method=add,&type'widestr:type_widestr,type_widestr;Returns the parameter
#method=equal,&type'widestr:type_widestr,bool;Compares with literal value
#method=Length,,type_int;Returns 0
#method=less,&type'widestr:type_widestr,bool;Compares with literal value
#method=Literal,,type_widestr;Returns empty literal value
#method=notless,&type'widestr:type_widestr,bool;Compares with literal value
#method=type'widestr,,type_widestr;Returns empty literal value                                            

[LiteralIterator]
#title=Class LiteralIterator
#shortdescr=A literal value iterator
#parent=system.html#Object:system'Object
#protocol=enumerator
#field=theIndex;The current index
#field=theLiteral;The target
#constructor=new,&type'widestr:type_widestr,enumerator;Returns the parameter iterator
#method=append,&type'index:type_int;Increaments the index by specified value
#method=Available,,bool;Returns false if the index out of range
#method=get,,value;Returns the current character
#method=EOF,,bool;Returns true if the index out of range
#method=Index,,type_int;Returns the index value.
#method=next,,bool;Goes to the next character and returns true if the index is not out of range
#method=reset,,;Resets the enumerator
#method=type'index,,type_int;Returns the index value.
#method=write,&type'index:type_int;Sets the index by specified value

[LiteralValue]
#title=Class LiteralValue
#shortdescr=A wide literal value
#protocol=enumerable
#protocol=type_widestr
#protocol=value
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#constructor=new,&type'length:type_int,type_widestr;Creates the literal string with specified length
#constructor=new,&type'length:type_int&type'widestr:type_widestr,type_widestr;Creates the literal string with specified length and copies the parameter value
#constructor=new,&type'length:type_int&type'widestr:type_widestr&type'widestr:type_widestr,type_widestr;Concatinates the literal values
#constructor=new,&type'length:type_int&widechar:value,type_widestr;Creates the literal string with specified length fills with spciefied character value
#method=add,object,type_widestr;Concatinates the values
#method=add,&type'widestr:type_widestr,type_widestr;Concatinates the values
#method=add,&widechar:value,type_widestr;Concatinates the values
#method=delete,&type'index:type_int&type'length:type_int,type_widestr;Deletes the substring from the object and returns the new one
#method=Enumerator,,enumerator;Returns the object enumerator
#method=equal,&type'widestr:type_widestr,bool;Compares the values
#method=equal,&widchar:value,bool;Compares the values
#method=getAt,object,value;Returns the character with specified index
#method=getAt,&type'index:type_int&out'type'short:type_short;Copies the character value to the stack allocated variable
#method=indexOf,&type'index:type_int&type'widestr:type_widestr,type_int;Returns the index of the first occurence of the specified substring.<br/>If the substring is not found. returns -1
#method=indexOf,&type'index:type_int&type'widestr:type_widestr&out'type'int:type_int;Copies the index of the first occurence of the specified substring to the stack allocated variable.<br/>If the substring is not found. returns -1
#method=indexOf,&type'widestr:type_widestr,type_int;Returns the index of the first occurence of the specified substring.<br/>If the substring is not found. returns -1
#method=insert,&type'index:type_int&type'widestr:type_widestr,type_widestr;Inserts the substring into and returns the new one
#method=Literal,,type_widestr;Returns itself
#method=Length,,type_int;Returns the string length
#method=less,&type'widestr:type_widestr,bool;Compares the values
#method=less,&widchar:value,bool;Compares the values
#method=notless,&type'widestr:type_widestr,bool;Compares the values
#method=Substring,&type'index:type_int,type_widestr;Returns the substring
#method=Substring,&type'index:type_int&type'length:type_int,type_widestr;Returns the substring
#method=type'length,,type_int;Returns the string length
#method=type'widestr,,type_widestr;Returns itself

[Integer]
#title=Class Integer
#shortdescr=An integer variable class
#protocol=type_int
#protocol=numeric_variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseNumber:system'BaseIntNumber
#parent=system.html#IntNumber:system'IntNumber
#constructor=new,numeric_value,numeric_variable;Creates an integer variable with specified value
#method=append,numeric_value;Appends the integer value
#method=append,&type'int:type_int;Appends the integer value
#method=divideInto,numeric_value;Divides into the integer value
#method=divideInto,&type'int:type_int;Divides into the integer value
#method=multiplyBy,numeric_value;Multiplies by the integer value
#method=multiplyBy,&type'int:type_int;Multiplies by the integer value
#method=Number,,type_int;Returns the integer value
#method=reduce,numeric_value;Reduces the integer value
#method=reduce,&type'int:type_int;Reduces the integer value
#method=write,numeric_value;Copies the integer value
#method=write,&type'int:type_int;Copies the integer value

[Long]
#title=Class Long
#shortdescr=A long integer variable class
#protocol=type_long
#protocol=numeric_variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseNumber:system'BaseIntNumber
#parent=system.html#LongNumber:system'LongNumber
#method=append,numeric_value;Appends the integer value
#method=append,&type'int:type_int;Appends the integer value
#method=append,&type'long:type_long;Appends the integer value
#method=divideInto,numeric_value;Divides into the integer value
#method=divideInto,&type'int:type_int;Divides into the integer value
#method=divideInto,&type'long:type_long;Divides into the integer value
#method=multiplyBy,numeric_value;Multiplies by the integer value
#method=multiplyBy,&type'int:type_int;Multiplies by the integer value
#method=multiplyBy,&type'long:type_long;Multiplies by the integer value
#method=Number,,type_long;Returns the integer value
#method=reduce,numeric_value;Reduces the integer value
#method=reduce,&type'int:type_int;Reduces the integer value
#method=reduce,&type'long:type_long;Reduces the integer value
#method=write,numeric_value;Copies the integer value
#method=write,&type'long:type_long;Copies the integer value

[Real]
#title=Class Real
#shortdescr=A real number variable class
#protocol=type_real
#protocol=numeric_variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#parent=system.html#BaseNumber:system'BaseNumber
#parent=system.html#BaseNumber:system'BaseIntNumber
#parent=system.html#RealNumber:system'RealNumber
#constructor=new,numeric_value,numeric_variable;Creates a real number variable with specified value
#method=append,numeric_value;Appends the numeric value
#method=append,&type'int:type_int;Appends the integer value
#method=append,&type'real:type_real;Appends the real number value
#method=divideInto,numeric_value;Divides into the numeric value
#method=divideInto,&type'int:type_int;Divides into the integer value
#method=divideInto,&type'real:type_real;Divides into the numeric real value
#method=multiplyBy,numeric_value;Multiplies by the numeric value
#method=multiplyBy,&type'int:type_int;Multiplies by the integer value
#method=multiplyBy,&type'real:type_real;Multiplies by the real numeric value
#method=Number,,type_real;Returns the real number value
#method=reduce,numeric_value;Reduces the numeric value
#method=reduce,&type'int:type_int;Reduces the integer value
#method=reduce,&type'real:type_real;Reduces by the real numeric value
#method=write,numeric_value;Copies the numeric value
#method=write,&type'real:type_real;Copies the real number value
#method=write,&type'int:type_int;Copies the integer value

[String]
#title=Class String
#shortdescr=A wide literal variable
#protocol=enumerable
#protocol=type_widestr
#protocol=value
#protocol=variable
#parent=system.html#Object:system'Object
#parent=system.html#BaseValue:system'BaseValue
#field=theValue;The literal value
#constructor=new,,variable;Creates an empty literal variable 
#constructor=new,value,variable;Creates a literal variable with specified value
#method=append,value,;Appends the value
#method=clear,,;Clears the variable value
#method=delete,&type'index:type_int&type'length:type_int,;Deletes a sub string
#method=insert,&type'index:type_int&type'widestr:type_widestr,;Inserts a sub string
#method=write,value,;Writes the value
#method=write,&type'widestr:type_widestr,;Writes the value

[Boolean]
#title=Class Booleab
#shortdescr=A boolean variable
#protocol=value
#protocol=variable
#constructor=new,value,variable;Creates a boolean variable with specified value
#method=equal,value,bool;Compares the value
#method=invert,,;Inverts the boolean value
#method=Value,,bool;Returns the boolean value
#method=write,value,;Writes the value

[ArrayIterator]
#title=Class ArrayIterator
#shortdescr=An array iterator
#parent=system.html#Object:system'Object
#protocol=enumerator
#field=theArray;The array
#field=theCount;The array length
#field=theIndex;The current index
#constructor=new,&type'array:type_array,enumerator;Returns the parameter iterator
#method=append,&type'index:type_int;Increaments the index by specified value
#method=EOF,,bool;Returns true if the index out of range
#method=get,,value;Returns the current array elemenent
#method=Index,,type_int;Returns the index value.
#method=next,,bool;Goes to the next character and returns true if the index is not out of range
#method=reset,,;Resets the enumerator
#method=set,&type'index:type_int;Sets the index by specified value
#method=set,value;Sets the current array element
#method=type'index,,type_int;Returns the index value.

[Array]
#title=Class Array
#shortdescr=An array
#protocol=enumerable
#protocol=type_array
#parent=system.html#Object:system'Object
#constructor=new,&type'length:type_int,type_array;Creates the array with specified length
#constructor=new,&type'length:type_int&function:function,type_array;Creates the array with specified length and initializes it with the function
#method=add,object,type_arraz;Concatinates the arrays
#method=add,&type'array:type_array,type_array;Concatinates the arrays
#method=Clone,,type_array;Returns the array length
#method=Count,,type_int;Returns the shallow array copy
#method=Enumerator,,enumerator;Returns the object enumerator
#method=getAt,object,object;Returns the array element at the specified position
#method=getAt,&type'index:type_int,object;Returns the array element at the specified position
#method=setAt,object:object;Sets the array element at the specified position
#method=setAt,&type'index:type_int&type'object:object;Sets the array element at the specified position
#method=type'length,,type_int;Returns the array length

[ELiteralConvertor]
#title=Class ELiteralConvertor
#shortdescr=A literal convertor role
#parent=system.html#Object:system'Object
#method=read,&type'int,type_int;Converts the extended literal value to an integer value
#method=read,&type'long,type_long;Converts the extended literal value to a long integer value
#method=read,&type'real,type_real;Converts the extended literal value to a real numeric value

[EIntConvertor]
#title=Class EIntConvertor
#shortdescr=An integer value convertor role
#parent=system.html#Object:system'Object
#method=read,&type'widestr,type_widestr;Converts the extended integer value to a literal value

[ELongConvertor]
#title=Class ELongConvertor
#shortdescr=A long integer value convertor role
#parent=system.html#Object:system'Object
#method=read,&type'widestr,type_widestr;Converts the extended long integer value to a literal value

[ERealConvertor]
#title=Class ERealConvertor
#shortdescr=A real numeric value convertor role
#parent=system.html#Object:system'Object
#method=read,&type'widestr,type_widestr;Converts the extended real number to a literal value

[Variant]
#title=Class Variant
#shortdescr=A variant
#parent=system.html#Object:system'Object
#parent=system.html#String:system'String
#protocol=type_int
#protocol=type_long
#protocol=type_real
#protocol=type_widestr
#method=type'int,,type_int;Tries to convert the literal value to an integer value
#method=type'long,,type_long;Tries to convert the literal value to a long integer value
#method=type'real,,type_real;Tries to convert the literal value to a real numeric value

[Variable]
#title=Class Variable
#shortdescr=A generic variable
#parent=system.html#Object:system'Object
#protocol=variable
#protocol=numeric_variable
#constructor=new,value,numeric_variable;Creates a variable with specified value
#method=append,value;Appends the value
#method=divideInto,value;Divides into the value
#method=get,,value;Returns the value
#method=multiplyBy,value;Multiplies by the value
#method=reduce,value;Substract the value
#method=write,value;Writes the value

[mathOp]
#title=Symbol mathOp
#shortdescr=A mathematical operation helper
#method=Abs,&type'real:type_real&out'type'real:type_real;Copies the absolute value into the output parameter<br/>Should not be used stand-alone
#method=Exp,&type'real:type_real&out'type'real:type_real;Copies e raised to the specified power into the output parameter<br/>Should not be used stand-alone
#method=Ln,&type'real:type_real&out'type'real:type_real;Copies the natural logaritm into the output parameter<br/>Should not be used stand-alone
#method=Round,&type'real:type_real&out'type'real:type_real;Copies rounded to the nearest integral value into the output parameter<br/>Should not be used stand-alone
#method=Truncate,&type'real:type_real&out'type'real:type_real;Copies the integer part to the output parameter<br/>Should not be used stand-alone

[EIntNumber]
#title=Class EIntNumber
#shortdescr=An integer arithmerical role
#parent=system.html#Object:system'Object
#method=mod,type_int,type_int;Returns the remainder after dividing the object by the parameter.
#method=power,type_int,type_int;Returns the power of the operand.

[EReal]
#title=Class EReal
#shortdescr=A real arithmerical role
#method=Abs,,type_real;Returns the absolute value.
#method=Exp,,type_real;Returns e raised to the specified power
#method=Frac,,type_real;Returns the fraction part
#method=Int,,type_real;Returns the integer part
#method=Ln,,type_real;Returns the natural logaritm
#method=Round,,type_real;Rounds to the nearest integral value

[ByteArray]
#title=Class ByteArray
#shortdescr=A byte array
#protocol=type_bytearray
#parent=system.html#Object:system'Object
#constructor=new,&type'length:type_int,type_bytearray;Creates the byte array with specified length
#method=indexOf,&type'index:type_int&type'length:type_int&type'byte:type_byte&out'type'int:type_int;Returns the index of the first occurence of the specified byte.<br/>If the substring is not found. returns -1
#method=indexOf,&type'index:type_int&type'length:type_int&type'short:type_short&out'type'int:type_int;Returns the index of the first occurence of the specified word.<br/>If the substring is not found. returns -1
#method=Length,,type_int;Returns the byte array length
#method=read,&type'index:type_int&type'length:type_int&type'bytearray:type_bytearray;Reads the byte array from the specified position
#method=type'bytearray,,type_bytearray;Returns itself
#method=type'length,,type_int;Returns the byte array length
#method=write,&type'index:type_int&type'length:type_int&type'bytearray:type_bytearray;Copies the byte array into specified position
#method=write,&type'index:type_int&&type'widestr:type_widestr;Copies the string into specified position

[Exception]
#title=Class Exception
#shortdescr=An exception base class
#parent=system.html#Object:system'Object
#field=theMessage;The exception message
#constructor=new,type_widestr;Creates an exception with a specified message
#method=Literal,,type_widestr;Returns the exception literal presentation
#method=Message,,type_widestr;Returns the exception message

[FormatException]
#title=Class FormatException
#shortdescr=A format exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates an exception
#method=onFormatError,function;Executes the exception handler

[OutOfRangeException]
#title=Class OutOfRangeException
#shortdescr=An out of range exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates an exception
#method=onOutOfRangeError,function;Executes the exception handler

[InvalidArgumentException]
#title=Class InvalidArgumentException
#shortdescr=An invalid argument exception
#parent=system.html#Object:system'Object
#parent=system.html#Exception:system'Exception
#constructor=new,,;Creates an exception
#method=onInvalidArgumentError,function;Executes the exception handler

[Wrap]
#title=Class Wrap
#shortdescr=A wrap group object
#parent=system.html#Object:system'Object
#field=theRole;The wrapper role
#field=theObject;The wrapper content

[Extension]
#title=Class Extension
#shortdescr=An extension group object
#parent=system.html#Object:system'Object
#field=theExtender;The extending role
#field=theObject;The extender content

[RoleList]
#title=Class RoleList
#shortdescr=A role list
#parent=system.html#Object:system'Object
