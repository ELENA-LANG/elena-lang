[#general#]
#name=std'basic                                              
#shortdescr=Provides classes that describe the basic data types.

[#list#]
array
arrayindexer
arraytype
boolean
char
charvalue
chartype
convertors
eintconvertor
einteger
eliteral
eliteralconvertor
elong
elongconvertor
enumindexerproxy
ereal
erealconvertor
false
indexer
integer
integernumber
integertype
intnumber
literal
literalindexer
literaltype
longinteger
longnumber
longtype
magnitude
numeric
nilvalue
real
realnumber
realtype
string
stringindexer
stringwriter
true
variable
variantvalue

[magnitude]
#title=Class Magnitude
#shortdescr=An abstract class Magnitude
#parent=elena.html#object:object
#protocol=magnitude
#method===,value,bool;Returns <b>true</b> if the object value is equal to the parameter otherwise <b>false</b>.
#method=!=,value,bool;Returns <b>true</b> if the object value is not equal to the parameter otherwise <b>false</b>.
#method=>,magnitude,bool;Returns <b>true</b> if the object value is greater than the parameter otherwise <b>false</b>.
#method=<,magnitude,bool;Returns <b>true</b> if the object value is less than the parameter otherwise <b>false</b>.
#method=>=,magnitude,bool;Returns <b>true</b> if the object value is greater or equal to the parameter otherwise <b>false</b>.
#method=<=,magnitude,bool;Returns <b>true</b> if the object value is less or equal to the parameter otherwise <b>false</b>.
#method=*equal,object;Fails if the object is not equal to the operand.<br/><b>Should be overridden.</b>
#method=*less,object;Fails if the object bigger or equal to the operand.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#proxy">proxy'equal</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'less</a>,container;Redirects the message to the container content

[numeric]
#title=Class Numeric
#shortdescr=An abstract class Numeric
#protocol=arithmetic
#protocol=magnitude
#parent=elena.html#object:object
#parent=magnitude:std'basic'Magnitude
#method===,value,bool;Returns <b>true</b> if the object value is equal to the parameter otherwise <b>false</b>.
#method=!=,value,bool;Returns <b>true</b> if the object value is not equal to the parameter otherwise <b>false</b>.
#method=>,magnitude,bool;Returns <b>true</b> if the object value is greater than the parameter otherwise <b>false</b>.
#method=<,magnitude,bool;Returns <b>true</b> if the object value is less than the parameter otherwise <b>false</b>.
#method=>=,magnitude,bool;Returns <b>true</b> if the object value is greater or equal to the parameter otherwise <b>false</b>.
#method=<=,magnitude,bool;Returns <b>true</b> if the object value is less or equal to the parameter otherwise <b>false</b>.
#method=+,object,object;Returns the sum.
#method=-,object,object;Returns the difference.
#method=*,object,object;Returns the products
#method=/,object,object;Returns the fraction.
#method=<a href="stddictionary.html#int">int'add</a>,int,int;Converts the object value to the integer and returns a sum of the two integer numbers.
#method=<a href="stddictionary.html#int">int'divide</a>,int,int;Converts the object value to the integer and returns a result of the integer division.
#method=<a href="stddictionary.html#int">int'equal</a>,int;Converts the object value to the integer and fails if the integer is not equal to the opernand
#method=<a href="stddictionary.html#int">int'less</a>,int;Converts the object value to the integer and fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#int">int'multiply</a>,int,int;Converts the object value to the integer and returns a product of the two integer number.
#method=<a href="stddictionary.html#int">int'subtract</a>,int,int;Converts the object value to the integer and returns a difference between the two integer number.
#method=<a href="stddictionary.html#long">long'add</a>,long,long;Converts the object value to the long integer and returns a sum of the two long integer numbers.
#method=<a href="stddictionary.html#long">long'divide</a>,long,long;Converts the object value to the long integer and returns a result of the long integer division.
#method=<a href="stddictionary.html#long">long'equal</a>,long;Converts the object value to the long integer and fails if the long integer is not equal to the opernand
#method=<a href="stddictionary.html#long">long'less</a>,long;Converts the object value to the long integer and fails if the long integer bigger or equal to the operand
#method=<a href="stddictionary.html#long">long'multiply</a>,long,long;Converts the object value to the long integer and returns a product of the two long integer number.
#method=<a href="stddictionary.html#long">long'subtract</a>,long,long;Converts the object value to the long integer and returns a difference between the two long integer number.
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'divide</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'equal</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'less</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'multiply</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'subtract</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#real">real'add</a>,real,real;Converts the object value to the real and returns a sum of the two real numbers.
#method=<a href="stddictionary.html#real">real'divide</a>,real,real;Converts the object value to the real and returns a fraction of the two real numbers.
#method=<a href="stddictionary.html#real">real'equal</a>,real;Converts the object value to the real and fails if the real is not equal to the opernand
#method=<a href="stddictionary.html#real">real'less</a>,real;Converts the object value to the real and fails if the real bigger or equal to the operand
#method=<a href="stddictionary.html#real">real'multiply</a>,real,real;Converts the object value to the real and returns a product of the two real number.
#method=<a href="stddictionary.html#real">real'subtract</a>,real,real;Converts the object value to the real and returns a difference between the two real number.

[integernumeric]
#title=Class IntegerNumeric
#shortdescr=An abstract class Integer numeric
#protocol=arithmetic
#protocol=magnitude
#parent=elena.html#object:object
#parent=magnitude:std'basic'Magnitude
#parent=numeric:std'basic'Numeric
#method===,value,bool;Returns <b>true</b> if the object value is equal to the parameter otherwise <b>false</b>.
#method=!=,value,bool;Returns <b>true</b> if the object value is not equal to the parameter otherwise <b>false</b>.
#method=>,magnitude,bool;Returns <b>true</b> if the object value is greater than the parameter otherwise <b>false</b>.
#method=<,magnitude,bool;Returns <b>true</b> if the object value is less than the parameter otherwise <b>false</b>.
#method=>=,magnitude,bool;Returns <b>true</b> if the object value is greater or equal to the parameter otherwise <b>false</b>.
#method=<=,magnitude,bool;Returns <b>true</b> if the object value is less or equal to the parameter otherwise <b>false</b>.
#method=+,object,object;Returns the sum.
#method=-,object,object;Returns the difference.
#method=*,object,object;Returns the products
#method=/,object,object;Returns the fraction.
#method=<a href="stddictionary.html#int">int'add</a>,int,int;Converts the object value to the integer and returns a sum of the two integer numbers.
#method=<a href="stddictionary.html#int">int'allmask'if</a>,int;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#int">int'and</a>,int,int;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#int">int'anymask'if</a>,int;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#int">int'divide</a>,int,int;Converts the object value to the integer and returns a result of the integer division.
#method=<a href="stddictionary.html#int">int'equal</a>,int;Converts the object value to the integer and fails if the integer is not equal to the opernand
#method=<a href="stddictionary.html#int">int'less</a>,int;Converts the object value to the integer and fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#int">int'multiply</a>,int,int;Converts the object value to the integer and returns a product of the two integer number.
#method=<a href="stddictionary.html#int">int'not</a>,,int;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#int">int'or</a>,int,int;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#int">int'subtract</a>,int,int;Converts the object value to the integer and returns a difference between the two integer number.
#method=<a href="stddictionary.html#int">int'xor</a>,int,int;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#long">long'add</a>,long,long;Converts the object value to the long integer and returns a sum of the two long integer numbers.
#method=<a href="stddictionary.html#long">long'allmask'if</a>,long;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#long">long'and</a>,long,long;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#long">long'anymask'if</a>,long;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#long">long'divide</a>,long,long;Converts the object value to the long integer and returns a result of the long integer division.
#method=<a href="stddictionary.html#long">long'equal</a>,long;Converts the object value to the long integer and fails if the long integer is not equal to the opernand
#method=<a href="stddictionary.html#long">long'less</a>,long;Converts the object value to the long integer and fails if the long integer bigger or equal to the operand
#method=<a href="stddictionary.html#long">long'multiply</a>,long,long;Converts the object value to the long integer and returns a product of the two long integer number.
#method=<a href="stddictionary.html#long">long'not</a>,,long;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#long">long'or</a>,long,long;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#long">long'subtract</a>,long,long;Converts the object value to the long integer and returns a difference between the two long integer number.
#method=<a href="stddictionary.html#long">long'xor</a>,long,long;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'divide</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'equal</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'less</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'multiply</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'or</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'subtract</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'xor</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#real">real'add</a>,real,real;Converts the object value to the real and returns a sum of the two real numbers.
#method=<a href="stddictionary.html#real">real'divide</a>,real,real;Converts the object value to the real and returns a fraction of the two real numbers.
#method=<a href="stddictionary.html#real">real'equal</a>,real;Converts the object value to the real and fails if the real is not equal to the opernand
#method=<a href="stddictionary.html#real">real'less</a>,real;Converts the object value to the real and fails if the real bigger or equal to the operand
#method=<a href="stddictionary.html#real">real'multiply</a>,real,real;Converts the object value to the real and returns a product of the two real number.
#method=<a href="stddictionary.html#real">real'subtract</a>,real,real;Converts the object value to the real and returns a difference between the two real number.

[indexer]
#title=A class Indexer
#shortdescr=A base array indexer
#protocol=indexer
#parent=elena.html#object:Object
#field=thearray;The array
#field=theindex;The index
#method=<a href="stddictionary.html#array">array'get</a>,,object;Returns the array
#method=<a href="stddictionary.html#index">index'add</a>,int;Increments the object index with provided offset
#method=<a href="stddictionary.html#index">index'get</a>,,int;Returns the current index
#method=<a href="stddictionary.html#index">index'if</a>,int;Fails if the provided index is out of range
#method=<a href="stddictionary.html#index">index'set</a>,int;Sets the current index
#method=<a href="stddictionary.html#index">index'subtract</a>,int;Decrements the object index with provided offset
#method=<a href="stddictionary.html#indexer">indexer'get</a>,,indexer;Returns itself

[enumindexerproxy]
#title=A class EnumIndexerProxy
#shortdescr=A collection indexer
#protocol=indexer
#parent=elena.html#object:Object
#field=thecollection;The collection
#field=theenumerator;The collection enumerator
#field=theindex;The index
#method=new,enumerable;Initializes the adapter
#method=<a href="stddictionary.html#content">content'get</a>,,object;Returns the indexed object
#method=<a href="stddictionary.html#content">content'set</a>,object;Sets the indexed object
#method=<a href="stddictionary.html#index">index'add</a>,object;Adds the offset to the index
#method=<a href="stddictionary.html#index">index'get</a>,,indexer;Returns the current index
#method=<a href="stddictionary.html#index">index'if</a>,int;Fails if the index value is out of the range
#method=<a href="stddictionary.html#index">index'set</a>,object;Sets the current index
#method=<a href="stddictionary.html#index">index'subtract</a>,object;Subtracts the offset to the index
#method=<a href="stddictionary.html#indexer">indexer'get</a>,,indexer;Returns itself
#method=<a href="stddictionary.html#proxy">proxy'ifnotnil</a>,,;Fails if the indexer pointing to nil

[intnumber]
#title=Class IntNumber
#shortdescr=A 32bit Integer value
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#parent=numeric:std'basic'Numeric
#parent=integernumber:std'basic'IntegerNumber
#protocol=arithmetic
#protocol=int
#protocol=long
#protocol=magnitude
#protocol=real
#method===,value,bool;Returns <b>true</b> if the object value is equal to the parameter otherwise <b>false</b>.
#method=!=,value,bool;Returns <b>true</b> if the object value is not equal to the parameter otherwise <b>false</b>.
#method=>,magnitude,bool;Returns <b>true</b> if the object value is greater than the parameter otherwise <b>false</b>.
#method=<,magnitude,bool;Returns <b>true</b> if the object value is less than the parameter otherwise <b>false</b>.
#method=>=,magnitude,bool;Returns <b>true</b> if the object value is greater or equal to the parameter otherwise <b>false</b>.
#method=<=,magnitude,bool;Returns <b>true</b> if the object value is less or equal to the parameter otherwise <b>false</b>.
#method=+,object,object;Returns the sum.
#method=-,object,object;Returns the difference.
#method=*,object,object;Returns the products
#method=/,object,object;Returns the fraction.
#method=clone,,int;Returns the number copy
#method=<a href="stddictionary.html#int">int'add</a>,int,int;Converts the object value to the integer and returns a sum of the two integer numbers.
#method=<a href="stddictionary.html#int">int'allmask'if</a>,int;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#int">int'and</a>,int,int;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#int">int'anymask'if</a>,int;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#int">int'divide</a>,int,int;Converts the object value to the integer and returns a result of the integer division.
#method=<a href="stddictionary.html#int">int'equal</a>,int;Converts the object value to the integer and fails if the integer is not equal to the opernand
#method=<a href="stddictionary.html#int">int'get</a>,,object;Returns the integer
#method=<a href="stddictionary.html#int">int'high'get</a>,,int;Returns the high word.
#method=<a href="stddictionary.html#int">int'less</a>,int;Converts the object value to the integer and fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#int">int'low'get</a>,,int;Returns the low word.
#method=<a href="stddictionary.html#int">int'mod'proceed</a>,int,int;Returns the integer division reminder
#method=<a href="stddictionary.html#int">int'multiply</a>,int,int;Converts the object value to the integer and returns a product of the two integer number.
#method=<a href="stddictionary.html#int">int'not</a>,,int;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#int">int'or</a>,int,int;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#int">int'shift</a>,int,int;Returns the result of bitwise shift
#method=<a href="stddictionary.html#int">int'subtract</a>,int,int;Converts the object value to the integer and returns a difference between the two integer number.
#method=<a href="stddictionary.html#int">int'xor</a>,int,int;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#long">long'add</a>,long,long;Converts the object value to the long integer and returns a sum of the two long integer numbers.
#method=<a href="stddictionary.html#long">long'allmask'if</a>,long;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#long">long'and</a>,long,long;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#long">long'anymask'if</a>,long;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#long">long'divide</a>,long,long;Converts the object value to the long integer and returns a result of the long integer division.
#method=<a href="stddictionary.html#long">long'equal</a>,long;Converts the object value to the long integer and fails if the long integer is not equal to the opernand
#method=<a href="stddictionary.html#long">long'get</a>,,long;Returns the long integer
#method=<a href="stddictionary.html#long">long'less</a>,long;Converts the object value to the long integer and fails if the long integer bigger or equal to the operand
#method=<a href="stddictionary.html#long">long'multiply</a>,long,long;Converts the object value to the long integer and returns a product of the two long integer number.
#method=<a href="stddictionary.html#long">long'not</a>,,long;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#long">long'or</a>,long,long;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#long">long'subtract</a>,long,long;Converts the object value to the long integer and returns a difference between the two long integer number.
#method=<a href="stddictionary.html#long">long'xor</a>,long,long;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#math">math'abs'get</a>,,int;Returns the integer absolute value
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'divide</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'equal</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'less</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'multiply</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'or</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'subtract</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'xor</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#real">real'add</a>,real,real;Converts the object value to the real and returns a sum of the two real numbers.
#method=<a href="stddictionary.html#real">real'divide</a>,real,real;Converts the object value to the real and returns a fraction of the two real numbers.
#method=<a href="stddictionary.html#real">real'equal</a>,real;Converts the object value to the real and fails if the real is not equal to the opernand
#method=<a href="stddictionary.html#real">real'get</a>,,real;Converts the integer to the real number
#method=<a href="stddictionary.html#real">real'less</a>,real;Converts the object value to the real and fails if the real bigger or equal to the operand
#method=<a href="stddictionary.html#real">real'multiply</a>,real,real;Converts the object value to the real and returns a product of the two real number.
#method=<a href="stddictionary.html#real">real'subtract</a>,real,real;Converts the object value to the real and returns a difference between the two real number.

[longnumber]
#title=Class LongNumber
#shortdescr=A 64bit Integer value
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#parent=numeric:std'basic'Numeric
#parent=integernumber:std'basic'IntegerNumber
#protocol=arithmetic
#protocol=int
#protocol=long
#protocol=magnitude
#protocol=real
#method===,value,bool;Returns <b>true</b> if the object value is equal to the parameter otherwise <b>false</b>.
#method=!=,value,bool;Returns <b>true</b> if the object value is not equal to the parameter otherwise <b>false</b>.
#method=>,magnitude,bool;Returns <b>true</b> if the object value is greater than the parameter otherwise <b>false</b>.
#method=<,magnitude,bool;Returns <b>true</b> if the object value is less than the parameter otherwise <b>false</b>.
#method=>=,magnitude,bool;Returns <b>true</b> if the object value is greater or equal to the parameter otherwise <b>false</b>.
#method=<=,magnitude,bool;Returns <b>true</b> if the object value is less or equal to the parameter otherwise <b>false</b>.
#method=+,object,object;Returns the sum.
#method=-,object,object;Returns the difference.
#method=*,object,object;Returns the products
#method=/,object,object;Returns the fraction.
#method=clone,,long;Returns the number copy
#method=<a href="stddictionary.html#int">int'add</a>,int,long;Converts the object value to the integer and returns a sum of the two integer numbers.
#method=<a href="stddictionary.html#int">int'allmask'if</a>,int;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#int">int'and</a>,int,long;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#int">int'anymask'if</a>,int;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#int">int'divide</a>,int,long;Converts the object value to the integer and returns a result of the integer division.
#method=<a href="stddictionary.html#int">int'equal</a>,int;Converts the object value to the integer and fails if the integer is not equal to the opernand
#method=<a href="stddictionary.html#int">int'get</a>,,int;Returns the 32bit integer
#method=<a href="stddictionary.html#int">int'less</a>,int;Converts the object value to the integer and fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#int">int'mod'proceed</a>,int,long;Returns the integer division reminder
#method=<a href="stddictionary.html#int">int'multiply</a>,int,long;Converts the object value to the integer and returns a product of the two integer number.
#method=<a href="stddictionary.html#int">int'not</a>,,int;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#int">int'or</a>,int,long;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#int">int'shift</a>,int,long;Returns the result of bitwise shift
#method=<a href="stddictionary.html#int">int'subtract</a>,int,long;Converts the object value to the integer and returns a difference between the two integer number.
#method=<a href="stddictionary.html#int">int'xor</a>,int,long;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#long">long'add</a>,long,long;Converts the object value to the long integer and returns a sum of the two long integer numbers.
#method=<a href="stddictionary.html#long">long'allmask'if</a>,long;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#long">long'and</a>,long,long;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#long">long'anymask'if</a>,long;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#long">long'divide</a>,long,long;Converts the object value to the long integer and returns a result of the long integer division.
#method=<a href="stddictionary.html#long">long'equal</a>,long;Converts the object value to the long integer and fails if the long integer is not equal to the opernand
#method=<a href="stddictionary.html#long">long'get</a>,,long;Returns the long integer
#method=<a href="stddictionary.html#long">long'high'get</a>,,int;Returns the high double word.
#method=<a href="stddictionary.html#long">long'less</a>,long;Converts the object value to the long integer and fails if the long integer bigger or equal to the operand
#method=<a href="stddictionary.html#long">long'low'get</a>,,int;Returns the low double word.
#method=<a href="stddictionary.html#long">long'mod'proceed</a>,long,long;Returns the integer division reminder
#method=<a href="stddictionary.html#long">long'multiply</a>,long,long;Converts the object value to the long integer and returns a product of the two long integer number.
#method=<a href="stddictionary.html#long">long'not</a>,,long;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#long">long'or</a>,long,long;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#long">long'subtract</a>,long,long;Converts the object value to the long integer and returns a difference between the two long integer number.
#method=<a href="stddictionary.html#long">long'xor</a>,long,long;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#math">math'abs'get</a>,,long;Returns the integer absolute value
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'divide</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'equal</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'less</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'multiply</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'or</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'subtract</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'xor</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#real">real'add</a>,real,real;Converts the object value to the real and returns a sum of the two real numbers.
#method=<a href="stddictionary.html#real">real'divide</a>,real,real;Converts the object value to the real and returns a fraction of the two real numbers.
#method=<a href="stddictionary.html#real">real'equal</a>,real;Converts the object value to the real and fails if the real is not equal to the opernand
#method=<a href="stddictionary.html#real">real'get</a>,,object;Converts the integer to the real number
#method=<a href="stddictionary.html#real">real'less</a>,real;Converts the object value to the real and fails if the real bigger or equal to the operand
#method=<a href="stddictionary.html#real">real'multiply</a>,real,real;Converts the object value to the real and returns a product of the two real number.
#method=<a href="stddictionary.html#real">real'subtract</a>,real,real;Converts the object value to the real and returns a difference between the two real number.

[realnumber]
#title=Class RealNumber
#shortdescr=A 64bit Floating-point value
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#parent=numeric:std'basic'Numeric
#protocol=arithmetic
#protocol=magnitude
#protocol=real
#method===,real,bool;Returns <b>true</b> if the object is equal to the operand otherwise <b>false</b>.
#method=!=,real,bool;Returns <b>true</b> if the object is not equal to the operand otherwise <b>false</b>.
#method=<,real,bool;Returns <b>true</b> if the object is less than the operand otherwise <b>false</b>.
#method=>,real,bool;Returns <b>true</b> if the object is greater than the operand otherwise <b>false</b>.
#method=>=,real,bool;Returns <b>true</b> if the object is greater or equal to the operand otherwise <b>false</b>.
#method=<=,real,bool;Returns <b>true</b> if the object is less or equal to the operand otherwise <b>false</b>.
#method=+,real,real;Returns the sum of two real numbers.
#method=-,real,real;Returns the difference of two real numbers.
#method=*,real,real;Returns the product of two real numbers.
#method=/,real,real;Returns the fraction of two real numbers.
#method=clone,,real;Returns the number copy
#method=<a href="stddictionary.html#int">int'add</a>,int,real;Adds the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#int">int'divide</a>,int,real;Divides the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#int">int'equal</a>,int;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#int">int'less</a>,int;Fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#int">int'multiply</a>,int,real;Multiplies the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#int">int'subtract</a>,int,real;Subtracts the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#long">long'add</a>,long,real;Adds the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#long">long'divide</a>,long,real;Divides the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#long">long'equal</a>,long;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#long">long'less</a>,long;Fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#long">long'multiply</a>,long,real;Multiplies the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#long">long'subtract</a>,long,real;Subtracts the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#real">real'add</a>,real,real;Adds the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#real">real'divide</a>,real,real;Divides the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#real">real'equal</a>,real;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#real">real'get</a>,,object;Returns the real number
#method=<a href="stddictionary.html#real">real'less</a>,real;Fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#real">real'multiply</a>,real,real;Multiplies the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#real">real'subtract</a>,real,real;Subtracts the number.<br/><b>Should be overridden.</b>

[array]
#title=Class Array
#shortdescr=An array class
#parent=elena.html#object:Object
#protocol=array
#protocol=enumerable
#protocol=indexable
#method=@,int,object;Returns the array item at the specified position
#method=@,int,indexer;Returns the array indexer at the specified position
#method=<a href="stddictionary.html#array">array'get</a>,,object;Returns the array
#method=<a href="stddictionary.html#count">count'get</a>,,int;Returns the number of array items
#method=<a href="stddictionary.html#enum">enum'get</a>,,;Returns the object enumerator
#method=<a href="stddictionary.html#indexer">indexer'get</a>,,indexer;Creates the indexer

[literal]
#title=Class Literal
#shortdescr=A Unicode literal constant.
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#protocol=enumerable
#protocol=indexable
#protocol=literal
#protocol=magnitude
#method===,literal,bool;Returns <b>true</b> if the object value is equal to the parameter otherwise <b>false</b>.
#method=!=,literal,bool;Returns <b>true</b> if the object value is not equal to the parameter otherwise <b>false</b>.
#method=>,literal,bool;Returns <b>true</b> if the object value is greater than the parameter otherwise <b>false</b>.
#method=<,literal,bool;Returns <b>true</b> if the object value is less than the parameter otherwise <b>false</b>.
#method=>=,literal,bool;Returns <b>true</b> if the object value is greater or equal to the parameter otherwise <b>false</b>.
#method=<=,literal,bool;Returns <b>true</b> if the object value is less or equal to the parameter otherwise <b>false</b>.
#method=+,object,literal;Returns the concatenated string.
#method=@,int,char;Returns the character at a specified position.
#method=@,int,indexer;Returns the indexer at a specified position.
#method=clone,,literal;Returns the literal string copy
#method=<a href="stddictionary.html#count">count'get,,int;Returns the literal string length
#method=<a href="stddictionary.html#enum">enum'get</a>,,enumerator;Returns the object enumerator
#method=<a href="stddictionary.html#literal">literal'add</a>,literal,literal;Returns the concatenated string.
#method=<a href="stddictionary.html#literal">literal'equal</a>,literal;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#literal">literal'get</a>,,object;Returns the literal value
#method=<a href="stddictionary.html#literal">literal'less</a>,literal;Fails if the object bigger or equal to the opernand.
#method=<a href="stddictionary.html#indexer">indexer'get</a>,,indexer;Creates the literal indexer

[charvalue]
#title=Class CharValue
#shortdescr=A literal character value.
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#parent=numeric:std'basic'Numeric
#protocol=char
#protocol=int
#protocol=literal
#protocol=magnitude
#protocol=printable
#method===,char,bool;Returns <b>true</b> if the object is equal to the operand otherwise <b>false</b>.
#method=!=,char,bool;Returns <b>true</b> if the object is not equal to the operand otherwise <b>false</b>.
#method=>,char,bool;Returns <b>true</b> if the object is greater than the operand otherwise <b>false</b>.
#method=<,char,bool;Returns <b>true</b> if the object is less than the operand otherwise <b>false</b>.
#method=>=,char,bool;Returns <b>true</b> if the object is greater or equal to the operand otherwise <b>false</b>.
#method=<=,char,bool;Returns <b>true</b> if the object is less or equal to the operand otherwise <b>false</b>.
#method=+,object,char;Returns the sum.
#method=-,object,int;Returns the difference.
#method=clone,,char;Returns the object copy
#method=<a href="stddictionary.html#char">char'equal</a>,char;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#char">char'get</a>,,char;Returns the character
#method=<a href="stddictionary.html#char">char'less</a>,char;Fails if the object bigger or equal to the opernand.
#method=<a href="stddictionary.html#char">char'subtract</a>,char,int;Returns the diffrence between character numereric values
#method=<a href="stddictionary.html#count">count'get</a>,,int;Returns 1.
#method=<a href="stddictionary.html#int">int'add</a>,int,char;Adds the number to the character numeric value and returns the result as a character
#method=<a href="stddictionary.html#int">int'equal</a>,int;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#int">int'get</a>,,int;Returns the integer containing the character numeric value
#method=<a href="stddictionary.html#int">int'less</a>,int;Fails if the object bigger or equal to the opernand.
#method=<a href="stddictionary.html#literal">literal'get</a>,,literal;Returns the literal value
#method=<a href="stddictionary.html#printer">printer'write</a>,printer;Prints the literal value

[true]
#title=Symbol True
#shortdescr=A true boolean value
#protocol=bool
#protocol=magnitude
#protocol=printable
#method=?,,;Always succeeds
#method===,bool,bool;Returns <b>true</b> if the parameter is <b>true</b> otherwise <b>false</b>
#method=!=,bool,bool;Returns <b>true</b> if the parameter is <b>false</b> otherwise <b>false</b>
#method=clone,,bool;Returns itself
#method=<a href="stddictionary.bool">bool'and</a>,bool,bool;Returns the result of the logical AND operation.
#method=<a href="stddictionary.bool">bool'get</a>,,bool;Returns itself
#method=<a href="stddictionary.bool">bool'or</a>,bool,bool;Always returns <b>true</b>.
#method=<a href="stddictionary.bool">bool'not</a>,,bool;Always returns <b>false</b>.
#method=<a href="stddictionary.bool">bool'xor</a>,bool,bool;Returns the result of the logical XOR operation.
#method=<a href="stddictionary.html#printer">printer'write</a>,printer;Prints the object text represenation

[false]
#title=Symbol False
#shortdescr=A false boolean value
#protocol=bool
#protocol=magnitude
#protocol=printable
#method=!,,;Always succeeds
#method===,bool,bool;Returns <b>true</b> if the parameter is <b>false</b> otherwise <b>false</b>
#method=!=,bool,bool;Returns <b>true</b> if the parameter is <b>true</b> otherwise <b>false</b>
#method=clone,,bool;Returns itself
#method=<a href="stddictionary.bool">bool'and</a>,bool,bool;Always returns <b>false</b>.
#method=<a href="stddictionary.bool">bool'get</a>,,bool;Returns itself
#method=<a href="stddictionary.bool">bool'or</a>,bool,bool;Returns <b>true</b> if the operand is true otherwise <b>false</b>.
#method=<a href="stddictionary.bool">bool'not</a>,,bool;Always returns <b>false</b>.
#method=<a href="stddictionary.bool">bool'xor</a>,bool,bool;Returns the result of the logical XOR operation.
#method=<a href="stddictionary.html#printer">printer'write</a>,printer;Prints the object text represenation

[convertors]
#title=Symbol Convertors
#shortdescr=A container containing the convertor group
#protocol=container
#method=<a href="stddictionary.html#content">content'get</a>,,object;Returns the convertors
#method=<a href="stddictionary.html#content">content'get</a>,,group;Returns the group of convertors

[variantvalue]
#title=Symbol VariantValue
#shortdescr=A converting adapter
#protocol=bool
#protocol=int
#protocol=long
#protocol=real
#protocol=literal
#method=new,object,object;Returns a converting adapter
#method=<a href="stddictionary.html#bool">bool'get</a>,,bool;Converts the object to the boolean value
#method=<a href="stddictionary.html#int">int'get</a>,,object;Converts the object to the integer
#method=<a href="stddictionary.html#literal">literal'get</a>,,object;Converts the object to the literal value
#method=<a href="stddictionary.html#long">long'getl</a>,,object;Converts the object to the long integer
#method=<a href="stddictionary.html#real">real'get</a>,,object;Converts the object to the real number

[integer]
#title=Class Integer
#shortdescr=An 32bit Integer variable
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#parent=numeric:std'basic'Numeric
#parent=integernumeric:std'basic'IntegerNumber
#parent=intnumber:std'basic'IntNumber
#protocol=arithmetic
#protocol=arithmetic_variable
#protocol=int
#protocol=long
#protocol=magnitude
#protocol=readable
#protocol=real
#protocol=variable
#method===,value,bool;Returns <b>true</b> if the object value is equal to the parameter otherwise <b>false</b>.
#method=!=,value,bool;Returns <b>true</b> if the object value is not equal to the parameter otherwise <b>false</b>.
#method=>,magnitude,bool;Returns <b>true</b> if the object value is greater than the parameter otherwise <b>false</b>.
#method=<,magnitude,bool;Returns <b>true</b> if the object value is less than the parameter otherwise <b>false</b>.
#method=>=,magnitude,bool;Returns <b>true</b> if the object value is greater or equal to the parameter otherwise <b>false</b>.
#method=<=,magnitude,bool;Returns <b>true</b> if the object value is less or equal to the parameter otherwise <b>false</b>.
#method=+,object,object;Returns the sum.
#method=-,object,object;Returns the difference.
#method=*,object,object;Returns the products
#method=/,object,object;Returns the fraction.
#method=+=,int;Adds an operand to the integer.
#method=-=,int;Subtracts an operand from the integer
#method=*=,int;Multiplies the integer by an operand.
#method=/=,int;Divides the integer into an operand.
#method=<<,int;Copies an integer value
#method=clone,,int;Returns the number copy
#method=new,int;Assigns the default number value
#method=<a href="stddictionary.html#int">int'add</a>,int,int;Converts the object value to the integer and returns a sum of the two integer numbers.
#method=<a href="stddictionary.html#int">int'allmask'if</a>,int;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#int">int'and</a>,int,int;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#int">int'anymask'if</a>,int;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#int">int'divide</a>,int,int;Converts the object value to the integer and returns a result of the integer division.
#method=<a href="stddictionary.html#int">int'equal</a>,int;Converts the object value to the integer and fails if the integer is not equal to the opernand
#method=<a href="stddictionary.html#int">int'get</a>,,object;Returns the integer
#method=<a href="stddictionary.html#int">int'high'get</a>,,int;Returns the high word.
#method=<a href="stddictionary.html#int">int'less</a>,int;Converts the object value to the integer and fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#int">int'low'get</a>,,int;Returns the low word.
#method=<a href="stddictionary.html#int">int'mod'proceed</a>,int,int;Returns the integer division reminder
#method=<a href="stddictionary.html#int">int'multiply</a>,int,int;Converts the object value to the integer and returns a product of the two integer number.
#method=<a href="stddictionary.html#int">int'not</a>,,int;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#int">int'or</a>,int,int;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#int">int'shift</a>,int,int;Returns the result of bitwise shift
#method=<a href="stddictionary.html#int">int'subtract</a>,int,int;Converts the object value to the integer and returns a difference between the two integer number.
#method=<a href="stddictionary.html#int">int'xor</a>,int,int;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#long">long'add</a>,long,long;Converts the object value to the long integer and returns a sum of the two long integer numbers.
#method=<a href="stddictionary.html#long">long'allmask'if</a>,long;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#long">long'and</a>,long,long;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#long">long'anymask'if</a>,long;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#long">long'divide</a>,long,long;Converts the object value to the long integer and returns a result of the long integer division.
#method=<a href="stddictionary.html#long">long'equal</a>,long;Converts the object value to the long integer and fails if the long integer is not equal to the opernand
#method=<a href="stddictionary.html#long">long'get</a>,,long;Returns the long integer
#method=<a href="stddictionary.html#long">long'less</a>,long;Converts the object value to the long integer and fails if the long integer bigger or equal to the operand
#method=<a href="stddictionary.html#long">long'multiply</a>,long,long;Converts the object value to the long integer and returns a product of the two long integer number.
#method=<a href="stddictionary.html#long">long'not</a>,,long;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#long">long'or</a>,long,long;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#long">long'subtract</a>,long,long;Converts the object value to the long integer and returns a difference between the two long integer number.
#method=<a href="stddictionary.html#long">long'xor</a>,long,long;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#math">math'abs'get</a>,,int;Returns the integer absolute value
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'divide</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'equal</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'less</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'multiply</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'or</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'subtract</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'xor</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#real">real'add</a>,real,real;Converts the object value to the real and returns a sum of the two real numbers.
#method=<a href="stddictionary.html#real">real'divide</a>,real,real;Converts the object value to the real and returns a fraction of the two real numbers.
#method=<a href="stddictionary.html#real">real'equal</a>,real;Converts the object value to the real and fails if the real is not equal to the opernand
#method=<a href="stddictionary.html#real">real'get</a>,,real;Converts the integer to the real number
#method=<a href="stddictionary.html#real">real'less</a>,real;Converts the object value to the real and fails if the real bigger or equal to the operand
#method=<a href="stddictionary.html#real">real'multiply</a>,real,real;Converts the object value to the real and returns a product of the two real number.
#method=<a href="stddictionary.html#real">real'subtract</a>,real,real;Converts the object value to the real and returns a difference between the two real number.

[longinteger]
#title=Class LongInteger
#shortdescr=A 64bit Integer variable
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#parent=numeric:std'basic'Numeric
#parent=integernumeric:std'basic'IntegerNumber
#parent=longnumber:std'basic'LongNumber
#protocol=arithmetic
#protocol=arithmetic_variable
#protocol=int
#protocol=long
#protocol=magnitude
#protocol=real
#protocol=variable
#method===,value,bool;Returns <b>true</b> if the object value is equal to the parameter otherwise <b>false</b>.
#method=!=,value,bool;Returns <b>true</b> if the object value is not equal to the parameter otherwise <b>false</b>.
#method=>,magnitude,bool;Returns <b>true</b> if the object value is greater than the parameter otherwise <b>false</b>.
#method=<,magnitude,bool;Returns <b>true</b> if the object value is less than the parameter otherwise <b>false</b>.
#method=>=,magnitude,bool;Returns <b>true</b> if the object value is greater or equal to the parameter otherwise <b>false</b>.
#method=<=,magnitude,bool;Returns <b>true</b> if the object value is less or equal to the parameter otherwise <b>false</b>.
#method=+,object,object;Returns the sum.
#method=-,object,object;Returns the difference.
#method=*,object,object;Returns the products
#method=/,object,object;Returns the fraction.
#method=<<,long;Copies an integer value
#method=<<,int;Copies an integer value
#method=+=,long;Adds an operand to the integer.
#method=-=,long;Subtracts an operand from the integer
#method=*=,long;Multiplies the integer by an operand.
#method=/=,long;Divides the integer into an operand.
#method=clone,,long;Returns the number copy
#method=new,long;Assigns the default number value
#method=<a href="stddictionary.html#int">int'add</a>,int,long;Converts the object value to the integer and returns a sum of the two integer numbers.
#method=<a href="stddictionary.html#int">int'allmask'if</a>,int;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#int">int'and</a>,int,long;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#int">int'anymask'if</a>,int;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#int">int'divide</a>,int,long;Converts the object value to the integer and returns a result of the integer division.
#method=<a href="stddictionary.html#int">int'equal</a>,int;Converts the object value to the integer and fails if the integer is not equal to the opernand
#method=<a href="stddictionary.html#int">int'get</a>,,int;Returns the 32bit integer
#method=<a href="stddictionary.html#int">int'less</a>,int;Converts the object value to the integer and fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#int">int'mod'proceed</a>,int,long;Returns the integer division reminder
#method=<a href="stddictionary.html#int">int'multiply</a>,int,long;Converts the object value to the integer and returns a product of the two integer number.
#method=<a href="stddictionary.html#int">int'not</a>,,int;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#int">int'or</a>,int,long;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#int">int'shift</a>,int,long;Returns the result of bitwise shift
#method=<a href="stddictionary.html#int">int'subtract</a>,int,long;Converts the object value to the integer and returns a difference between the two integer number.
#method=<a href="stddictionary.html#int">int'write</a>,int;Copies the integer number
#method=<a href="stddictionary.html#int">int'xor</a>,int,long;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#long">long'add</a>,long,long;Converts the object value to the long integer and returns a sum of the two long integer numbers.
#method=<a href="stddictionary.html#long">long'allmask'if</a>,long;Succeeds if all operand bits are set.
#method=<a href="stddictionary.html#long">long'and</a>,long,long;Converts the object value to the integer and returns the result of bitwise AND operation.
#method=<a href="stddictionary.html#long">long'anymask'if</a>,long;Succeeds if any operand bit is set.
#method=<a href="stddictionary.html#long">long'divide</a>,long,long;Converts the object value to the long integer and returns a result of the long integer division.
#method=<a href="stddictionary.html#long">long'equal</a>,long;Converts the object value to the long integer and fails if the long integer is not equal to the opernand
#method=<a href="stddictionary.html#long">long'get</a>,,long;Returns the long integer
#method=<a href="stddictionary.html#long">long'high'get</a>,,int;Returns the high double word.
#method=<a href="stddictionary.html#long">long'less</a>,long;Converts the object value to the long integer and fails if the long integer bigger or equal to the operand
#method=<a href="stddictionary.html#long">long'low'get</a>,,int;Returns the low double word.
#method=<a href="stddictionary.html#long">long'mod'proceed</a>,long,long;Returns the integer division reminder
#method=<a href="stddictionary.html#long">long'multiply</a>,long,long;Converts the object value to the long integer and returns a product of the two long integer number.
#method=<a href="stddictionary.html#long">long'not</a>,,long;Converts the object value to the integer and returns the inverted number
#method=<a href="stddictionary.html#long">long'or</a>,long,long;Converts the object value to the integer and returns the result of Bitwise OR operation.
#method=<a href="stddictionary.html#long">long'subtract</a>,long,long;Converts the object value to the long integer and returns a difference between the two long integer number.
#method=<a href="stddictionary.html#long">long'write</a>,long;Copies the long integer number
#method=<a href="stddictionary.html#long">long'xor</a>,long,long;Converts the object value to the integer and returns the result of Bitwise XOR operation.
#method=<a href="stddictionary.html#math">math'abs'get</a>,,int;Returns the integer absolute value
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'add</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'divide</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'equal</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'less</a>,container;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'multiply</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'or</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'subtract</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#proxy">proxy'xor</a>,container,object;Redirects the message to the container content
#method=<a href="stddictionary.html#real">real'add</a>,real,real;Converts the object value to the real and returns a sum of the two real numbers.
#method=<a href="stddictionary.html#real">real'divide</a>,real,real;Converts the object value to the real and returns a fraction of the two real numbers.
#method=<a href="stddictionary.html#real">real'equal</a>,real;Converts the object value to the real and fails if the real is not equal to the opernand
#method=<a href="stddictionary.html#real">real'get</a>,,object;Converts the integer to the real number
#method=<a href="stddictionary.html#real">real'less</a>,real;Converts the object value to the real and fails if the real bigger or equal to the operand
#method=<a href="stddictionary.html#real">real'multiply</a>,real,real;Converts the object value to the real and returns a product of the two real number.
#method=<a href="stddictionary.html#real">real'subtract</a>,real,real;Converts the object value to the real and returns a difference between the two real number.

[real]
#title=Class RealNumber
#shortdescr=A 64bit Floating-point value
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#parent=numeric:std'basic'Numeric
#parent=realnumber:std'basic'RealNumber
#protocol=arithmetic
#protocol=arithmetic_variable
#protocol=magnitude
#protocol=real
#protocol=variable
#method===,real,bool;Returns <b>true</b> if the object is equal to the operand otherwise <b>false</b>.
#method=!=,real,bool;Returns <b>true</b> if the object is not equal to the operand otherwise <b>false</b>.
#method=<,real,bool;Returns <b>true</b> if the object is less than the operand otherwise <b>false</b>.
#method=>,real,bool;Returns <b>true</b> if the object is greater than the operand otherwise <b>false</b>.
#method=>=,real,bool;Returns <b>true</b> if the object is greater or equal to the operand otherwise <b>false</b>.
#method=<=,real,bool;Returns <b>true</b> if the object is less or equal to the operand otherwise <b>false</b>.
#method=+,real,real;Returns the sum of two real numbers.
#method=-,real,real;Returns the difference of two real numbers.
#method=*,real,real;Returns the product of two real numbers.
#method=/,real,real;Returns the fraction of two real numbers.
#method=<<,real;Copies a 64bit real value
#method=<<,int;Copies an integer value
#method=<<,long;Copies a long integer value
#method=+=,real;Adds an operand value to the real number.
#method=-=,real;Subtracts an operand from the real number.
#method=*=,real;Multiplies the real number by an operand. 
#method=/=,real;Divides the real number into an operand. 
#method=clone,,real;Returns the number copy
#method=new,real;Assigns the default number value
#method=<a href="stddictionary.html#int">int'add</a>,int,real;Adds the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#int">int'divide</a>,int,real;Divides the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#int">int'equal</a>,int;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#int">int'less</a>,int;Fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#int">int'multiply</a>,int,real;Multiplies the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#int">int'subtract</a>,int,real;Subtracts the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#long">int'write</a>,int;Copies the number.<br/>
#method=<a href="stddictionary.html#long">long'add</a>,long,real;Adds the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#long">long'divide</a>,long,real;Divides the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#long">long'equal</a>,long;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#long">long'less</a>,long;Fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#long">long'multiply</a>,long,real;Multiplies the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#long">long'subtract</a>,long,real;Subtracts the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#long">long'write</a>,long;Copies the number.<br/>
#method=<a href="stddictionary.html#real">real'add</a>,real,real;Adds the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#real">real'divide</a>,real,real;Divides the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#real">real'equal</a>,real;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#real">real'get</a>,,object;Returns the real number
#method=<a href="stddictionary.html#real">real'less</a>,real;Fails if the integer bigger or equal to the operand
#method=<a href="stddictionary.html#real">real'multiply</a>,real,real;Multiplies the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#real">real'subtract</a>,real,real;Subtracts the number.<br/><b>Should be overridden.</b>
#method=<a href="stddictionary.html#real">real'write</a>,real;Copies the number.<br/>

[string]
#title=Class String
#shortdescr=A class storing a literal value
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#protocol=enumerable
#protocol=indexable
#protocol=literal
#protocol=magnitude
#protocol=variable
#method===,literal,bool;Returns <b>true</b> if the object value is equal to the parameter otherwise <b>false</b>.
#method=!=,literal,bool;Returns <b>true</b> if the object value is not equal to the parameter otherwise <b>false</b>.
#method=>,literal,bool;Returns <b>true</b> if the object value is greater than the parameter otherwise <b>false</b>.
#method=<,literal,bool;Returns <b>true</b> if the object value is less than the parameter otherwise <b>false</b>.
#method=>=,literal,bool;Returns <b>true</b> if the object value is greater or equal to the parameter otherwise <b>false</b>.
#method=<=,literal,bool;Returns <b>true</b> if the object value is less or equal to the parameter otherwise <b>false</b>.
#method=+,literal,literal;Returns the concatenated string.
#method=<<,literal;Copies the parameter literal value
#method=+=,literal;Appends a literal to the string.
#method=@,int,char;Returns the character at a specified position.
#method=@,int,indexer;Returns the indexer at a specified position.
#method=clear,,;Clears the string
#method=clone,,literal;Returns the literal string copy
#method=new,,literal;Assigns the literal value
#method=<a href="stddictionary.html#count">count'get,,int;Returns the literal string length
#method=<a href="stddictionary.html#enum">enum'get</a>,,enumerator;Returns the object enumerator
#method=<a href="stddictionary.html#literal">literal'add</a>,literal,literal;Returns the concatenated string.
#method=<a href="stddictionary.html#literal">literal'equal</a>,literal;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#literal">literal'get</a>,,object;Returns the literal value
#method=<a href="stddictionary.html#literal">literal'less</a>,literal;Fails if the object bigger or equal to the opernand.
#method=<a href="stddictionary.html#literal">literal'write</a>,literal;Copies the string
#method=<a href="stddictionary.html#indexer">indexer'get</a>,,indexer;Creates the literal indexer

[char]
#title=Class CharValue
#shortdescr=A literal character value.
#parent=elena.html#object:Object
#parent=magnitude:std'basic'Magnitude
#parent=numeric:std'basic'Numeric
#parent=charvalue:std'basic'CharValue
#protocol=char
#protocol=int
#protocol=literal
#protocol=magnitude
#protocol=printable
#protocol=variable
#method=<<,int;Copies the integer value
#method=+=,int;Adds the integer value
#method=-=,int;Subtracts the integer value
#method===,char,bool;Returns <b>true</b> if the object is equal to the operand otherwise <b>false</b>.
#method=!=,char,bool;Returns <b>true</b> if the object is not equal to the operand otherwise <b>false</b>.
#method=>,char,bool;Returns <b>true</b> if the object is greater than the operand otherwise <b>false</b>.
#method=<,char,bool;Returns <b>true</b> if the object is less than the operand otherwise <b>false</b>.
#method=>=,char,bool;Returns <b>true</b> if the object is greater or equal to the operand otherwise <b>false</b>.
#method=<=,char,bool;Returns <b>true</b> if the object is less or equal to the operand otherwise <b>false</b>.
#method=+,object,char;Returns the sum.
#method=-,object,int;Returns the difference.
#method=clone,,char;Returns the object copy
#method=<a href="stddictionary.html#char">char'equal</a>,char;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#char">char'get</a>,,char;Returns the character
#method=<a href="stddictionary.html#char">char'less</a>,char;Fails if the object bigger or equal to the opernand.
#method=<a href="stddictionary.html#char">char'subtract</a>,char,int;Returns the diffrence between character numereric values
#method=<a href="stddictionary.html#count">count'get</a>,,int;Returns 1.
#method=<a href="stddictionary.html#int">int'add</a>,int,char;Adds the number to the character numeric value and returns the result as a character
#method=<a href="stddictionary.html#int">int'equal</a>,int;Fails if the object is not equal to the opernand.
#method=<a href="stddictionary.html#int">int'get</a>,,int;Returns the integer containing the character numeric value
#method=<a href="stddictionary.html#int">int'less</a>,int;Fails if the object bigger or equal to the opernand.
#method=<a href="stddictionary.html#literal">literal'get</a>,,literal;Returns the literal value
#method=<a href="stddictionary.html#printer">printer'write</a>,printer;Prints the literal value

[boolean]
#title=Class Boolean
#shortdescr=A Boolean value storage class
#parent=elena.html#object:Object
#protocol=bool
#protocol=inputable
#protocol=magnitude
#protocol=printable
#protocol=variable
#method=?,,;Succeeds if the object has <b>true</b> value.
#method=!,,;Succeeds if the object has <b>false</b> value.
#method===,bool,bool;Returns <b>true</b> if the parameter is equal to the object otherwise <b>false</b>
#method=!=,bool,bool;Returns <b>true</b> if the parameter is not equal to the object otherwise <b>false</b>
#method=<<,bool;Copies the object value
#method=clone,,bool;Returns the object copy
#method=new,bool;Assigns the object value
#method=<a href="stddictionary.bool">bool'and</a>,bool,bool;Returns the result of the logical AND operation.
#method=<a href="stddictionary.bool">bool'get</a>,,bool;Returns boolean value
#method=<a href="stddictionary.bool">bool'or</a>,bool,bool;Returns the result of the logical OR operation.
#method=<a href="stddictionary.bool">bool'not</a>,,bool;Returns the result of the logical invertion.
#method=<a href="stddictionary.bool">bool'write</a>,bool;Copies the boolean value
#method=<a href="stddictionary.bool">bool'xor</a>,bool,bool;Returns the result of the logical XOR operation.
#method=<a href="stddictionary.html#input">input'read</a>,input;Reads the text value from the reader and assigns true if it is not equal to zero, false otherwise
#method=<a href="stddictionary.html#printer">printer'writeto</a>,printer;Writes the object text represenation to the stream writer

[variable]
#title=Class Variable
#shortdescr=An object proxy container
#parent=elena.html#object:Object
#field=thevalue;The content
#protocol=container
#method=clone,,object;Returns the variable deep copy
#method=new,object;Assigns the container
#method=<a href="stddictionary.html#content">content'get</a>,,;Returns the variable content
#method=<a href="stddictionary.html#proxy">proxy'ifnotnil</a>,,;Fails if the variable is not assigned

[eintconvertor]
#title=Symbol EIntConvertor
#shortdescr=An integer conversion routine.<br>Should be applied to the integer value
#protocol=literal
#protocol=char
#protocol=real
#method=new,int;Extends the integer number
#method=<a href="stddictionary.html#char">char'get</a>,,char;Converts the extended integer to the character value
#method=<a href="stddictionary.html#literal">literal'get</a>,,literal;Converts the extended integer to the literal value
#method=<a href="stddictionary.html#real">real'get</a>,,object;Converts the extended integer to the real value

[elongconvertor]
#title=Symbol ELongConvertor
#shortdescr=A long integer conversion routine.<br>Should be applied to the long integer value
#protocol=literal
#protocol=real
#method=new,long;Extends the long integer number
#method=<a href="stddictionary.html#literal">literal'get</a>,,literal;Converts the extended long integer to the literal value
#method=<a href="stddictionary.html#real">real'get</a>,,object;Converts the extended long integer to the real value

[eliteralconvertor]
#title=Symbol ELiteralConvertor
#shortdescr=A literal conversion routine.<br>Should be applied to the literal value
#protocol=int
#protocol=long
#protocol=real
#method=new,literal;Extends the literal value
#method=<a href="stddictionary.html#int">int'get</a>,,int;Converts the extended literal value to the integer
#method=<a href="stddictionary.html#long">long'get</a>,,long;Converts the extended literal value to the long integer
#method=<a href="stddictionary.html#real">real'get</a>,,object;Converts the extended literal value to the real value

[erealconvertor]
#title=Symbol ERealConvertor
#shortdescr=A real number conversion routine.<br>Should be applied to the real number
#protocol=literal
#method=new,real;Extends the real number
#method=<a href="stddictionary.html#literal">literal'get</a>,,literal;Converts the extended real number to the literal value

[einteger]
#title=Symbol EInteger
#shortdescr=An integer extension
#protocol=int
#method=<a href="stddictionary.html#int">int'get</a>,,object;Returns the integer object
#method=<a href="stddictionary.html#long">long'get</a>,,object;Returns the long integer object

[eliteral]
#title=Symbol ELiteral
#shortdescr=A literal extension
#protocol=enumerable
#protocol=indexable
#protocol=literal
#method=@,int,char;Returns the character at a specified position.
#method=@,int,indexer;Returns the indexer at a specified position.
#method=+,object,literal;Returns the concatenated string.
#method=<a href="stddictionary.html#count">count'get</a>,,object;Returns the literal value length
#method=<a href="stddictionary.html#count">indexer'get</a>,,object;Returns the literal value indexer
#method=<a href="stddictionary.html#enum">enum'get</a>,,enumerator;Returns the object enumerator
#method=<a href="stddictionary.html#literal">literal'get</a>,,object;Returns the literal value object

[elong]
#title=Symbol ELong
#shortdescr=A long integer extension
#protocol=long
#method=<a href="stddictionary.html#long">long'get</a>,,object;Returns the long integer object

[ereal]
#title=Symbol EReal
#shortdescr=A real number extension
#protocol=real
#method=<a href="stddictionary.html#real">real'get</a>,,object;Returns the real number object

[literaltype]
#title=Symbol LiteralType
#shortdescr=A literal value helper.
#protocol=factory
#protocol=inputable
#protocol=typecaster
#method=of,object,literal;Tries to return the object literal value
#method=<a href="stddictionary.html#count">count'create</a>,int,literal;Creates the literal with the provided length
#method=<a href="stddictionary.html#input">input'read</a>,input,literal;Reads the text value from the reader and returns the string containing this value
#method=<a href="stddictionary.html#pattern">pattern'create</a>,arraypattern,literal;Creates the literal with the provided pattern

[arraytype]
#title=Symbol ArrayType
#shortdescr=An array helper.
#protocol=factory
#protocol=typecaster
#method=of,object,array;Tries to return the array
#method=<a href="stddictionary.html#count">count'create</a>,int,literal;Creates the array with the provided length
#method=<a href="stddictionary.html#pattern">pattern'create</a>,arraypattern,literal;Creates the array with the provided pattern

[realtype]
#title=Symbol RealType
#shortdescr=A real number helper.
#protocol=typecaster
#method=of,object,real;Tries to return the real number

[integertype]
#title=Symbol IntegerType
#shortdescr=An integer helper.
#protocol=typecaster
#method=of,object,int;Tries to return the integer number

[longtype]
#title=Symbol LongType
#shortdescr=A long integer helper.
#protocol=typecaster
#method=of,object,long;Tries to return the long integer number

[arrayindexer]
#title=Class ArrayIndexer
#shortdescr=An array indexer
#parent=elena.html#object:Object
#parent=indexer:std'basic'Indexer
#protocol=indexer
#field=thearray;The array
#field=theindex;The index
#method=new,array;Assigns the indexer
#method=<a href="stddictionary.html#array">array'get</a>,,object;Returns the array
#method=<a href="stddictionary.html#content">content'get</a>,,char;Returns the current object
#method=<a href="stddictionary.html#index">index'add</a>,int;Increments the object index with provided offset
#method=<a href="stddictionary.html#index">index'get</a>,,int;Returns the current index
#method=<a href="stddictionary.html#index">index'if</a>,int;Fails if the provided index is out of range
#method=<a href="stddictionary.html#index">index'set</a>,int;Sets the current index
#method=<a href="stddictionary.html#index">index'subtract</a>,int;Decrements the object index with provided offset
#method=<a href="stddictionary.html#indexer">indexer'get</a>,,indexer;Returns itself
#method=<a href="stddictionary.html#proxy">proxy'ifnotnil</a>,,;Fails if the indexer pointing to nil

[literalindexer]
#title=Class LiteralIndexer
#shortdescr=A literal indexer
#parent=elena.html#object:Object
#parent=indexer:std'basic'Indexer
#protocol=indexer
#field=thearray;The array
#field=theindex;The index
#method=new,literal;Assigns the indexer
#method=<a href="stddictionary.html#array">array'get</a>,,object;Returns the array
#method=<a href="stddictionary.html#content">content'get</a>,,char;Returns the indexer char
#method=<a href="stddictionary.html#index">index'add</a>,int;Increments the object index with provided offset
#method=<a href="stddictionary.html#index">index'get</a>,,int;Returns the current index
#method=<a href="stddictionary.html#index">index'if</a>,int;Fails if the provided index is out of range
#method=<a href="stddictionary.html#index">index'set</a>,int;Sets the current index
#method=<a href="stddictionary.html#index">index'subtract</a>,int;Decrements the object index with provided offset
#method=<a href="stddictionary.html#indexer">indexer'get</a>,,indexer;Returns itself
#method=<a href="stddictionary.html#literal">literal'seek</a>,literal;Looks for the substring position and sets the index to it or fails
#method=<a href="stddictionary.html#proxy">proxy'ifnotnil</a>,,;Fails if the indexer pointing to nil

[stringindexer]
#title=Class StringIndexer
#shortdescr=A string indexer
#parent=elena.html#object:Object
#parent=indexer:std'basic'Indexer
#parent=literalindexer:std'basic'LiteralIndexer
#protocol=indexer
#field=thearray;The array
#field=theindex;The index
#field=thestring;The string
#method=new,literal;Assigns the indexer
#method=<a href="stddictionary.html#content">content'get</a>,,char;Returns the indexer char
#method=<a href="stddictionary.html#count">count'delete</a>,int;Deletes the substring starting from the current position with a provided number of characters
#method=<a href="stddictionary.html#index">index'dec</a>,,;Decrement the object index
#method=<a href="stddictionary.html#index">index'get</a>,,int;Returns the current index
#method=<a href="stddictionary.html#index">index'if</a>,int;Fails if the provided index is out of range
#method=<a href="stddictionary.html#index">index'inc</a>,,;Increments the object index
#method=<a href="stddictionary.html#index">index'seek</a>,literal;Looks for the substring position and sets the index to it or fails
#method=<a href="stddictionary.html#index">index'set</a>,int;Sets the current index
#method=<a href="stddictionary.html#indexer">indexer'get</a>,,indexer;Returns itself
#method=<a href="stddictionary.html#literal">literal'insert</a>,literal;Inserts the substring to the current position
#method=<a href="stddictionary.html#literal">literal'seek</a>,literal;Looks for the substring position and sets the index to it or fails
#method=<a href="stddictionary.html#proxy">proxy'ifnotnil</a>,,;Fails if the indexer pointing to nil

[nilvalue]
#title=Symbol NilValue
#shortdescr=A nil value symbol
#protocol=value
#method===,object,bool;Returns <b>true</b> if the operand is nil otherwise returns <b>false</b>.
#method=!=,object,bool;Returns <b>true</b> if the operand is not nil otherwise returns <b>false</b>.
#method=ifnotnil,,;Always fails

[stringwriter]
#title=Class StringWriter
#shortdescr=A string writer
#protocol=literal
#protocol=writer
#protocol=printer
#parent=elena.html#object:Object
#field=thestring;The string
#method=new,value;Assigns the target string
#method=<a href="stddictionary.html#count">count'get</a>,,array;Returns the string length
#method=<a href="stddictionary.html#int">int'write</a>,int;Prints the literal representation of an integer value
#method=<a href="stddictionary.html#literal">literal'get</a>,,object;Returns the literal value
#method=<a href="stddictionary.html#literal">literal'write</a>,literal;Writes the literal value
#method=<a href="stddictionary.html#long">long'write</a>,long;Prints the literal representation of a long integer value
#method=<a href="stddictionary.html#real">real'write</a>,real;Prints the literal representation of a real number value
#method=<a href="stddictionary.html#proxy">proxy'write</a>,container;Redirects the message to the container content

[chartype]
#title=Symbol CharType
#shortdescr=A character helper.
#protocol=typecaster
#method=of,object,char;Tries to return the character symbol
