[#general#]
#name=std'patterns
#shortdescr=Provides classes that describe the basic patterns

[#list#]
control
countaction
counter
econtent
edynamiccast
edynamicgroup
eenum
eenumeration
eenumindexenumerator
eindexenum
eindexenumerable
eindexenumeration
eindexenumerator
eit
eiteration
estopper
groupcollection
indexbscan
indexscan
loop
searchaction
searching

[loop]
#title=Class Loop
#shortdescr=A loop pattern
#parent=elena.html#object:Object
#protocol=pattern
#field=thecounter;The counter
#method=new,int;Assign the number of the repeating
#method=run,action;Repeats the action until the counter is bigger then zero

[eenumeration]
#title=Symbol EEnumeration
#shortdescr=FOR EACH pattern. Should extend enumerable object
#protocol=pattern
#method=new,enumerable,pattern;Extends an enumerable object
#method=run,action;Executes the action for every member of the enumerable object

[eenum]
#title=Symbol EEnum
#shortdescr=FOR EACH pattern. Should extend enumerable object
#protocol=pattern
#method=new,enumerable,pattern;Extends an enumerable object
#method=run,action;Executes the action for every member of the enumerable object

[eindexenum]
#title=Symbol EIndexEnum
#shortdescr=FOR EVERY pattern. Should extend indexable / indexer object
#protocol=pattern
#method=new,indexable,pattern;Extends an indexable
#method=new,indexer,pattern;Extends an indexer
#method=run,action;Executes the action for every pointer position

[eindexenumeration]
#title=Symbol EIndexEnumeration
#shortdescr=FOR EVERY pattern. Should extend indexable / indexer object
#protocol=pattern
#method=new,indexable,pattern;Extends an indexable
#method=new,indexer,pattern;Extends an indexer
#method=run,action;Executes the action for every pointer position

[eiteration]
#title=Symbol EIteration
#shortdescr=FOR pattern. Should extends iterator
#protocol=pattern
#method=new,iterator,pattern;Extends the iterator
#method=run,action;Executes the action for every iteration step

[eit]
#title=Symbol EIt
#shortdescr=FOR pattern. Should extends iterator
#protocol=pattern
#method=new,iterator,pattern;Extends the iterator
#method=run,action;Executes the action for every iteration step

[counter]
#title=Symbol Counter
#shortdescr=A counter symbol<br>Returns the number of collection items
#method=new,enumerable,int;Calculates the number of collection items

[control]
#title=Symbol Control
#shortdescr=A flow control symbol
#method=run,action;Executes the action
#method=<a href="stddictionary.html#bool">bool'if</a>,bool;Fails if the parameter is not true
#method=<a href="stddictionary.html#bool">bool'ifnot</a>,bool;Fails if the parameter is not false
#method=<a href="stddictionary.html#bool">int'if</a>,int;Fails if the parameter is equal to zero
#method=<a href="stddictionary.html#bool">int'ifnot</a>,int;Fails if the parameter is not equal to zero

[groupcollection]
#title=Class GroupCollection
#shortdescr=A group object collection
#parent=elena.html#object:Object
#pattern=group
#field=thecollection;The collection
#method=<a href="stddictionary.html#group">group'get</a>,,object;Returns the group collection
#method=<a href="stddictionary.html#group">group'set</a>,object;Sets the group collection

[estopper]
#title=Class EStopper
#shortdescr=An enumerator stopping extension.<BR>Should extend an enumerator
#parent=elena.html#object:Object
#protocol=enumerator
#method=<a href="stddictionary.html#control">control'stop</a>,,;Stops the enumeration
#method=<a href="stddictionary.html#enum">enum'continue</a>,,;Fails after control'stop is called

[eindexenumerator]
#title=Symbol EIndexEnumerator
#shortdescr=An indexer extension to support the enumerator protocol
#protocol=enumerator
#method=new,indexer,enumerator;Extends indexer
#method=<a href="stddictionary.html#enum">enum'continue</a>,,;Goes to the next enumerating item

[eenumindexenumerator]
#title=Symbol EEnumIndexEnumerator
#shortdescr=An indexer extension to support the enumerator protocol which overrides content'get method
#protocol=enumerator
#method=new,indexer,enumerator;Extends indexer
#method=<a href="stddictionary.html#content">content'get</a>,,object;Returns the current item
#method=<a href="stddictionary.html#enum">enum'continue</a>,,;Goes to the next enumerating item

[eindexenumerable]
#title=Symbol EIndexEnumerable
#shortdescr=An indexable object extension which allow it to be used in enumerating patterns
#protocol=enumerable
#method=new,indexable,enumerable;Extends indexable
#method=<a href="stddictionary.html#enum">enum'get</a>,,enumerator;Returns the index enumerator with overridden content'get method

[indexbscan]
#title=Symbol IndexBSan
#shortdescr=An indexer extension which turns it into backward iterator
#protocol=iterator
#method=new,indexer,iterator
#method=<a href="stddictionary.html#it">it'get</a>,,object;Returns the indexer
#method=<a href="stddictionary.html#it">it'ifnotnil</a>,,object;Fails if the indexer is out of range
#method=<a href="stddictionary.html#it">it'continue</a>,,object;Goes to the previous indexer position

[indexscan]
#title=Symbol IndexScan
#shortdescr=An indexer extension which turns it into forward iterator
#protocol=iterator
#method=new,indexer,iterator
#method=<a href="stddictionary.html#it">it'get</a>,,object;Returns the indexer
#method=<a href="stddictionary.html#it">it'ifnotnil</a>,,object;Fails if the indexer is out of range
#method=<a href="stddictionary.html#it">it'continue</a>,,object;Goes to the next indexer position

[econtent]
#title=Symbol EContent
#shortdescr=A content extension to support content'exchange message.
#protocol=container
#method=<a href="stddictionary.html#content">content'exchange</a>,container;Exchanges the content

[edynamiccast]
#title=Symbol EDynamicCast
#shortdescr=A dynamic broadcast group extension which extends the group with the possibility to add new item
#method=new,group,collection;Extends group collection
#method=+=,object;Adds the new item to the group

[edynamicgroup]
#title=Symbol EDynamicGroup
#shortdescr=A dynamic group extension which extends the group with the possibility to add new item
#method=new,group,collection;Extends group collection
#method=+=,object;Adds the new item to the group

[countaction]                                         
#title=Class CountAction
#shortdescr=A counting action
#parent=elena.html#object:Object
#protocol=action
#field=thecounter;The counter
#method=proceed,object;Increments the counter by one.<br>Should be used with one of loop patterns

[searchaction]
#title=Class SearchAction
#shortdescr=A Search action
#parent=elena.html#object:Object
#protocol=action
#field=thesearchingvalue;The searching value
#method=new,magnitude;Assigns the searching value
#method=proceed,object;Compares the search value with collection item. If they are equal breaks the execution.<br>Should be used with one of loop patterns and estopper extension

[searching]
#title=Symbol Searching
#shortdescr=A searching action
#protocol=action
#method===,magnitude,bool;Returns true if there is a collection item which equals to the operand otherwise false.
#method=!=,magnitude,bool;Returns true if there is no collection item which equals to the operand otherwise false.
#method=new,enumerable,action;Returns a searching action
#method=proceed,magnitude;Searches the enumerable object for the object equaled to the specified and returns it or nil if no equal object found
