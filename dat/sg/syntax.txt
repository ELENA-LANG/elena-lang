__define START          	1
__define eps            	2

__define CLASS		        4110
__define TEMPLATE               4111
__define SUBJECT_ARG		4112
__define SYMBOL		        4113
__define EXPRESSION		4114
__define FIELD			4115
__define TOKEN_PARAM		4117
__define METHOD			4118
__define PARAMETER		4119
__define NESTED_CLASS		4120
__define OBJECT			4121
__define CODE_BLOCK		4122
__define MESSAGE		4123
__define MESSAGE_PARAMETER	4124
__define BLOCK_END		4125
__define VARIABLE		4126
__define L4_OPERATION           4127
__define DISPATCH               4128
__define ASSIGNING		4129
__define BASE_CLASS             4131
__define L3_OPERATION           4133
__define L7_OPERATION           4134
__define RET_STATEMENT		4135
__define L5_OPERATION           4136
__define EXTENSION		4139
__define FORWARD		4142
__define RESEND                 4145
__define MESSAGE_REFERENCE	4147
__define IMPORT                 4149
__define ROOT_EXPRESSION        4152
__define L6_OPERATION           4161
__define TYPE                   4167
__define TOKEN   		4172
__define SCOPE   		4173

__define eof            	12291
__define literal		12292
__define identifier		12293
__define private	        12294
__define reference		12295
__define integer		12296
__define hex			12297
__define wide                   12301

START ->
	INCLUDE_DECLARATION INCLUDE_DECLARATIONS DECLARATIONS eof
	| SYMBOL_DECLARATION DECLARATIONS eof
	| SCOPE_DECLARATION DECLARATIONS eof
	| CLASS_DECLARATION DECLARATIONS eof
	| TEMPLATE_DECLARATION DECLARATIONS
	| TYPE_DECLARATION DECLARATIONS eof
	| eof
	
DECLARATIONS ->
	SYMBOL_DECLARATION DECLARATIONS
	| CLASS_DECLARATION DECLARATIONS eof
	| SCOPE_DECLARATION DECLARATIONS
	| TEMPLATE_DECLARATION DECLARATIONS
	| TYPE_DECLARATION DECLARATIONS eof
	| eps
	
INCLUDE_DECLARATIONS ->
	INCLUDE_DECLARATION INCLUDE_DECLARATIONS
	| eps

INCLUDE_DECLARATION ->
	#import IMPORT

SCOPE_DECLARATION ->
	TOKEN TOKENS SCOPE
	
SYMBOL_DECLARATION ->
	#symbol SYMBOL

CLASS_DECLARATION ->
	#class CLASS

TEMPLATE_DECLARATION ->
	#template HINTS TEMPLATE

TYPE_DECLARATION ->
	#subject HINTS TYPE

TOKENS ->
	TOKEN TOKENS
	| eps
	
FIELDS ->
	#field HINTS FIELD FIELDS
	| eps

METHODS ->
	#method HINTS METHOD METHODS
	| eps	

SCOPES ->
	TOKEN TOKENS SCOPE SCOPES
	| eps

HINTS ->
	( HINT NEXT_HINT
	| eps

OPERATIONS ->
	MESSAGE MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| EXTENSION MESSAGE MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
        | L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS
	| L6_OPERATION L6_OPERATIONS
        | L7_OPERATION
	| eps
	
MESSAGE_OPERATIONS ->
	MESSAGE MESSAGE_OPERATIONS
	| eps

METHOD_ARGUMENTS ->
	: PARAMETER GENERIC_ARGUMENTS
	| & SUBJECT_ARG : PARAMETER ARGUMENTS
	| eps
	
GENERIC_ARGUMENTS ->
	: PARAMETER GENERIC_ARGUMENTS
	| & SUBJECT_ARG : PARAMETER ARGUMENTS
	| eps
	
ARGUMENTS ->
	& SUBJECT_ARG : PARAMETER ARGUMENTS
	| eps

GENERIC_MESSAGE_ARGUMENTS ->
	: MESSAGE_PARAMETER GENERIC_MESSAGE_ARGUMENTS
	| & SUBJECT_ARG SUBJECT_ARG_BODY
	| eps

TEMPLATE_PARAMETERS ->
	( PARAMETER NEXT_TEMPLATE_PARAMETERS
	| eps

NEXT_TEMPLATE_PARAMETERS ->
	, PARAMETER NEXT_TEMPLATE_PARAMETERS
	| )

STATEMENTS ->
	ROOT_EXPRESSION NEXT_STATEMENT
	| #var VARIABLE DIRECTIVE_END STATEMENTS
	| ^ RET_STATEMENT TERMINATOR BLOCK_END
	| BLOCK_END	
	
ROOT_OPERATIONS ->
	MESSAGE ROOT_OPERATIONS
	| EXTENSION MESSAGE MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
        | L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS
        | L7_OPERATION
	| ASSIGNING
	| eps

L3_OPERATIONS ->
	L3_OPERATION L3_OPERATIONS
	| eps

L4_OPERATIONS ->
	L4_OPERATION L4_OPERATIONS
	| eps

L5_OPERATIONS ->
	L5_OPERATION L5_OPERATIONS
	| eps

L6_OPERATIONS ->
	L6_OPERATION L6_OPERATIONS
	| eps	

TOKEN_PARAMS ->
	TOKEN_PARAM , TOKEN_PARAMS
	| )

HINT  ->
	TOKEN

NEXT_HINT ->
	, HINT NEXT_HINT
	| )

TOKEN ->
	identifier TOKEN_BODY
	| integer
	| hex

TOKEN_PARAM ->
	identifier
	| integer
	| hex
	
RESEND ->
	MESSAGE

SYMBOL ->
	identifier SYMBOL_BODY

CLASS ->
	identifier CLASS_BODY
	| private CLASS_BODY
	      
NESTED_CLASS ->
	{ SCOPES CLOSING_CURLY_BRACKET

FIELD ->
	identifier TERMINATOR
	| private TERMINATOR

METHOD ->
	identifier METHOD_ARGUMENTS METHOD_BODY

SCOPE ->
	= SYMBOL_EXPRESSION DECLARATION_END
	| => DISPATCH DECLARATION_END
	| { FIELDS METHODS SCOPES CLOSING_CURLY_BRACKET
	| CODE_BLOCK
	| : PARAMETER GENERIC_ARGUMENTS METHOD_BODY
	| & SUBJECT_ARG : PARAMETER ARGUMENTS METHOD_BODY
	| :: BASE_CLASS { FIELDS METHODS SCOPES CLOSING_CURLY_BRACKET
	| DECLARATION_END
	
TEMPLATE ->
	identifier TEMPLATE_PARAMETERS TEMPLATE_BODY
	
IMPORT ->
	identifier DECLARATION_END

MESSAGE ->
	identifier MESSAGE_BODY
	
VARIABLE ->
	identifier VARIABLE_BODY

TYPE ->
	identifier TYPE_BODY DECLARATION_END
	| private TYPE_BODY DECLARATION_END
	
FORWARD ->
	reference
	| identifier

PARAMETER ->
	identifier

SUBJECT_ARG ->
	identifier

MESSAGE_REFERENCE ->
	identifier
	| literal
	
BASE_CLASS ->
	identifier
	| reference
	| private
	
MESSAGE_PARAMETER ->
	OBJECT

ASSIGNING ->
	:= EXPRESSION
	
SYMBOL_BODY ->
	= SYMBOL_EXPRESSION DECLARATION_END

CLASS_BODY ->
	:: BASE_CLASS { FIELDS METHODS SCOPES CLOSING_CURLY_BRACKET
	| { FIELDS METHODS SCOPES CLOSING_CURLY_BRACKET

TEMPLATE_BODY ->
	{ METHODS SCOPES CLOSING_CURLY_BRACKET
	
METHOD_BODY ->
	= RET_STATEMENT DECLARATION_END
	| CODE_BLOCK
	| => DISPATCH DECLARATION_END
	| <= RESEND DECLARATION_END

VARIABLE_BODY ->
	ASSIGNING
	| eps

TOKEN_BODY ->
	( TOKEN_PARAM TOKEN_PARAMS
	| eps

CODE_BLOCK ->
	[ FIRST_STATEMENT

TYPE_BODY ->
	= FORWARD
	| eps

MESSAGE_BODY ->
	: MESSAGE_PARAMETER GENERIC_MESSAGE_ARGUMENTS
	| & SUBJECT_ARG SUBJECT_ARG_BODY
	| eps

SUBJECT_ARG_BODY ->
	: MESSAGE_PARAMETER NEXT_SUBJECT_ARG

OBJECT_BODY ->
	NESTED_CLASS
	| eps
	
ELSE_BODY ->
	ELSE_OPERATION
	| eps	

NEXT_SUBJECT_ARG ->
	& SUBJECT_ARG SUBJECT_ARG_BODY
	| eps

FIRST_STATEMENT ->
        ROOT_EXPRESSION NEXT_EXPRESSION
	| #var VARIABLE DIRECTIVE_END STATEMENTS
	| ^ RET_STATEMENT TERMINATOR BLOCK_END
	| BLOCK_END
	
RET_STATEMENT ->
	EXPRESSION

ROOT_EXPRESSION ->
	OBJECT ROOT_OPERATIONS

NEXT_EXPRESSION ->
	STATEMENT_END2 STATEMENTS
	| BLOCK_END
	
NEXT_STATEMENT ->
	STATEMENT_END STATEMENTS

SYMBOL_EXPRESSION ->
	EXPRESSION

SUB_EXPRESSION ->
	EXPRESSION NEXT_SUB_EXPRESSION

NEXT_SUB_EXPRESSION ->
	CLOSING_BRACKET

EXPRESSION ->
	OBJECT OPERATIONS
	
L3_OPERATION ->
	* L3_OPERAND
	| / L3_OPERAND
	| *= L3_OPERAND
	| /= L3_OPERAND
	| && L3_OPERAND
	| ^^ L3_OPERAND
	
L4_OPERATION ->
	+ L4_OPERAND
	| - L4_OPERAND
	| += L4_OPERAND
	| -= L4_OPERAND
	| &| L4_OPERAND

L5_OPERATION ->
	<< L5_OPERAND
	| >> L5_OPERAND

L6_OPERATION ->
	== L6_OPERAND
	| != L6_OPERAND
	| < L6_OPERAND
	| > L6_OPERAND
	| <= L6_OPERAND
	| >= L6_OPERAND

L7_OPERATION ->
	? L7_OPERAND ELSE_BODY
	| ! L7_OPERAND
	
ELSE_OPERATION ->
	! L7_OPERAND
	
L3_OPERAND ->
	OBJECT MESSAGE_OPERATIONS
	
L4_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS

L5_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS
	
L6_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	
L7_OPERAND ->
	CODE_BLOCK

OBJECT ->
	identifier OBJECT_BODY
	| private
	| reference
	| integer
	| hex
	| literal
	| wide
	| ( SUB_EXPRESSION
	| % MESSAGE_REFERENCE
	| NESTED_CLASS
	
DISPATCH ->
	OBJECT

EXTENSION ->
	:: OBJECT

TERMINATOR ->
	.

CLOSING_CURLY_BRACKET ->
	}

CLOSING_BRACKET ->
	)

BLOCK_END ->
	]
	| BLOCK_CLOSING_EXPECTED

DECLARATION_END ->
	TERMINATOR
	| DECLARATION_END_EXPECTED

STATEMENT_END2 ->
	TERMINATOR
	| STATEMENT_END2_EXPECTED

DIRECTIVE_END ->
	TERMINATOR
	| DIRECTIVE_END_EXPECTED

STATEMENT_END ->
	TERMINATOR
	| STATEMENT_END_EXPECTED
