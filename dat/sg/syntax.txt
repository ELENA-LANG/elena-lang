__define START          	 1
__define eps            	 2

// NOTE : low word should be unique for every key
__define SCOPE_DECLARATION	 4128
__define SCOPE_CLASS_DECLARATION 4129
__define SCOPE_FIELD_DECLARATION 4130
__define BLOCK 		         4192
__define DISPATCH		 4208
__define MESSAGE	         4224
__define BLOCK_END	         4240
__define PARAMETER 		 4304
__define FIELD_ASSIGNER          4384
__define INLINE_DECLARATION 	 4432
__define INLINE_ARG 	         4448
__define INLINE_ARG_PARAM        4576
__define RET_EXPRESSION	       201280
__define MESSAGE_OP_END       4395568
__define ASSIGNMENT_OP_END    4395776
__define TOKEN_ARGS_END       6296336

// virtual node - is replaced by derivation magic
__define EXPR_TOKEN_ARGS      7344912

__define TOKEN 	              8392720
__define SCOPE_TOKEN 	      8392721
__define EXPRESSION           8589840
__define ROOT_EXPRESSION      8589841
__define OPERAND_EXPRESSION   8589842

__define eof            	 8208
__define identifier 	 	 8209
__define hex 			 8210
__define reference		 8211
__define global			 8212
__define integer                 8213
__define literal                 8214
__define meta                    8215
__define wide                    8216
__define character               8217
__define long                    8218
__define real                    8219
__define constant                8220

START ->
	DECLARATION DECLARATIONS eof
	| eof

DECLARATION ->
        SCOPE_TOKEN NEXT_DECLARATION_ITEM
	| OPENING_SBRACKET INLINE_ARG INLINE_ARGS SCOPE_TOKEN NEXT_DECLARATION_ITEM
	| #inline SCOPE_TOKEN INLINE_DECLARATION

INLINE_DECLARATION ->
	 OPENING_CURLY_BRACKET SCOPE_FIELD_DECLARATIONS CLOSING_CURLY_BRACKET

INLINE_ARGS ->
	OPENING_SBRACKET INLINE_ARG INLINE_ARGS
	| eps	

DECLARATIONS ->
	DECLARATION DECLARATIONS
	| eps

NEXT_DECLARATION_ITEM ->
	SCOPE_TOKEN NEXT_DECLARATION_ITEM
	| SCOPE_DECLARATION

SCOPE_DECLARATION ->
        CLASS_DECLARATION
	| SYMBOL_DECLARATION DECLARATION_END
	| METHOD_DECLARATION
	| ASSIGN_OPERATOR FIELD_ASSIGNER DECLARATION_END
	| DECLARATION_END

SCOPE_FIELD_DECLARATION ->
	ASSIGN_OPERATOR FIELD_ASSIGNER DECLARATION_END	

SCOPE_FIELD_DECLARATIONS ->
	SCOPE_TOKEN NEXT_FIELD_TOKEN SCOPE_FIELD_DECLARATION SCOPE_FIELD_DECLARATIONS
	| eps

CLASS_DECLARATION ->
	{ SCOPE_DECLARATIONS }

SYMBOL_DECLARATION ->
	= EXPRESSION

METHOD_DECLARATION ->
	( PARAMETERS ) METHOD_BODY

FIELD_ASSIGNER ->
	EXPRESSION

SCOPE_DECLARATIONS ->
	SCOPE_TOKEN NEXT_DECLARATION_ITEM SCOPE_DECLARATIONS
	| eps

NEXT_FIELD_TOKEN ->
	SCOPE_TOKEN NEXT_FIELD_TOKEN
	| eps

METHOD_BODY ->
	BLOCK
	| = RET_EXPRESSION DECLARATION_END
	| => DISPATCH DECLARATION_END

DISPATCH ->
	EXPRESSION

RET_EXPRESSION ->
	EXPRESSION

BLOCK ->
	OPENING_CURLY_BRACKET STATEMENTS

STATEMENTS ->
	STATEMENT NEXT_STATEMENT
	| BLOCK_END

NEXT_STATEMENT ->
        DECLARATION_END STATEMENTS
	| BLOCK_END

STATEMENT ->
	ROOT_EXPRESSION

ROOT_EXPRESSION ->
	TOKEN TR_OPERATIONS
	| integer E_OPERATIONS
	| long E_OPERATIONS
	| real E_OPERATIONS
	| hex E_OPERATIONS
	| literal E_OPERATIONS
	| character E_OPERATIONS
	| wide E_OPERATIONS
	| constant E_OPERATIONS

EXPRESSION ->
        TOKEN TI_OPERATIONS
	| integer E_OPERATIONS
	| long E_OPERATIONS
	| real E_OPERATIONS
	| hex E_OPERATIONS
	| literal E_OPERATIONS
	| character E_OPERATIONS
	| wide E_OPERATIONS
	| constant E_OPERATIONS
	| meta

OPERAND_EXPRESSION ->
	literal

TOKENS ->
	TOKEN NEXT_TOKEN

NEXT_TOKEN ->
	TOKENS
	| eps

TOKEN ->
	identifier
	| reference

SCOPE_TOKEN ->
	identifier TOKEN_ARGS
	| reference TOKEN_ARGS

TOKEN_ARGS ->
	OPENING_EDGE_BRACKET TOKEN_ARG NEXT_TOKEN_ARG TOKEN_ARGS_END
	| eps

EXPR_TOKEN_ARGS ->
	OPENING_EDGE_BRACKET TOKEN_ARG NEXT_TOKEN_ARG TOKEN_ARGS_END

TOKEN_ARG ->
	SCOPE_TOKEN

NEXT_TOKEN_ARG ->
	, TOKEN_ARG NEXT_TOKEN_ARG
	| eps

TOKEN_ARGS_END ->
	CLOSING_EDGE_BRACKET

TR_OPERATIONS ->
	TOKEN T_OPERATIONS
	| T0_OPERATIONS

TI_OPERATIONS ->
	TOKEN T_OPERATIONS
	| L1_OPERATION L1_OPERATIONS
	| L2_OPERATION L2_OPERATIONS
	| ASSIGNMENT_OPERATION
	| OPERATIONS

T_OPERATIONS ->
	TOKEN T_OPERATIONS
	| L1_OPERATION L1_OPERATIONS L2_OPERATIONS
        | T0_OPERATIONS

T0_OPERATIONS ->
	EXPR_TOKEN_ARGS TEMPLATE_OPERATIONS
	| L2_OPERATION L2_OPERATIONS 
	| ASSIGNMENT_OPERATION
	| OPERATIONS

E_OPERATIONS ->
        L1_OPERATION L1_OPERATIONS L2_OPERATIONS
	| L2_OPERATION L2_OPERATIONS
	| OPERATIONS

OPERATIONS ->
	eps

TEMPLATE_OPERATIONS ->
	TOKEN ASSIGNMENT_OPERATIONS

ASSIGNMENT_OPERATIONS ->
	ASSIGNMENT_OPERATION
	| eps	

L1_OPERATIONS ->
	L1_OPERATION L1_OPERATIONS
	| eps

L1_OPERATION ->
  	IMPLICIT_OPERATION

L2_OPERATIONS ->
	L2_OPERATION L2_OPERATIONS
	| eps

L2_OPERATION ->
	. L2_OPERATOR_BODY

L2_OPERATOR_BODY ->
	MESSAGE MESSAGE_BODY

IMPLICIT_OPERATION ->
        OPENING_BRACKET MESSAGE_PARAMETERS MESSAGE_OP_END

MESSAGE_BODY ->
	OPENING_BRACKET MESSAGE_PARAMETERS MESSAGE_OP_END

MESSAGE_OP_END ->
	CLOSING_BRACKET 

PARAMETERS ->
	PARAMETER NEXT_PARAMETER	
	| eps

NEXT_PARAMETER ->
	, PARAMETER NEXT_PARAMETER
	| eps	

MESSAGE_PARAMETERS ->
	EXPRESSION NEXT_MESSAGE_PARAMETER
	| eps

NEXT_MESSAGE_PARAMETER ->
	, EXPRESSION NEXT_MESSAGE_PARAMETER
	| eps	

MESSAGE ->
	identifier

PARAMETER ->
	TOKENS	

ASSIGNMENT_OPERATION ->
	ASSIGN_OPERATOR EXPRESSION ASSIGNMENT_OP_END

ASSIGNMENT_OP_END ->
	eps

ASSIGN_OPERATOR ->
	:=

INLINE_ARG ->
	identifier INLINE_PARAMS 

INLINE_PARAMS ->
	: OPERAND_EXPRESSION NEXT_INLINE_PARAM
	| CLOSING_SBRACKET

NEXT_INLINE_PARAM ->
	, OPERAND_EXPRESSION NEXT_INLINE_PARAM
	| CLOSING_SBRACKET

OPENING_BRACKET ->
	(

OPENING_CURLY_BRACKET ->
	{

OPENING_EDGE_BRACKET ->
	<

OPENING_SBRACKET ->
	[

DECLARATION_END ->
	;

CLOSING_EDGE_BRACKET ->
	>

CLOSING_BRACKET ->
	)

BLOCK_END ->
	}

CLOSING_SBRACKET ->
	]

CLOSING_CURLY_BRACKET ->
	}
