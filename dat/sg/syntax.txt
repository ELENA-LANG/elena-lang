__define START          	 1
__define eps            	 2

// NOTE : low word should be unique for every key
__define TOKEN_ARGS_START	 4096
__define DYNAMIC_OP_START	 4097
__define TOKEN 	                 4112
__define SCOPE_TOKEN 	         4113
__define PARAM_TOKEN 	         4114
__define SCOPE_DECLARATION	 4128
__define SCOPE_CLASS_DECLARATION 4129
__define SCOPE_FIELD_DECLARATION 4130
__define ATTRIBUTE_DECLARATION   4144
__define SIZE 			 4160
__define BASE 			 4176
__define STATEMENT_BASE          4177
__define DISPATCH		 4208
__define MESSAGE	         4224
__define BLOCK_END	         4240
__define NESTED_CLASS		 4288
__define PARAMETER 		 4304
__define STATEMENT_DECLARATION   4352
__define FIELD_ASSIGNER          4384
__define INLINE_DECLARATION 	 4432
__define INLINE_ARG 	         4448
__define PROP_DECLARATION 	 4512
__define OPTION 		 4528
__define LAST_OPTION 		 4544
__define INLINE_ARG_PARAM        4576
__define L3_OPERATOR  	       135408
__define L4_OPERATOR  	       135409
__define L5_OPERATOR  	       135410
__define L6_OPERATOR  	       135411
__define L7_OPERATOR  	       135412
__define L8_OPERATOR  	       135413
__define L8b_OPERATOR  	       135414
__define L8c_OPERATOR          135416
__define LU1_OPERATOR          135417
__define LU2_OPERATOR          135418
__define LU2b_OPERATOR         135419
__define ASSIGNING_OPERATOR    135419
__define TEMPLATE_OPERATOR     135420
__define BLOCK 		       200800
__define RET_EXPRESSION	       201280
__define RESEND 	       201504
__define LU1_OPERATION         201824
__define LU2_OPERATION         201825
__define LU2_SINGLE_OPERATION  201826
__define OPERATOR_L3_END      4395184
__define OPERATOR_L4_END      4395185
__define OPERATOR_L5_END      4395186
__define OPERATOR_L6_END      4395187
__define OPERATOR_L7_END      4395188
__define OPERATOR_L8_END      4395189
__define ASSIGNING_OP_END     4395190
__define CONTROL_OP_END       4395280
__define PROPERTY_OP_END      4395312
__define CLOSURE_OP_END       4395328
__define CLOSURE_OP2_END      4395329
__define ARRAY_OP_END         4395392
__define MESSAGE_OP_END       4395568
__define MESSAGE_OP2_END      4395569
__define ASSIGNMENT_OP_END    4395776
__define NESTED_OP_END        4396096
__define SWITCH_OP_END        4396176
__define COLLECTION_OP_END    4396192
__define INLINE_OP_END        4396208
__define TOKEN_ARGS_END       6296336
__define DYNAMIC_OP_END       6296432
__define EXPRESSION            201232
__define ROOT_EXPRESSION       201233
__define OPERAND_EXPRESSION    201234
__define L3_EXPRESSION         201235
__define L4_EXPRESSION         201236
__define L5_EXPRESSION         201237
__define L6_EXPRESSION         201238
__define L8_EXPRESSION         201239
__define LU2_EXPRESSION        201240
__define SUB_EXPRESSION        201241
__define NESTED_EXPRESSION     201242
__define DCOLON_EXPRESSION     201243
__define NO_BODY               201536  

__define eof            	 8208
__define identifier 	 	 8209
__define hex 			 8210
__define reference		 8211
__define global			 8212
__define integer                 8213
__define literal                 8214
__define meta                    8215
__define wide                    8216
__define character               8217
__define long                    8218
__define real                    8219
__define constant                8220

START ->
	DECLARATION DECLARATIONS eof
	| eof

DECLARATION ->
        SCOPE_TOKEN NEXT_DECLARATION_ITEM
	| OPENING_SBRACKET INLINE_ARG INLINE_ARGS SCOPE_TOKEN NEXT_DECLARATION_ITEM
	| #inline SCOPE_TOKEN INLINE_DECLARATION
	| #declare SCOPE_TOKEN STATEMENT_DECLARATION
	| #define ATTRIBUTE_DECLARATION
	| #property SCOPE_TOKEN PROP_DECLARATION

ATTRIBUTE_DECLARATION ->
	identifier SIZE

INLINE_DECLARATION ->
	 OPENING_CURLY_BRACKET SCOPE_FIELD_DECLARATIONS CLOSING_CURLY_BRACKET

INLINE_ARGS ->
	OPENING_SBRACKET INLINE_ARG INLINE_ARGS
	| eps	

PROP_DECLARATION ->
	CLASS_DECLARATION

DECLARATIONS ->
	DECLARATION DECLARATIONS
	| eps

NEXT_DECLARATION_ITEM ->
	SCOPE_TOKEN NEXT_DECLARATION_ITEM
	| SCOPE_DECLARATION

STATEMENT_DECLARATION ->
	STATEMENT_DECLARATION_BODY

STATEMENT_DECLARATION_BODY ->
	METHOD_DECLARATION
	| COLON STATEMENT_BASE STATEMENT_DECLARATION_BODY

SCOPE_DECLARATION ->
        CLASS_DECLARATION
	| COLON BASE BASE_DECLARATION
	| SYMBOL_DECLARATION DECLARATION_END
	| METHOD_DECLARATION
	| ASSIGN_OPERATOR FIELD_ASSIGNER DECLARATION_END
	| SIZE_DECLARATION DECLARATION_END
	| DECLARATION_END

SCOPE_FIELD_DECLARATION ->
	ASSIGN_OPERATOR FIELD_ASSIGNER DECLARATION_END	

SCOPE_FIELD_DECLARATIONS ->
	SCOPE_TOKEN NEXT_FIELD_TOKEN SCOPE_FIELD_DECLARATION SCOPE_FIELD_DECLARATIONS
	| eps

BASE_DECLARATION ->
	CLASS_DECLARATION
	| DECLARATION_END
	| , BASE BASE_DECLARATION

SIZE_DECLARATION ->
	[ SIZE ]

CLASS_DECLARATION ->
	{ SCOPE_DECLARATIONS }

SYMBOL_DECLARATION ->
	= EXPRESSION

METHOD_DECLARATION ->
	( PARAMETERS ) METHOD_BODY

FIELD_ASSIGNER ->
	EXPRESSION

SCOPE_DECLARATIONS ->
	SCOPE_TOKEN NEXT_DECLARATION_ITEM SCOPE_DECLARATIONS
	| OPENING_SBRACKET INLINE_ARG INLINE_ARGS SCOPE_TOKEN NEXT_DECLARATION_ITEM SCOPE_DECLARATIONS
	| eps

NEXT_FIELD_TOKEN ->
	SCOPE_TOKEN NEXT_FIELD_TOKEN
	| eps

METHOD_BODY ->
	BLOCK
	| = RET_EXPRESSION DECLARATION_END
	| => DISPATCH DECLARATION_END
	| <= RESEND RESEND_DECLARATION
	| NO_BODY

RESEND_DECLARATION ->
	DECLARATION_END
	| BLOCK

DISPATCH ->
	EXPRESSION

RET_EXPRESSION ->
	EXPRESSION

BLOCK ->
	OPENING_CURLY_BRACKET STATEMENTS

STATEMENTS ->
	STATEMENT NEXT_STATEMENT
	| ^ RET_EXPRESSION RET_STATEMENT_END
	| BLOCK_END

NEXT_STATEMENT ->
        DECLARATION_END STATEMENTS
	| BLOCK_END

STATEMENT ->
	ROOT_EXPRESSION

ROOT_EXPRESSION ->
	TOKEN TR_OPERATIONS
	| OPENING_BRACKET SUB_EXPRESSION E_OPERATIONS
	| integer E_OPERATIONS
	| long E_OPERATIONS
	| real E_OPERATIONS
	| hex E_OPERATIONS
	| literal E_OPERATIONS
	| character E_OPERATIONS
	| wide E_OPERATIONS
	| constant E_OPERATIONS
	| LU1_OPERATION E_OPERATIONS
	| LU2_OPERATION

NESTED_EXPRESSION ->
	TOKEN TR_OPERATIONS
	| OPENING_BRACKET SUB_EXPRESSION E_OPERATIONS
	| integer E_OPERATIONS
	| long E_OPERATIONS
	| real E_OPERATIONS
	| hex E_OPERATIONS
	| literal E_OPERATIONS
	| character E_OPERATIONS
	| wide E_OPERATIONS
	| constant E_OPERATIONS

EXPRESSION ->
        TOKEN TI_OPERATIONS
	| OPENING_BRACKET SUB_EXPRESSION E_OPERATIONS
	| CLOSURE_EXPRESSION E_OPERATIONS
	| integer E_OPERATIONS
	| long E_OPERATIONS
	| real E_OPERATIONS
	| hex E_OPERATIONS
	| literal E_OPERATIONS
	| character E_OPERATIONS
	| wide E_OPERATIONS
	| constant E_OPERATIONS
	| meta
	| LU1_OPERATION E_OPERATIONS
	| LU2_OPERATION

LU2_EXPRESSION ->
	TOKEN E3_OPERATIONS
	| integer E3_OPERATIONS
	| long E3_OPERATIONS
	| real E3_OPERATIONS
	| hex E3_OPERATIONS
	| literal E3_OPERATIONS
	| character E3_OPERATIONS
	| wide E3_OPERATIONS
	| constant E3_OPERATIONS

L3_EXPRESSION ->
	TOKEN E3_OPERATIONS
	| OPENING_BRACKET SUB_EXPRESSION E3_OPERATIONS
	| integer E3_OPERATIONS
	| long E3_OPERATIONS
	| real E3_OPERATIONS
	| hex E3_OPERATIONS
	| literal E3_OPERATIONS
	| character E3_OPERATIONS
	| wide E3_OPERATIONS
	| constant E3_OPERATIONS
	| LU2_SINGLE_OPERATION

L4_EXPRESSION ->
	TOKEN T4_OPERATIONS
	| OPENING_BRACKET SUB_EXPRESSION E4_OPERATIONS
	| integer E4_OPERATIONS
	| long E4_OPERATIONS
	| real E4_OPERATIONS
	| hex E4_OPERATIONS
	| literal E4_OPERATIONS
	| character E4_OPERATIONS
 	| wide E4_OPERATIONS
 	| constant E4_OPERATIONS
	| LU2_SINGLE_OPERATION

L5_EXPRESSION ->
	TOKEN T5_OPERATIONS
	| OPENING_BRACKET SUB_EXPRESSION E5_OPERATIONS
	| integer E5_OPERATIONS
	| long E5_OPERATIONS
	| real E5_OPERATIONS
	| hex E5_OPERATIONS
	| literal E5_OPERATIONS
	| character E5_OPERATIONS
	| wide E5_OPERATIONS
	| constant E5_OPERATIONS
	| LU2_SINGLE_OPERATION

L6_EXPRESSION ->
	TOKEN T6_OPERATIONS
	| OPENING_BRACKET SUB_EXPRESSION E6_OPERATIONS
	| integer E6_OPERATIONS
	| long E6_OPERATIONS
	| real E6_OPERATIONS
	| hex E6_OPERATIONS
	| literal E6_OPERATIONS
	| character E6_OPERATIONS
	| wide E6_OPERATIONS
	| constant E6_OPERATIONS
	| LU2_SINGLE_OPERATION

L8_EXPRESSION ->
	MESSAGE MESSAGE_BODY

OPERAND_EXPRESSION ->
	TOKEN
	| OPENING_BRACKET SUB_EXPRESSION
	| integer
	| long
	| real
	| hex
	| literal
	| character
	| wide
	| constant

SUB_EXPRESSION ->
	TOKEN SUB_TR_OPERATIONS
        | OPENING_BRACKET SUB_EXPRESSION E_OPERATIONS CLOSING_BRACKET
	| integer E_OPERATIONS CLOSING_BRACKET
	| long E_OPERATIONS CLOSING_BRACKET
	| real E_OPERATIONS CLOSING_BRACKET
	| hex E_OPERATIONS CLOSING_BRACKET
	| literal E_OPERATIONS CLOSING_BRACKET
	| wide E_OPERATIONS CLOSING_BRACKET
	| character E_OPERATIONS CLOSING_BRACKET
	| constant E_OPERATIONS CLOSING_BRACKET
	| LU1_OPERATION E_OPERATIONS CLOSING_BRACKET
	| LU2_OPERATION CLOSING_BRACKET

L7_OPERAND ->
	BLOCK
	| OPERAND_EXPRESSION

L8_OPERAND ->
	BLOCK
	| OPERAND_EXPRESSION

TOKENS ->
	PARAM_TOKEN NEXT_TOKEN

NEXT_TOKEN ->
	TOKENS
	| eps

TOKEN ->
	identifier
	| reference

SCOPE_TOKEN ->
	identifier TOKEN_R 
	| reference TOKEN_R

TOKEN_R ->
	DYNAMIC_OP TOKEN_R2
	| TOKEN_ARGS TOKEN_R2
	| eps

TOKEN_R2 ->
	DYNAMIC_OP TOKEN_R2
	| eps

PARAM_TOKEN ->
	identifier TOKEN_R
	| reference TOKEN_R

TOKEN_ARGS ->
	OPENING_EDGE_BRACKET TOKEN_ARG NEXT_TOKEN_ARG TOKEN_ARGS_END

EXPR_TOKEN_ARGS ->
	 TOKEN_ARGS_START TOKEN_ARG NEXT_TOKEN_ARG TOKEN_ARGS_END

TOKEN_ARGS_START ->
	OPENING_EDGE_BRACKET

TOKEN_ARG ->
	SCOPE_TOKEN

NEXT_TOKEN_ARG ->
	, TOKEN_ARG NEXT_TOKEN_ARG
	| eps

TOKEN_ARGS_END ->
	CLOSING_EDGE_BRACKET

DYNAMIC_OP ->
	DYNAMIC_OPERATOR DYNAMIC_OP_END

EXPR_DYNAMIC_OP ->
	DYNAMIC_OP_START DYNAMIC_OP_END

TR_OPERATIONS ->
	TOKEN T_OPERATIONS
	| IMPLICIT_OPERATION IOR_FOLLOWERS
	| ROOT_CONTROL_OPERATION
	| T0_OPERATIONS

SUB_TR_OPERATIONS ->
	L5_OPERATION L6_OPERATIONS L7_OPERATIONS CLOSING_BRACKET
	| SUB_T_OPERATIONS

SUB_T_OPERATIONS ->
	TOKEN SUB_TI_OPERATIONS
	| L0_OPERATION L0_OPERATIONS L0_FOLLOWERS CLOSING_BRACKET
	| L1_OPERATION L1_OPERATIONS L1_FOLLOWERS CLOSING_BRACKET
	| L2_OPERATION L2_OPERATIONS L2_FOLLOWERS CLOSING_BRACKET
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS CLOSING_BRACKET
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS CLOSING_BRACKET
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS CLOSING_BRACKET
	| L8_OPERATION CLOSING_BRACKET	
	| CLOSING_BRACKET SUB_T0_OPERATIONS
	| => RET_EXPRESSION CLOSURE_OP2_END 
	| , PARAMETER SUB_T_PARAMETERS

SUB_T0_OPERATIONS ->
	CLOSURE_EXPRESSION
	| eps

SUB_TI_OPERATIONS ->
	TOKEN SUB_TI_OPERATIONS
	| L0_OPERATION L0_OPERATIONS L0_FOLLOWERS CLOSING_BRACKET
	| L1_OPERATION L1_OPERATIONS L1_FOLLOWERS CLOSING_BRACKET
	| L2_OPERATION L2_OPERATIONS L2_FOLLOWERS CLOSING_BRACKET
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS CLOSING_BRACKET
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS CLOSING_BRACKET
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS CLOSING_BRACKET
	| CLOSING_BRACKET SUB_T0_OPERATIONS
	| => RET_EXPRESSION CLOSURE_OP2_END
	| , PARAMETER SUB_T_PARAMETERS

TI_OPERATIONS ->
	TOKEN T_OPERATIONS
	| L0_OPERATION L0_OPERATIONS L0_FOLLOWERS
	| L1_OPERATION L1_OPERATIONS L1_FOLLOWERS
	| L2_OPERATION L2_OPERATIONS L2_FOLLOWERS
	| L5_OPERATION L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| ASSIGNMENT_OPERATION
	| ASSIGNING_OPERATION
	| NESTED_OPERAND E_OPERATIONS
	| OPERATIONS

T_OPERATIONS ->
	TOKEN T_OPERATIONS
	| NESTED_OPERAND E_OPERATIONS
	| L1_OPERATION L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
        | T0_OPERATIONS

T0_OPERATIONS ->
	EXPR_TOKEN_ARGS TEMPLATE_OPERATIONS
	| EXPR_DYNAMIC_OP ARR_TEMPLATE_OPERATIONS
	| L0_OPERATION L0_OPERATIONS L0_FOLLOWERS
	| L2_OPERATION L2_OPERATIONS L2_FOLLOWERS
	| ASSIGNMENT_OPERATION
	| ASSIGNING_OPERATION
	| OPERATIONS
	| => SWITCHING

T4_OPERATIONS ->
	TOKEN T4_OPERATIONS
	| L0_OPERATION L0_OPERATIONS L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS
  	| E4_OPERATIONS

T5_OPERATIONS ->
	L0_OPERATION L0_OPERATIONS L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS
  	| E5_OPERATIONS

T6_OPERATIONS ->
	L0_OPERATION L0_OPERATIONS L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
  	| E6_OPERATIONS

E_OPERATIONS ->
	L0_OPERATION L0_OPERATIONS L0_FOLLOWERS
        | L1_OPERATION L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L2_OPERATION L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L5_OPERATION L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| OPERATIONS
	| => SWITCHING

E3_OPERATIONS ->
	L0_OPERATION L0_OPERATIONS L1_OPERATIONS L2_OPERATIONS
	| L1_OPERATION L1_OPERATIONS L2_OPERATIONS
	| L2_OPERATION L2_OPERATIONS
	| eps	

E4_OPERATIONS ->
	L1_OPERATION L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS
	| L2_OPERATION L2_OPERATIONS L3_OPERATIONS
	| L3_OPERATION L3_OPERATIONS
	| eps	

E5_OPERATIONS ->
	L1_OPERATION L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS
	| L2_OPERATION L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS
	| L4_OPERATION L4_OPERATIONS
	| eps	

E6_OPERATIONS ->
	L1_OPERATION L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| L2_OPERATION L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS
	| L5_OPERATION
	| eps	

OPERATIONS ->
	L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L7_OPERATION L8_OPERATIONS
	| L8_OPERATION
	| eps

TEMPLATE_OPERATIONS ->
	TOKEN ASSIGNMENT_OPERATIONS
	| EXPR_DYNAMIC_OP ARR_TEMPLATE_OPERATIONS
	| NESTED_OPERAND E_OPERATIONS
	| E_OPERATIONS

ARR_TEMPLATE_OPERATIONS ->
	TOKEN ASSIGNMENT_OPERATIONS
	| EXPR_DYNAMIC_OP ARR_TEMPLATE_OPERATIONS
	| COLLECTION E_OPERATIONS
	| E_OPERATIONS

ASSIGNMENT_OPERATIONS ->
	ASSIGNMENT_OPERATION
	| eps	

ARRAY_OPERATION ->
	OPENING_SBRACKET

L0_OPERATIONS ->
	L0_OPERATION L0_OPERATIONS
	| eps

L0_OPERATION ->
	ARRAY_OPERATION EXPRESSION ARRAY_OP_END  

L1_OPERATIONS ->
	L1_OPERATION L1_OPERATIONS
	| eps

L1_OPERATION ->
  	IMPLICIT_OPERATION

L2_OPERATIONS ->
	L2_OPERATION L2_OPERATIONS
	| eps

L2_OPERATION ->
	. L2_OPERATOR_BODY

L2_OPERATOR_BODY ->
	MESSAGE MESSAGE_BODY
	| TEMPLATE_OPERATOR TEMPLATE_OPERATOR_BODY

RESEND ->
	MESSAGE RESEND_BODY

L0_FOLLOWERS ->
	L1_OPERATION L1_OPERATIONS L1_FOLLOWERS
	| L2_OPERATION L2_OPERATIONS L2_FOLLOWERS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L7_OPERATION L8_OPERATIONS
	| L8_OPERATION
	| ASSIGNMENT_OPERATION
	| eps

L1_FOLLOWERS ->
	L2_OPERATION L2_OPERATIONS L2_FOLLOWERS
	| L3_OPERATION L3_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L7_OPERATION L8_OPERATIONS
	| L8_OPERATION
	| eps

L2_FOLLOWERS ->
	L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L7_OPERATION L8_OPERATIONS
	| L8_OPERATION
	| ASSIGNMENT_OPERATION
	| eps

IOR_FOLLOWERS ->
	CONTROL_OPERATION
	| L2_OPERATION L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS L8_OPERATIONS
	| L5_OPERATION
	| OPERATIONS

ROOT_CONTROL_OPERATION ->
	BLOCK NEXT_CONTROL_OPERAND CONTROL_OP_END

CONTROL_OPERATION ->
	CONTROL_OPERAND CONTROL_OP_END

NEXT_CONTROL_OPERAND ->
	TOKEN CONTROL_OPERAND
	| eps

CONTROL_OPERAND ->
	BLOCK NEXT_CONTROL_OPERAND
	| LAST_CONTROL_OPERAND
	| :: DCOLON_EXPRESSION

LAST_CONTROL_OPERAND ->
	NESTED_ROOT_EXPR

NESTED_ROOT_EXPR ->
	NESTED_EXPRESSION	

COLLECTION ->
	OPENING_CURLY_BRACKET EXPRESSION NEXT_COLLECTION_ITEM COLLECTION_OP_END

NEXT_COLLECTION_ITEM ->
	, EXPRESSION NEXT_COLLECTION_ITEM
	| eps

NESTED_OPERAND ->
	OPENING_CURLY_BRACKET NESTED_CLASS NESTED_OP_END

NESTED_CLASS ->
	 SCOPE_DECLARATIONS 

DCOLON_EXPRESSION ->
	NESTED_OPERAND

SWITCHING ->
	OPTION OPTIONS SWITCH_OP_END

OPTION ->
	integer OPTION_BODY
	| character OPTION_BODY
	| literal OPTION_BODY
	| identifier OPTION_BODY

OPTION_BODY ->
	BLOCK

LAST_OPTION ->
	COLON OPTION_BODY

OPTIONS ->
	NEXT_OPTION
	| eps

NEXT_OPTION ->
	OPTION OPTIONS
	| LAST_OPTION

CLOSURE_EXPRESSION ->
	BLOCK CLOSURE_OP_END

LU1_OPERATION ->
	LU1_OPERATOR OPERAND_EXPRESSION

LU2_OPERATION ->
	LU2_OPERATOR LU2_EXPRESSION
	| LU2b_OPERATOR OPERAND_EXPRESSION

LU2_SINGLE_OPERATION ->
	LU2b_OPERATOR OPERAND_EXPRESSION

L3_OPERATIONS ->
	L3_OPERATION L3_OPERATIONS
	| eps

L3_OPERATION ->
	L3_OPERATOR L3_EXPRESSION OPERATOR_L3_END

L4_OPERATIONS ->
	L4_OPERATION L4_OPERATIONS
	| eps

L4_OPERATION ->
	L4_OPERATOR L4_EXPRESSION OPERATOR_L4_END

L5_OPERATIONS ->
	L5_OPERATION L5_OPERATIONS
	| eps

L5_OPERATION ->
	L5_OPERATOR L5_EXPRESSION OPERATOR_L5_END

L6_OPERATIONS ->
	L6_OPERATION L6_OPERATIONS
	| eps	 

L6_OPERATION ->
	L6_OPERATOR L6_EXPRESSION OPERATOR_L6_END

L7_OPERATIONS ->
	L7_OPERATION
	| eps

ELSE_OPERATIONS ->
	: L7_OPERAND
	| eps	

L7_OPERATION ->
	L7_OPERATOR L7_OPERAND ELSE_OPERATIONS OPERATOR_L7_END

L8_OPERATIONS ->
	L8_OPERATION
	| eps

L8_OPERATION ->
	L8_OPERATOR L8_EXPRESSION OPERATOR_L8_END
	| L8b_OPERATOR OPERAND_EXPRESSION OPERATOR_L8_END
	| L8c_OPERATOR L8_OPERAND \\ L8_EXPRESSION OPERATOR_L8_END

IMPLICIT_OPERATION ->
        OPENING_BRACKET MESSAGE_PARAMETERS MESSAGE_OP_END

TEMPLATE_OPERATOR_BODY ->
	MESSAGE MESSAGE_BODY INLINE_OP_END
	| IMPLICIT_OPERATION INLINE_OP_END		

MESSAGE_BODY ->
	OPENING_BRACKET MESSAGE_PARAMETERS MESSAGE_OP_END
	| PROPERTY_OP_END
	| : OPERAND_EXPRESSION MESSAGE_OP2_END
	| :: DCOLON_EXPRESSION

RESEND_BODY ->
	OPENING_BRACKET MESSAGE_PARAMETERS MESSAGE_OP_END
	| PROPERTY_OP_END

PROPERTY_OP_END ->
	eps

MESSAGE_OP_END ->
	CLOSING_BRACKET 

MESSAGE_OP2_END ->
	eps

ARRAY_OP_END ->
	CLOSING_SBRACKET

OPERATOR_L3_END ->
	eps

OPERATOR_L4_END ->
	eps

OPERATOR_L5_END ->
	eps

OPERATOR_L6_END ->
	eps

OPERATOR_L7_END ->
	eps

OPERATOR_L8_END ->
	eps

SWITCH_OP_END ->
	eps

NESTED_OP_END ->
	CLOSING_CURLY_BRACKET

COLLECTION_OP_END ->
	CLOSING_CURLY_BRACKET

INLINE_OP_END ->
	eps

PARAMETERS ->
	PARAMETER NEXT_PARAMETER	
	| eps

NEXT_PARAMETER ->
	, PARAMETER NEXT_PARAMETER
	| eps	

SUB_T_PARAMETERS ->
	CLOSING_BRACKET SUB_T0_OPERATIONS
	| , PARAMETER SUB_T_PARAMETERS
	| => RET_EXPRESSION CLOSURE_OP2_END

MESSAGE_PARAMETERS ->
	EXPRESSION NEXT_MESSAGE_PARAMETER
	| eps

NEXT_MESSAGE_PARAMETER ->
	, EXPRESSION NEXT_MESSAGE_PARAMETER
	| eps	

MESSAGE ->
	identifier

PARAMETER ->
	TOKENS	

ASSIGNMENT_OPERATION ->
	ASSIGN_OPERATOR EXPRESSION ASSIGNMENT_OP_END

ASSIGNING_OPERATION ->
	ASSIGNING_OPERATOR EXPRESSION ASSIGNING_OP_END

ASSIGNMENT_OP_END ->
	eps

ASSIGNING_OP_END ->
	eps

ASSIGN_OPERATOR ->
	:=

L3_OPERATOR ->
	*
	| /
	| $shr
	| $shl
	| $sizeof
	| &
	| ||
	| ^

L4_OPERATOR ->
	+
	| -

L5_OPERATOR ->
	<
	| >
	| ==
	| !=
	| >=
	| <=

L6_OPERATOR ->
	&&
	| &|
	| ^^

L7_OPERATOR ->
	?
	| !

L8_OPERATOR ->
	\\
	| \

L8b_OPERATOR ->
	??

L8c_OPERATOR ->
	$fnl

LU1_OPERATOR ->
	-
	| *

LU2_OPERATOR ->
	!

LU2b_OPERATOR ->
	~

TEMPLATE_OPERATOR ->
	?
	| \
	| !

ASSIGNING_OPERATOR ->
	+=
	| *=
	| -=
	| /=
	| &=
	| |=

INLINE_ARG ->
	identifier INLINE_PARAMS 

INLINE_PARAMS ->
	: OPERAND_EXPRESSION NEXT_INLINE_PARAM
	| CLOSING_SBRACKET

NEXT_INLINE_PARAM ->
	, OPERAND_EXPRESSION NEXT_INLINE_PARAM
	| CLOSING_SBRACKET

BASE ->
	SCOPE_TOKEN

STATEMENT_BASE ->
	TOKEN

SIZE ->
	hex
	| integer
	| identifier

NO_BODY ->
	DECLARATION_END

OPENING_BRACKET ->
	(

OPENING_CURLY_BRACKET ->
	{

OPENING_EDGE_BRACKET ->
	<

OPENING_SBRACKET ->
	[

DYNAMIC_OPERATOR ->
	[] 

DYNAMIC_OP_START ->
	DYNAMIC_OPERATOR 

DYNAMIC_OP_END ->
	eps 

OPERATOR_OP_END ->
	eps

CONTROL_OP_END ->
	eps

CLOSURE_OP_END ->
	eps

CLOSURE_OP2_END ->
	CLOSING_BRACKET

COLON ->
	:

RET_STATEMENT_END ->
	DECLARATION_END BLOCK_END
	| BLOCK_END

DECLARATION_END ->
	;

CLOSING_EDGE_BRACKET ->
	>

CLOSING_BRACKET ->
	)

BLOCK_END ->
	}

CLOSING_SBRACKET ->
	]

CLOSING_CURLY_BRACKET ->
	}
