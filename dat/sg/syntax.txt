__define START          	1
__define eps            	2

__define CLASS		        4110
__define TEMPLATE               4111
__define SYMBOL		        4113
__define EXPRESSION		4114
__define METHOD			4118
__define NESTED_CLASS		4120
__define OBJECT			4121
__define CODE_BLOCK		4122
__define BLOCK_END		4125
__define IMPORT                 4149
__define TOKEN   		4172
__define SCOPE   		4173

__define eof            	12291
__define identifier		12293
__define private	        12294
__define integer		12296

START ->
	INCLUDE_DECLARATION INCLUDE_DECLARATIONS DECLARATIONS eof
	| SYMBOL_DECLARATION DECLARATIONS eof
	| SCOPE_DECLARATION DECLARATIONS eof
	| CLASS_DECLARATION DECLARATIONS eof
	| TEMPLATE_DECLARATION DECLARATIONS
	| eof
	
DECLARATIONS ->
	SYMBOL_DECLARATION DECLARATIONS
	| CLASS_DECLARATION DECLARATIONS eof
	| SCOPE_DECLARATION DECLARATIONS
	| TEMPLATE_DECLARATION DECLARATIONS
	| eps
	
INCLUDE_DECLARATIONS ->
	INCLUDE_DECLARATION INCLUDE_DECLARATIONS
	| eps

INCLUDE_DECLARATION ->
	#import IMPORT

SCOPE_DECLARATION ->
	TOKEN TOKENS SCOPE
	
SYMBOL_DECLARATION ->
	#symbol SYMBOL

CLASS_DECLARATION ->
	#class CLASS

TEMPLATE_DECLARATION ->
	#template HINTS TEMPLATE

TOKENS ->
	TOKEN TOKENS
	| eps

METHODS ->
	#method HINTS METHOD METHODS
	| eps	

SCOPES ->
	TOKEN TOKENS SCOPE SCOPES
	| eps

NESTED_METHODS ->
	CLOSING_CURLY_BRACKET	

HINTS ->
	( HINT NEXT_HINT
	| eps

HINT  ->
	TOKEN

NEXT_HINT ->
	)

TOKEN ->
	identifier
	| integer

SYMBOL ->
	identifier SYMBOL_BODY

CLASS ->
	identifier CLASS_BODY
	| private CLASS_BODY

METHOD ->
	identifier METHOD_BODY
	
NESTED_CLASS ->
	NESTED_METHODS

SCOPE ->
	= SYMBOL_EXPRESSION DECLARATION_END
	| { METHODS SCOPES CLOSING_CURLY_BRACKET
	| CODE_BLOCK
	
TEMPLATE ->
	identifier TEMPLATE_BODY
	
IMPORT ->
	identifier DECLARATION_END
	
SYMBOL_BODY ->
	= SYMBOL_EXPRESSION DECLARATION_END

CLASS_BODY ->
	{ METHODS SCOPES CLOSING_CURLY_BRACKET

TEMPLATE_BODY ->
	{ CLOSING_CURLY_BRACKET
	
METHOD_BODY ->
	CODE_BLOCK

CODE_BLOCK ->
	[ FIRST_STATEMENT

FIRST_STATEMENT ->
	BLOCK_END

SYMBOL_EXPRESSION ->
	EXPRESSION

EXPRESSION ->
	OBJECT

OBJECT ->
	private

TERMINATOR ->
	.

CLOSING_CURLY_BRACKET ->
	}

BLOCK_END ->
	]
	| BLOCK_CLOSING_EXPECTED

DECLARATION_END ->
	TERMINATOR
	| DECLARATION_END_EXPECTED
