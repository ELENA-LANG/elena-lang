__define START          	1
__define eps            	2

__define TOKEN 			4112
__define GLOBAL_TOKEN 		4113
__define SCOPE_DECLARATION	4128
__define ATTRIBUTE_DECLARATION  4144
__define SIZE 			4160
__define BASE 			4176
__define BLOCK 			4192
__define SINGLE_BLOCK 		4193
__define DISPATCH		4208
__define TEMPLATE_ARGS		4272
__define NESTED_CLASS		4288
__define PARAMETER 		4304
__define EMPTY_PARAMETER	4320
__define STATEMENT_DECLARATION  4352
__define STATEMENT_ARGS 	4368
__define FIELD_ASSIGNER         4384
__define BLOCK_END	       69776
__define MESSAGE	      135296
__define IMPLICIT_MESSAGE     135297
__define ASSIGN_OPERATOR      135328
__define L6_OPERATOR  	      135408
__define L4_OPERATOR  	      135409
__define L5_OPERATOR  	      135410
__define L3_OPERATOR  	      135411
__define EXPRESSION	      364592
__define ROOT_EXPRESSION      364593
__define OPERAND_EXPRESSION   364594
__define SINGLE_STATEMENT     364595
__define L4_EXPRESSION        364596
__define L3_EXPRESSION        364597
__define RET_EXPRESSION	      364848
__define RESEND               364912  

__define eof            	8208
__define identifier 		8209
__define hex 			8210
__define reference		8211
__define global			8212
__define integer                8213

START ->
	DECLARATION DECLARATIONS eof
	| eof

ATTRIBUTE_DECLARATION ->
	identifier SIZE

STATEMENT_DECLARATION ->
	identifier STATEMENT_DECLARATION_BODY

STATEMENT_DECLARATION_BODY ->
	TEMPLATE_ARGS METHOD_DECLARATION
	| COLON BASE TEMPLATE_ARGS METHOD_DECLARATION

DECLARATIONS ->
	DECLARATION DECLARATIONS
	| eps

DECLARATION ->
	TOKENS SCOPE_DECLARATION
	| #define ATTRIBUTE_DECLARATION
	| #declare STATEMENT_DECLARATION

SCOPE_DECLARATIONS ->
	TOKENS SCOPE_DECLARATION SCOPE_DECLARATIONS
	| eps

SCOPE_DECLARATION ->
	CLASS_DECLARATION
	| COLON BASE BASE_DECLARATION
	| SYMBOL_DECLARATION DECLARATION_END
	| METHOD_DECLARATION
	| TEMPLATE_ARGS TEMPLATE_DECLARATION
	| SIZE_DECLARATION DECLARATION_END
	| ASSIGN_SIGN FIELD_ASSIGNER DECLARATION_END
	| DECLARATION_END

SIZE_DECLARATION ->
	[ SIZE ]

TEMPLATE_DECLARATION ->
	CLASS_DECLARATION
	| COLON BASE BASE_DECLARATION
	| DECLARATION_END

BASE_DECLARATION ->
	CLASS_DECLARATION
	| DECLARATION_END

CLASS_DECLARATION ->
	{ SCOPE_DECLARATIONS }

METHOD_DECLARATION ->
	( PARAMETERS ) METHOD_BODY

METHOD_BODY ->
	BLOCK
	| = RET_EXPRESSION DECLARATION_END
	| => DISPATCH DECLARATION_END

DISPATCH ->
	EXPRESSION

SYMBOL_DECLARATION ->
	= EXPRESSION

FIELD_ASSIGNER ->
	EXPRESSION

RET_EXPRESSION ->
	EXPRESSION

BLOCK ->
	OPENING_CURLY_BRACKET STATEMENTS

SINGLE_BLOCK ->
	SINGLE_STATEMENT

STATEMENTS ->
	STATEMENT NEXT_STATEMENT
	| ^ RET_EXPRESSION RET_STATEMENT_END
	| BLOCK_END

NEXT_STATEMENT ->
        DECLARATION_END STATEMENTS
	| BLOCK_END

SINGLE_STATEMENT ->
	TOKEN TS_OPERATIONS

STATEMENT ->
	ROOT_EXPRESSION

ROOT_EXPRESSION ->
        TOKEN TR_OPERATIONS
	| integer E_OPERATIONS

EXPRESSION ->
	TOKEN T_OPERATIONS
	| integer E_OPERATIONS

L3_EXPRESSION ->
	TOKEN E3_OPERATIONS
	| integer E3_OPERATIONS

L4_EXPRESSION ->
	TOKEN E4_OPERATIONS
	| integer E4_OPERATIONS

L5_EXPRESSION ->
	TOKEN E5_OPERATIONS
	| integer E5_OPERATIONS

OPERAND_EXPRESSION ->
	TOKEN
	| integer

TR_OPERATIONS ->
	TOKEN T_OPERATIONS
        | IMPLICIT_OPERATION STATEMENT_OPERATIONS
	| T0_OPERATIONS

T_OPERATIONS ->
	TOKEN T_OPERATIONS
	| L1_OPERATION L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
        | T0_OPERATIONS

TS_OPERATIONS ->
	eps

T0_OPERATIONS ->
	TEMPLATE_ARGS TEMPLATE_OPERATIONS
	| ASSIGNMENT_OPERATION
	| :: DCOLON_OPERATION
	| L2_OPERATION L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| OPERATIONS

E_OPERATIONS ->
        L1_OPERATION L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L2_OPERATION L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L5_OPERATION
	| OPERATIONS

E3_OPERATIONS ->
	eps

E4_OPERATIONS ->
	eps

E5_OPERATIONS ->
	eps

OPERATIONS ->
	L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L6_OPERATION
	| eps

L1_OPERATIONS ->
	L1_OPERATION L1_OPERATIONS
	| eps

L1_OPERATION ->
  	IMPLICIT_OPERATION

L2_OPERATIONS ->
	L2_OPERATION L2_OPERATIONS
	| eps

L2_OPERATION ->
	. MESSAGE MESSAGE_BODY

L3_OPERATIONS ->
	L3_OPERATION L3_OPERATIONS
	| eps

L3_OPERATION ->
	L3_OPERATOR L3_EXPRESSION

L4_OPERATIONS ->
	L4_OPERATION L4_OPERATIONS
	| eps

L4_OPERATION ->
	L4_OPERATOR L4_EXPRESSION

L5_OPERATIONS ->
	L5_OPERATION L5_OPERATIONS
	| eps	 

L5_OPERATION ->
	L5_OPERATOR L5_EXPRESSION

L6_OPERATIONS ->
	L6_OPERATION
	| eps

L6_OPERATION ->
	L6_OPERATOR L6_OPERAND ELSE_OPERATIONS

STATEMENT_OPERATIONS ->
	STATEMENT_ARGS
	| E_OPERATIONS

TEMPLATE_OPERATIONS ->
        IMPLICIT_OPERATION

MESSAGE_BODY ->
	( MESSAGE_PARAMETERS )
	| EMPTY_PARAMETER

MESSAGE_PARAMETERS ->
	EXPRESSION NEXT_MESSAGE_PARAMETER
	| eps

NEXT_MESSAGE_PARAMETER ->
	, EXPRESSION NEXT_MESSAGE_PARAMETER
	| eps	

IMPLICIT_OPERATION ->
	IMPLICIT_MESSAGE MESSAGE_PARAMETERS )

ASSIGNMENT_OPERATION ->
	ASSIGN_OPERATOR EXPRESSION

DCOLON_OPERATION ->
	NESTED_CLASS

NESTED_CLASS ->
	OPENING_CURLY_BRACKET SCOPE_DECLARATIONS CLOSING_CURLY_BRACKET

ELSE_OPERATIONS ->
	: L6_OPERAND
	| eps	

L6_OPERAND ->
	BLOCK
	| OPERAND_EXPRESSION

PARAMETERS ->
	PARAMETER NEXT_PARAMETER	
	| eps

PARAMETER ->
	TOKENS

EMPTY_PARAMETER ->
	eps

NEXT_PARAMETER ->
	, PARAMETER NEXT_PARAMETER
	| eps
	
TOKENS ->
	TOKEN NEXT_TOKEN

NEXT_TOKEN ->
	TOKENS
	| eps

TOKEN ->
	identifier
	| reference

GLOBAL_TOKEN ->
	global

TEMPLATE_ARG ->
	TOKEN TOKEN_BODY
	| GLOBAL_TOKEN TOKEN_BODY	

TOKEN_BODY ->
	TEMPLATE_ARGS
	| eps	

TEMPLATE_ARGS ->
	OPENING_EDGE_BRACKET TEMPLATE_ARG NEXT_TEMPLATE_ARG

NEXT_TEMPLATE_ARG ->
	, TEMPLATE_ARG NEXT_TEMPLATE_ARG
	| >

NEXT_STATEMENT_ARG ->
	TOKEN STATEMENT_ARG NEXT_STATEMENT_ARG
	| eps

STATEMENT_ARG ->
	BLOCK 
	| COLON SINGLE_BLOCK
	
STATEMENT_ARGS ->
	STATEMENT_ARG NEXT_STATEMENT_ARG

MESSAGE ->                                                                                                   
	identifier

ASSIGN_OPERATOR ->
	:=

ASSIGN_SIGN ->
	:=

L3_OPERATOR ->
	*
	| /

L4_OPERATOR ->
	+
	| -

L5_OPERATOR ->
	<

L6_OPERATOR ->
	?
	| !

SIZE ->
	hex
	| integer

BASE ->
	TOKEN
	| GLOBAL_TOKEN

DYNAMIC_SIZES ->
	DYNAMIC_SIZE DYNAMIC_SIZES
	| eps
	
DYNAMIC_SIZE ->
	[]

IMPLICIT_MESSAGE ->
	OPENING_BRACKET

OPENING_BRACKET ->
	(

OPENING_CURLY_BRACKET ->
	{

OPENING_EDGE_BRACKET ->
	<

COLON ->
	:

RET_STATEMENT_END ->
	DECLARATION_END BLOCK_END
	| BLOCK_END

DECLARATION_END ->
	;

CLOSING_CURLY_BRACKET ->
	}

BLOCK_END ->
	}
