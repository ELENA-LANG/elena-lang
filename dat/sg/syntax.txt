__define START          	1
__define eps            	2

__define CLASS		        4110
__define SUBJECT_ARG		4112
__define SYMBOL		        4113
__define EXPRESSION		4114
__define FIELD			4115
__define HINT			4116
__define HINT_VALUE		4117
__define METHOD			4118
__define PARAMETER		4119
__define NESTED_CLASS		4120
__define OBJECT			4121
__define CODE_BLOCK		4122
__define MESSAGE		4123
__define MESSAGE_PARAMETER	4124
__define BLOCK_END		4125
__define VARIABLE		4126
__define L4_OPERATION           4127
__define DISPATCH               4128
__define ASSIGNING		4129
__define STATIC			4130
__define BASE_CLASS             4131
__define CONSTRUCTOR		4132
__define L3_OPERATION           4133
__define L7_OPERATION           4134
__define RET_STATEMENT		4135
__define L5_OPERATION           4136
__define ELSE_OPERATION		4138
__define EXTENSION		4139
__define TYPED_MESSAGE_PARAM    4140
__define INCLUDE		4141
__define FORWARD		4142
__define ALT_MESSAGE		4143
__define LOOP			4144
__define RESEND                 4145
__define INLINE_EXPRESSION	4146
__define MESSAGE_REFERENCE	4147
__define THROW_EXPRESSION       4148
__define IMPORT                 4149
__define DISPATCH_HANDLER       4150
__define BREAK_EXPRESSION	4152
__define OPEN_PARAMETER		4153
__define OPEN_ARGUMENT_LIST	4154
__define SWITCHING		4155
__define OPTION			4156
__define LAST_OPTION		4157
__define BIGGER_OPTION          4158
__define SMALLER_OPTION		4159
__define VARSIZE_VALUE          4160
__define L6_OPERATION           4161
__define SIZE_VALUE             4162
__define L0_OPERATION           4163
__define GENERIC                4165
__define DEFAULT                4166
__define TYPE                   4167
__define SYMBOL_REFERENCE	4168

__define eof            	12291
__define literal		12292
__define identifier		12293
__define private	        12294
__define reference		12295
__define integer		12296
__define hex			12297
__define real			12298
__define long                   12300

// error rules
__define DECLARATION_END_EXPECTED	16384
__define STATEMENT_END_EXPECTED         16385
__define BLOCK_CLOSING_EXPECTED         16386
__define NESTED_MEMBER_EXPECTED		16387
__define OBJECT_EXPECTED                16388
__define MESSAGE_EXPECTED               16389

START ->
	INCLUDE_DECLARATION INCLUDE_DECLARATIONS DECLARATIONS eof
	| CLASS_DECLARATION DECLARATIONS eof
	| SYMBOL_DECLARATION DECLARATIONS eof
	| STATIC_DECLARATION DECLARATIONS eof
	| TYPE_DECLARATION DECLARATIONS eof
	| eof

INCLUDE_DECLARATION ->
	#define HINTS INCLUDE
	
CLASS_DECLARATION ->
	#class HINTS CLASS
	
SYMBOL_DECLARATION ->
	#symbol HINTS SYMBOL

STATIC_DECLARATION ->
	#static STATIC

TYPE_DECLARATION ->
	#type HINTS TYPE
	
DECLARATIONS ->
	SYMBOL_DECLARATION DECLARATIONS
	| STATIC_DECLARATION DECLARATIONS
	| CLASS_DECLARATION DECLARATIONS
	| TYPE_DECLARATION DECLARATIONS
	| eps
	
INCLUDE_DECLARATIONS ->
	INCLUDE_DECLARATION INCLUDE_DECLARATIONS
	| eps

HINTS ->
	( HINT NEXT_HINT
	| eps

NEXT_HINT ->
	, HINT NEXT_HINT
	| )
	
FIELDS ->
	#field HINTS FIELD FIELDS
	| eps
	
METHODS ->
	#method HINTS METHOD METHODS
	| #generic HINTS GENERIC METHODS
	| #constructor CONSTRUCTOR METHODS
	| eps

NESTED_METHODS ->
	METHOD NESTED_METHODS
	| ! DEFAULT NESTED_METHODS
	| CLOSING_CURLY_BRACKET	
	| NESTED_MEMBER_EXPECTED
		
NEXT_EXPRESSION ->
	NEXT_STATEMENT
	| ]
	
NEXT_SUB_EXPRESSION ->
	, EXPRESSION NEXT_SUB_EXPRESSION
	| CLOSING_BRACKET
	
THROW_EXPRESSION ->
	EXPRESSION
	| OBJECT_EXPECTED

BREAK_EXPRESSION ->
	EXPRESSION
	| eps
	
NEXT_STATEMENT ->
	STATEMENT_END STATEMENTS

STATEMENTS ->
	EXPRESSION NEXT_EXPRESSION
	| #var HINTS VARIABLE NEXT_STATEMENT
	| #loop LOOP NEXT_STATEMENT
	| ^ RET_STATEMENT TERMINATOR BLOCK_END
	| #throw THROW_EXPRESSION NEXT_STATEMENT
	| BLOCK_END
	| #break BREAK_EXPRESSION NEXT_STATEMENT
		
METHOD_ARGUMENTS ->
	: PARAMETER GENERIC_ARGUMENTS
	| & SUBJECT_ARG START_ARGUMENTS
	| :: OPEN_PARAMETER
	| eps
		
GENERIC_METHOD_ARGUMENTS ->
	: PARAMETER GENERIC_METHOD_ARGUMENTS
	| eps

GENERIC_ARGUMENTS ->
	& SUBJECT_ARG : PARAMETER ARGUMENTS
	| : PARAMETER GENERIC_ARGUMENTS
	| :: OPEN_PARAMETER
	| eps
	
START_ARGUMENTS ->
	& SUBJECT_ARG START_ARGUMENTS
	| : PARAMETER ARGUMENTS
	| eps
	
ARGUMENTS ->
	& SUBJECT_ARG : PARAMETER ARGUMENTS
	| eps
	
START_MESSAGE_ARGUMENTS ->
	& SUBJECT_ARG START_MESSAGE_ARGUMENTS
	| : MESSAGE_PARAMETER MESSAGE_ARGUMENTS
	| :: TYPED_MESSAGE_PARAM MESSAGE_ARGUMENTS
	| eps

GENERIC_MESSAGE_ARGUMENTS ->
	: MESSAGE_PARAMETER GENERIC_MESSAGE_ARGUMENTS
	| & SUBJECT_ARG SUBJECT_ARG_BODY MESSAGE_ARGUMENTS
	| &: OPEN_ARGUMENT_LIST
	| eps
	
MESSAGE_ARGUMENTS ->
	& SUBJECT_ARG SUBJECT_ARG_BODY MESSAGE_ARGUMENTS
	| eps
	
SUBJECT_ARGS ->
	& SUBJECT_ARG SUBJECT_ARGS
	| eps

OPEN_ARGUMENT_LIST ->
	MESSAGE_PARAMETER NEXT_OPEN_ARGUMENT

NEXT_OPEN_ARGUMENT ->
	: MESSAGE_PARAMETER NEXT_OPEN_ARGUMENT
	| eps

OPERATIONS ->
	MESSAGE MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
	| EXTENSION MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
	| L0_OPERATION L0_OPERATION_NEXT
        | L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS 
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS
        | L7_OPERATION ALT_OPERATIONS
	| ASSIGNING
	| : MESSAGE_PARAMETER MESSAGE_PARAMETERS
	| => SWITCHING
	| eps

L0_OPERATION_NEXT ->
	L0_OPERATION L0_OPERATION_NEXT
	| MESSAGE MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
	| EXTENSION MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
        | L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS
        | L7_OPERATION
	| ASSIGNING
	| eps
	
MESSAGE_OPERATIONS ->
	MESSAGE MESSAGE_OPERATIONS
	| EXTENSION MESSAGE MESSAGE_OPERATIONS
	| eps
		
MESSAGE_PARAMETERS ->
	: MESSAGE_PARAMETER MESSAGE_PARAMETERS
	| eps	

L0_OPERATIONS ->
	L0_OPERATION L0_OPERATIONS
	| eps

L3_OPERATIONS ->
	L3_OPERATION L3_OPERATIONS
	| eps

L4_OPERATIONS ->
	L4_OPERATION L4_OPERATIONS
	| eps
	
L5_OPERATIONS ->
	L5_OPERATION L5_OPERATIONS
	| eps

L6_OPERATIONS ->
	L6_OPERATION L6_OPERATIONS
	| eps	
	
L7_OPERATIONS ->
	L7_OPERATION                                                      
	| eps	

ALT_OPERATIONS ->
        || ALT_MESSAGE
	| eps
	
HINT -> identifier HINT_BODY
	
INCLUDE ->
	identifier INCLUDE_BODY DECLARATION_END
	| reference INCLUDE_BODY DECLARATION_END
	
CLASS ->
	identifier CLASS_BODY
	| private CLASS_BODY
	
NESTED_CLASS ->
	METHOD NESTED_METHODS
	| NESTED_MEMBER_EXPECTED

SYMBOL ->
	identifier SYMBOL_BODY
	| private SYMBOL_BODY

STATIC ->
	identifier SYMBOL_BODY
	| private SYMBOL_BODY

TYPE ->
	identifier TERMINATOR

FIELD ->
	identifier TERMINATOR

METHOD ->
	identifier METHOD_ARGUMENTS METHOD_BODY
	| private METHOD_ARGUMENTS METHOD_BODY
	| reference METHOD_ARGUMENTS METHOD_BODY
	| => DISPATCH_HANDLER TERMINATOR

GENERIC ->
	identifier GENERIC_METHOD_ARGUMENTS METHOD_BODY

DEFAULT ->
	: PARAMETER GENERIC_METHOD_ARGUMENTS METHOD_BODY
	| METHOD_BODY

CONSTRUCTOR ->
	identifier METHOD_ARGUMENTS METHOD_BODY
	
VARIABLE ->
	identifier VARIABLE_BODY

LOOP ->
	EXPRESSION
	
EXTENSION ->
	~ OBJECT
	
CODE_BLOCK ->
	[ STATEMENTS
	
HINT_BODY ->
	: HINT_VALUE
	| eps
	
CLASS_BODY ->
	: BASE_CLASS { FIELDS METHODS CLOSING_CURLY_BRACKET
	| { FIELDS METHODS CLOSING_CURLY_BRACKET
	
SYMBOL_BODY ->
	= SYMBOL_EXPRESSION DECLARATION_END

SYMBOL_EXPRESSION ->
	EXPRESSION
	| < IMPORT >

INCLUDE_BODY ->
	= FORWARD
	| eps

METHOD_BODY ->
	= RET_STATEMENT DECLARATION_END
	| CODE_BLOCK
	| < IMPORT > DECLARATION_END
	| <= RESEND DECLARATION_END
	| => DISPATCH DECLARATION_END

VARIABLE_BODY ->
	ASSIGNING
	| eps
	
MESSAGE_BODY ->
	: MESSAGE_PARAMETER GENERIC_MESSAGE_ARGUMENTS
	| & SUBJECT_ARG START_MESSAGE_ARGUMENTS
	| :: TYPED_MESSAGE_PARAM
	| &: OPEN_ARGUMENT_LIST
	| eps
		
SUBJECT_ARG_BODY ->
	: MESSAGE_PARAMETER
	| :: TYPED_MESSAGE_PARAM
	
ELSE_BODY ->
	ELSE_OPERATION
	| eps	

OBJECT_BODY ->
	( EXPRESSION NEXT_SUB_EXPRESSION
	| INLINE_EXPRESSION
	| eps
	
SIZE_VALUE_OPTION ->
	SIZE_VALUE VARSIZE_VALUE_OPTION
	| VARSIZE_VALUE

VARSIZE_VALUE_OPTION ->
	, VARSIZE_VALUE
	| )

MESSAGE_REFERENCE_BODY ->
	( SIZE_VALUE_OPTION
	| [ EXPRESSION ]
	| eps
		
DISPATCH_HANDLER ->
	< IMPORT >
	| OBJECT
	
RET_STATEMENT ->
	EXPRESSION
	
ASSIGNING ->
	:= EXPRESSION
	
SWITCHING ->
	OPTION NEXT_OPTION

L0_OPERATION ->
	@ OBJECT 
	
L3_OPERATION ->
	* L3_OPERAND
	| / L3_OPERAND
	| *= L3_OPERAND
	| /= L3_OPERAND
	
L4_OPERATION ->
	+ L4_OPERAND
	| - L4_OPERAND
	| += L4_OPERAND
	| -= L4_OPERAND
	| && L4_OPERAND
	| &| L4_OPERAND
	| ^^ L4_OPERAND

L5_OPERATION ->
	<< L5_OPERAND
	| >> L5_OPERAND

L6_OPERATION ->
	== L6_OPERAND
	| != L6_OPERAND
	| < L6_OPERAND
	| > L6_OPERAND
	| <= L6_OPERAND
	| >= L6_OPERAND
	
L7_OPERATION ->
	? L7_OPERAND ELSE_BODY
	| ! L7_OPERAND
	
ELSE_OPERATION ->
	! L7_OPERAND

EXPRESSION ->
	OBJECT OPERATIONS
	
NESTED_EXPRESSION ->
	{ NESTED_CLASS

INLINE_EXPRESSION ->
	CODE_BLOCK

SUB_EXPRESSION ->
	EXPRESSION NEXT_SUB_EXPRESSION
        | INLINE_SIGNATURE ) INLINE_EXPRESSION

INLINE_SIGNATURE ->
        & SUBJECT_ARG INLINE_SIGNATURE2
	| : PARAMETER METHOD_ARGUMENTS

INLINE_SIGNATURE2 ->
	: PARAMETER ARGUMENTS
	| & SUBJECT_ARG : PARAMETER ARGUMENTS
	| eps
	
L3_OPERAND ->
	OBJECT L0_OPERATIONS MESSAGE_OPERATIONS
	
L4_OPERAND ->
	OBJECT L0_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS

L5_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS
	
L6_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	
L7_OPERAND ->
	CODE_BLOCK
	
RESEND ->
	% MESSAGE
	
DISPATCH ->
	OBJECT
	
OBJECT ->
	identifier OBJECT_BODY
	| reference OBJECT_BODY
	| private
	| integer
	| hex
	| long
	| real
	| literal
	| ( SUB_EXPRESSION
	| NESTED_EXPRESSION
	| CODE_BLOCK
	| % MESSAGE_REFERENCE
	| #symbol SYMBOL_REFERENCE
	
MESSAGE ->
	identifier MESSAGE_BODY
	| reference MESSAGE_BODY
	| private MESSAGE_BODY

SYMBOL_REFERENCE ->
	identifier
	| reference
	| private

ALT_MESSAGE ->
	identifier MESSAGE_BODY
	| reference MESSAGE_BODY

MESSAGE_REFERENCE ->
	SUBJECT_ARG MESSAGE_REFERENCE_BODY
	| ( SUBJECT_ARG SUBJECT_ARGS ) MESSAGE_REFERENCE_BODY
	
MESSAGE_PARAMETER ->
	OBJECT

TYPED_MESSAGE_PARAM ->
	OBJECT
	
IMPORT ->
	identifier

OPTION ->
	OBJECT OPTION_BODY
	
BIGGER_OPTION ->
	OBJECT OPTION_BODY
	
SMALLER_OPTION ->
	OBJECT OPTION_BODY

OPTION_BODY ->
	? CODE_BLOCK

LAST_OPTION ->
	! CODE_BLOCK

NEXT_OPTION ->
	OPTION NEXT_OPTION
	| > BIGGER_OPTION NEXT_OPTION
	| < SMALLER_OPTION NEXT_OPTION
	| LAST_OPTION
	| eps
	
FORWARD ->
	reference

HINT_VALUE ->
	integer
	| hex
	| identifier
	| literal
	| reference
	
BASE_CLASS ->
	identifier
	| reference
	| private

SUBJECT_ARG ->
	identifier
	| private
	| reference

PARAMETER ->
	identifier

OPEN_PARAMETER ->
	identifier
	    
SIZE_VALUE ->
	integer

VARSIZE_VALUE ->
	)

CLOSING_CURLY_BRACKET ->
	}

CLOSING_BRACKET ->
	)

TERMINATOR ->
	.

BLOCK_END ->
	]
	| BLOCK_CLOSING_EXPECTED

DECLARATION_END ->
	TERMINATOR
	| DECLARATION_END_EXPECTED

STATEMENT_END ->
	TERMINATOR
	| STATEMENT_END_EXPECTED

OBJECT_EXPECTED ->
	. ERROR

DECLARATION_END_EXPECTED ->
	#static ERROR
	| #define ERROR
	| #class ERROR
	| #method ERROR
	| #field ERROR
	| eof ERROR
	       
BLOCK_CLOSING_EXPECTED ->
	#static ERROR
	| #define ERROR
	| #class ERROR
	| eof ERROR

STATEMENT_END_EXPECTED ->
	#var ERROR
	| #loop ERROR
	| #throw ERROR
	| #break ERROR
	
NESTED_MEMBER_EXPECTED ->
	#method ERROR
	| #field ERROR

MESSAGE_EXPECTED ->
	integer ERROR
	| hex ERROR
	| long ERROR
	| real ERROR
	| ( ERROR
	