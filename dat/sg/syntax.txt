__define START          	1
__define eps            	2

__define SUBJECT_ARG		4112
__define EXPRESSION		4114
__define TOKEN_PARAM		4117
__define PARAMETER		4119
__define NESTED_CLASS		4120
__define OBJECT			4121
__define CODE_BLOCK		4122
__define MESSAGE		4123
__define MESSAGE_PARAMETER	4124
__define BLOCK_END		4125
__define L4_OPERATION           4127
__define DISPATCH               4128
__define ASSIGNING		4129
__define BASE_CLASS             4131
__define L3_OPERATION           4133
__define L7_OPERATION           4134
__define RET_STATEMENT		4135
__define L5_OPERATION           4136
__define EXTENSION		4139
__define ALT_MESSAGE		4140
__define CATCH_MESSAGE          4143
__define RESEND                 4145
__define MESSAGE_REFERENCE	4147
__define ROOT_EXPRESSION        4152
__define SWITCHING		4155
__define OPTION			4156
__define LAST_OPTION		4157
__define L6_OPERATION           4161
__define SIZE_PARAM             4162
__define TOKEN   		4172
__define SCOPE   		4173
__define ATTRIBUTE   		4174
__define LAZY_EXPRESSION	4176
__define ANGLE_OPERATOR         4177
__define ANGLE_OBJECT           4178
__define ARRAY_OPERATION        4179
__define ROOT_ANGLE_OPERATOR    4180
__define ROOT_ANGLE_OBJECT      4181
__define ROOT_L6_OPERATION      4182
__define XCLOSURE               4183

__define DECLARATION_END_EXPECTED	16384
__define STATEMENT_END_EXPECTED         16385
__define BLOCK_CLOSING_EXPECTED         16386

__define eof            	12291
__define literal		12292
__define identifier		12293
__define private	        12294
__define reference		12295
__define integer		12296
__define hex			12297
__define real			12298
__define character		12299
__define long                   12300
__define wide                   12301
__define attribute		12303

START ->
	SCOPE_DECLARATION DECLARATIONS eof
	| eof

DECLARATIONS ->
	SCOPE_DECLARATION DECLARATIONS
	| eps
	
SCOPES ->
	TOKEN TOKENS SCOPE SCOPES
	| eps

TOKENS ->
	TOKEN TOKENS
	| eps

TOKEN_PARAMS ->
	, TOKEN_PARAM TOKEN_PARAMS
	| >

SCOPE_DECLARATION ->
	TOKEN TOKENS SCOPE

SCOPE ->
	= TOKEN_DECLARATION DECLARATION_END
	| { SCOPES CLOSING_CURLY_BRACKET
	| => DISPATCH DECLARATION_END
	| <= RESEND
	| CODE_BLOCK
	| : PARAMETER PARAMETER_BODY METHOD_BODY
	| ( BRACKET_BODY 
	| DECLARATION_END
	| :: BASE_CLASS NEXT_BASE_CLASS SCOPE_BODY

NEXT_BASE_CLASS ->
	, BASE_CLASS NEXT_BASE_CLASS
	| eps

SCOPE_BODY ->
	CLASS_BODY
	| = SYMBOL_EXPRESSION DECLARATION_END
	| DECLARATION_END

CLASS_BODY ->
	{ SCOPES CLOSING_CURLY_BRACKET

BRACKET_BODY ->
	SIZE_PARAM CLOSING_BRACKET DECLARATION_END
	| SIGNATURE_BODY METHOD_BODY

TOKEN_DECLARATION ->
	SYMBOL_EXPRESSION
	| ATTRIBUTE

PARAMETER_BODY ->
	SUBJECT_ARG : PARAMETER NEXT_SUBJECT_PARAMETER
	| : PARAMETER NEXT_PARAMETER
	| eps
	        
NEXT_SUBJECT_PARAMETER ->
	SUBJECT_ARG : PARAMETER NEXT_SUBJECT_PARAMETER
	| eps

NEXT_PARAMETER ->
	: PARAMETER NEXT_PARAMETER
	| eps

SIGNATURE_BODY ->
	TOKEN_PARAM PARAMETER NEXT_SIGNATURE

NEXT_SIGNATURE ->
	, TOKEN_PARAM PARAMETER NEXT_SIGNATURE
	| CLOSING_BRACKET NEXT_SIGNATURE_BODY

NEXT_SIGNATURE_BODY ->
	SUBJECT_ARG ( TOKEN_PARAM PARAMETER NEXT_SIGNATURE
	| eps

METHOD_BODY ->
	CODE_BLOCK
	| = RET_STATEMENT DECLARATION_END
	| => DISPATCH DECLARATION_END
	| <= RESEND

DISPATCH ->
	OBJECT

RESEND ->
	MESSAGE RESEND_BODY

RESEND_BODY ->
	; CODE_BLOCK
	|  DECLARATION_END

LAZY_EXPRESSION ->
	( EXPRESSION CLOSING_BRACKET

SYMBOL_EXPRESSION ->
	EXPRESSION

NESTED_CLASS ->
	{ SCOPES CLOSING_CURLY_BRACKET

CODE_BLOCK ->
	[ STATEMENTS

STATEMENTS ->
	ROOT_EXPRESSION NEXT_STATEMENT
	| ^ RET_STATEMENT RET_STATEMENT_END
	| BLOCK_END

NEXT_STATEMENT ->
	STATEMENT_END STATEMENTS
	| BLOCK_END	

RET_STATEMENT ->
	EXPRESSION

EXTENSION ->
	~ OBJECT

SWITCHING ->
	OPTION OPTIONS

OPTION ->
	identifier OPTION_BODY
	| literal OPTION_BODY
	| reference OPTION_BODY
	| integer OPTION_BODY
	| hex OPTION_BODY
	| real OPTION_BODY
	| character OPTION_BODY
	| long OPTION_BODY
	| wide OPTION_BODY
	| constant OPTION_BODY

OPTIONS ->
	; NEXT_OPTION
	| eps

NEXT_OPTION ->
	OPTION OPTIONS
	| LAST_OPTION

LAST_OPTION ->
	! CODE_BLOCK

OPTION_BODY ->
	CODE_BLOCK

ASSIGNING ->
	:= EXPRESSION

SUB_EXPRESSION ->
	EXPRESSION NEXT_SUB_EXPRESSION
	| & SUBJECT_ARG : PARAMETER SUBJECT_CLOSURE_ARGS
	| : PARAMETER CLOSURE_ARGS

CLOSURE_ARGS ->
	: PARAMETER CLOSURE_ARGS
	| ) CLOSURE_ARGS_BODY

SUBJECT_CLOSURE_ARGS ->
	& SUBJECT_ARG : PARAMETER SUBJECT_CLOSURE_ARGS
	| ) CLOSURE_ARGS_BODY

CLOSURE_ARGS_BODY ->
	CODE_BLOCK
	| ( RET_STATEMENT )

NEXT_SUB_EXPRESSION ->
	, EXPRESSION NEXT_SUB_EXPRESSION
	| CLOSING_BRACKET

ROOT_EXPRESSION ->
	identifier ROOT_OPERATIONS
	| private ROOT_OPERATIONS
	| reference OPERATIONS
	| literal OPERATIONS
	| wide OPERATIONS
	| integer OPERATIONS
	| hex OPERATIONS
	| long OPERATIONS
	| real OPERATIONS
	| character OPERATIONS
	| % MESSAGE_REFERENCE OPERATIONS
	| CODE_BLOCK OPERATIONS
	| NESTED_CLASS OPERATIONS
	| ( SUB_EXPRESSION OPERATIONS
	| $ LAZY_EXPRESSION ROOT_OPERATIONS

ROOT_OPERATIONS ->
	MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ROOT_BODY
	| EXTENSION MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| ASSIGNING
	| :: OBJECT_EXT OPERATIONS
	| ( ROOT_SUB_EXPRESSION ROOT_CODE_BODY
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS
	| ROOT_L6_OPERATION
	| L7_OPERATION
	| ARRAY_OPERATION ARRAY_OPERATION_BODY
	| => SWITCHING
	| eps

ROOT_CODE_BODY ->
	CODE_BLOCK ROOT_CODE_BODY_OP
	| NESTED_CLASS
	| eps	

SIZE_TOKEN ->
	integer

ROOT_CODE_BODY_OP ->
        ; ROOT_CODE_BODY2
	| eps

ROOT_CODE_BODY2 ->
	CODE_BLOCK
	| NESTED_CLASS

ROOT_L6_OPERATION ->
	< ROOT_ANGLE_OBJECT
	| == L6_OPERAND
	| != L6_OPERAND
	| > L6_OPERAND
	| <= L6_OPERAND
	| >= L6_OPERAND

ROOT_ANGLE_OBJECT ->
	identifier ROOT_ANGLE_OPERATION
	| private
	| reference
	| literal
	| wide
	| integer
	| hex
	| long
	| real
	| character
	| % MESSAGE_REFERENCE
	| CODE_BLOCK	
	| NESTED_CLASS
	| ( SUB_EXPRESSION

ROOT_ANGLE_OPERATION ->
	> ROOT_ANGLE_OPERATOR

ROOT_ANGLE_OPERATOR ->
	identifier TEMPLATE_OPERATOR_BODY
	| eps

TEMPLATE_OPERATOR_BODY ->
	ASSIGNING
	| ( SIZE_PARAM CLOSING_BRACKET

ROOT_BODY ->
	ASSIGNING
        | || CATCH_MESSAGE
        | \ ALT_MESSAGE
	| => SWITCHING
	| eps

ARRAY_OPERATION_BODY ->
	ASSIGNING
	| MESSAGE NEXT_MESSAGE
	| L6_OPERATION
	| eps

ALT_OPERATIONS ->
        || CATCH_MESSAGE
        | \ ALT_MESSAGE
	| eps

CATCH_MESSAGE ->
	identifier MESSAGE_BODY
	| reference MESSAGE_BODY

ALT_MESSAGE ->
	identifier MESSAGE_BODY
	| reference MESSAGE_BODY

EXPRESSION ->
	OBJECT OPERATIONS

MESSAGE_PARAMETER ->
	OBJECT

OBJECT ->
	identifier OBJECT_BODY
	| private
	| reference REFERENCE_BODY
	| literal
	| wide
	| integer
	| hex
	| long
	| real
	| character
	| % MESSAGE_REFERENCE
	| CODE_BLOCK	
	| NESTED_CLASS
	| ( SUB_EXPRESSION
	| $ LAZY_EXPRESSION

OBJECT_BODY ->
	:: OBJECT_EXT
	| ( ROOT_SUB_EXPRESSION
	| eps

REFERENCE_BODY ->
	:: OBJECT_EXT
	| eps

ROOT_SUB_EXPRESSION ->
	EXPRESSION CLOSING_BRACKET
	| CLOSING_BRACKET

OBJECT_EXT ->
	NESTED_CLASS
	| ( EXPRESSION NEXT_LIST_ITEM

NEXT_LIST_ITEM ->
	, EXPRESSION NEXT_LIST_ITEM
	| CLOSING_BRACKET

OPERATIONS ->
	MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
	| EXTENSION MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS ALT_OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS
        | L6_OPERATION
	| ARRAY_OPERATION MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L7_OPERATION
        | || CATCH_MESSAGE
        | \ ALT_MESSAGE
	| eps

MESSAGE_OPERATIONS ->
	MESSAGE NEXT_MESSAGE
	| EXTENSION MESSAGE NEXT_MESSAGE
	| eps

MESSAGE ->
	identifier MESSAGE_BODY
	| private MESSAGE_BODY

MESSAGE_BODY ->
	SUBJECT_ARG SUBJECT_ARG_R
	| : MESSAGE_PARAMETER NEXT_SUBJECT_ARG
	| ( MESSAGE_LIST
	| eps

SUBJECT_ARG_R ->
	: MESSAGE_PARAMETER NEXT_SUBJECT_ARG
	| ( SUBJECT_LIST

NEXT_SUBJECT_ARG ->
	SUBJECT_ARG SUBJECT_ARG_R
	| eps

MESSAGE_PARAMETERS ->
	: MESSAGE_PARAMETER MESSAGE_PARAMETERS
	| eps

SUBJ_MESSAGE_PARAMETERS ->
	SUBJECT_ARG : MESSAGE_PARAMETER SUBJ_MESSAGE_PARAMETERS
	| eps

MESSAGE_LIST ->
	EXPRESSION NEXT_MESSAGE_LIST_ITEM

NEXT_MESSAGE_LIST_ITEM ->
	, EXPRESSION NEXT_MESSAGE_LIST_ITEM
	| CLOSING_BRACKET
	      
SUBJECT_LIST ->
	EXPRESSION CLOSING_BRACKET NEXT_SUBJECT_LIST_ITEM
	| XCLOSURE

XCLOSURE ->
	: PARAMETER CLOSURE_ARGS NEXT_SUBJECT_LIST_ITEM
	| & SUBJECT_ARG : PARAMETER SUBJECT_CLOSURE_ARGS NEXT_SUBJECT_LIST_ITEM

NEXT_SUBJECT_LIST_ITEM ->
	SUBJECT_ARG ( SUBJECT_LIST
	| eps
	      
NEXT_MESSAGE ->
	; MESSAGE NEXT_MESSAGE
	| eps

L3_OPERATION ->
	* L3_OPERAND
	| / L3_OPERAND
	| && L3_OPERAND
	| ^^ L3_OPERAND

L3_OPERATIONS ->
	L3_OPERATION L3_OPERATIONS
	| eps

L3_OPERAND ->
	OBJECT MESSAGE_OPERATIONS

L4_OPERATION ->
	+ L4_OPERAND
	| - L4_OPERAND
	| &| L4_OPERAND

L4_OPERATIONS ->
	L4_OPERATION L4_OPERATIONS
	| eps

L4_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS

L5_OPERATION ->
	<< L5_OPERAND
	| >> L5_OPERAND

L5_OPERATIONS ->
	L5_OPERATION L5_OPERATIONS
	| eps	

L5_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS

L6_OPERATION ->
	== L6_OPERAND
	| != L6_OPERAND
	| < ANGLE_OBJECT
	| > L6_OPERAND
	| <= L6_OPERAND
	| >= L6_OPERAND

L6_OPERATIONS ->
	L6_OPERATION
	| eps	

L6_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS

ANGLE_OBJECT ->
	identifier ANGLE_OPERATION
	| private ANGLE_OPERATION
	| reference MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| literal MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| wide MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| integer MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| hex MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| long MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| real MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| character MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| % MESSAGE_REFERENCE MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| CODE_BLOCK MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| NESTED_CLASS MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS

ANGLE_OPERATION ->
	MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| EXTENSION MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS
	| L5_OPERATION L5_OPERATIONS
	| ANGLE_OPERATOR
	| eps
	
ANGLE_OPERATOR ->
	>

L7_OPERATION ->
	? L7_OPERAND ELSE_BODY
	| ! L7_OPERAND

L7_OPERATIONS ->
	L7_OPERATION
	| eps
	
ELSE_BODY ->
	ELSE_OPERATION
	| eps	

ELSE_OPERATION ->
	! L7_OPERAND

L7_OPERAND ->
	CODE_BLOCK

ARRAY_OPERATION ->
	[ EXPRESSION CLOSING_SBRACKET
	| @ OBJECT
	
DECLARATION_END ->
	TERMINATOR
	| DECLARATION_END_EXPECTED

TOKEN ->
	identifier TOKEN_BODY 
	| private 
	| reference

ATTRIBUTE ->
	attribute

SUBJECT_ARG ->
	identifier SUBJECT_BODY

SUBJECT_BODY ->
	< TOKEN_PARAM >
	| eps

PARAMETER ->
	identifier

TOKEN_PARAM ->
	identifier
	| reference

MESSAGE_REFERENCE ->
	identifier
	| literal

SIZE_PARAM ->
	integer
	
BASE_CLASS ->
	identifier TOKEN_BODY
	| reference 

TOKEN_BODY ->
	< TOKEN_PARAM TOKEN_PARAMS
	| eps	

TERMINATOR ->
	.

CLOSING_BRACKET ->
	)

CLOSING_SBRACKET ->
	]

STATEMENT_END ->
	TERMINATOR
	| STATEMENT_END_EXPECTED

BLOCK_END ->
	]
	| BLOCK_CLOSING_EXPECTED

RET_STATEMENT_END ->
	TERMINATOR BLOCK_END
	| BLOCK_END

CLOSING_CURLY_BRACKET ->
	}
