__define START          	1
__define eps            	2

__define CLASS		        4110
__define SUBJECT_ARG		4112
__define SYMBOL		        4113
__define EXPRESSION		4114
__define FIELD			4115
__define HINT			4116
__define HINT_VALUE		4117
__define METHOD			4118
__define PARAMETER		4119
__define NESTED_CLASS		4120
__define OBJECT			4121
__define CODE_BLOCK		4122
__define MESSAGE		4123
__define BLOCK_END		4125
__define MESSAGE_PARAMETER	4124
__define VARIABLE		4126
__define L4_OPERATION           4127
__define DISPATCH		4128
__define ASSIGNING		4129
__define STATIC			4130
__define BASE_CLASS             4131
__define CONSTRUCTOR		4132
__define L3_OPERATION           4133
__define L7_OPERATION           4134
__define RET_STATEMENT		4135
__define L5_OPERATION           4136
__define RESEND			4137
__define ELSE_OPERATION		4138
__define EXTENSION		4139
__define TYPED_MESSAGE_PARAM    4140
__define INCLUDE		4141
__define FORWARD		4142
__define ALT_MESSAGE		4143
__define LOOP			4144
__define INLINE_EXPRESSION	4146
__define MESSAGE_REFERENCE	4147
__define THROW_EXPRESSION       4148
__define IMPORT                 4149
__define RESEND_HANDLER         4150
__define DISPATCH_HANDLER	4151
__define BREAK_EXPRESSION	4152
__define OPEN_PARAMETER		4153
__define OPEN_ARGUMENT_LIST	4154
__define SWITCHING		4155
__define OPTION			4156
__define LAST_OPTION		4157
__define BIGGER_OPTION          4158
__define SMALLER_OPTION		4159
__define SIGNATURE_REFERENCE	4160
__define L6_OPERATION           4161
__define SIZE_VALUE             4162
__define L0_OPERATION           4163

// error rules
__define DECLARATION_END_EXPECTED	16384
__define STATEMENT_END_EXPECTED         16385
__define BLOCK_CLOSING_EXPECTED         16386
__define NESTED_MEMBER_EXPECTED		16387
__define OBJECT_EXPECTED                16388
__define MESSAGE_EXPECTED               16389

__define eof            	12291
__define literal		12292
__define identifier		12293
__define private	        12294
__define reference		12295
__define integer		12296
__define hex			12297
__define real			12298
__define long                   12300

START ->
	INCLUDE_DECLARATION INCLUDE_DECLARATIONS DECLARATIONS eof
	| SYMBOL_DECLARATION DECLARATIONS eof
	| STATIC_DECLARATION DECLARATIONS eof
	| CLASS_DECLARATION DECLARATIONS eof
	| eof
	
DECLARATIONS ->
	SYMBOL_DECLARATION DECLARATIONS
	| STATIC_DECLARATION DECLARATIONS
	| CLASS_DECLARATION DECLARATIONS
	| eps

HINTS ->
	( HINT NEXT_HINT
	| eps

NEXT_HINT ->
	, HINT NEXT_HINT
	| )

HINT -> identifier HINT_R

HINT_VALUE ->
	integer
	| hex
	| identifier
	| literal

HINT_R ->
	: HINT_VALUE
	| eps

INCLUDE_DECLARATION ->
	#define HINTS INCLUDE
	
SYMBOL_DECLARATION ->
	#symbol SYMBOL

STATIC_DECLARATION ->
	#static STATIC
	
CLASS_DECLARATION ->
	#class HINTS CLASS
	
INCLUDE ->
	identifier INCLUDE_R DECLARATION_END
	| reference INCLUDE_R DECLARATION_END

INCLUDE_R ->
	= FORWARD
	| eps

SYMBOL ->
	identifier SYMBOL_BODY
	| private SYMBOL_BODY

STATIC ->
	identifier SYMBOL_BODY
	| private SYMBOL_BODY
	
CLASS ->
	identifier CLASS_BODY
	| private CLASS_BODY
	
NESTED_CLASS ->
	METHOD NESTED_METHODS
	| NESTED_MEMBER_EXPECTED
	
SYMBOL_BODY ->
	= EXPRESSION DECLARATION_END

CLASS_BODY ->
	: BASE_CLASS { FIELDS METHODS CLOSING_CURLY_BRACKET
	| { FIELDS METHODS CLOSING_CURLY_BRACKET

METHOD_BODY ->
	= RET_STATEMENT DECLARATION_END
	| CODE_BLOCK
	| => RESEND DECLARATION_END
	| <= DISPATCH_HANDLER DECLARATION_END
	| < IMPORT > DECLARATION_END
	
INCLUDE_DECLARATIONS ->
	INCLUDE_DECLARATION INCLUDE_DECLARATIONS
	| eps
	
FIELDS ->
	#field HINTS FIELD FIELDS
	| eps

METHODS ->
	#method METHOD METHODS
	| #constructor CONSTRUCTOR METHODS
	| eps

NESTED_METHODS ->
	METHOD NESTED_METHODS
	| CLOSING_CURLY_BRACKET	
	| NESTED_MEMBER_EXPECTED

METHOD_ARGUMENTS ->
	: PARAMETER GENERIC_ARGUMENTS
	| & SUBJECT_ARG START_ARGUMENTS
	| :: OPEN_PARAMETER
	| eps

GENERIC_ARGUMENTS ->
	& SUBJECT_ARG : PARAMETER ARGUMENTS
	| : PARAMETER GENERIC_ARGUMENTS
	| :: OPEN_PARAMETER
	| eps
	
START_ARGUMENTS ->
	& SUBJECT_ARG START_ARGUMENTS
	| : PARAMETER ARGUMENTS
	| eps
	
ARGUMENTS ->
	& SUBJECT_ARG : PARAMETER ARGUMENTS
	| eps
	
STATEMENTS ->
	EXPRESSION EXPRESSION_R
	| #var HINTS VARIABLE NEXT_STATEMENT
	| #loop LOOP NEXT_STATEMENT
	| ^ RET_STATEMENT TERMINATOR BLOCK_END
	| #throw THROW_EXPRESSION NEXT_STATEMENT
	| #break BREAK_EXPRESSION NEXT_STATEMENT
	| BLOCK_END

L0_OPERATIONS ->
	L0_OPERATION L0_OPERATIONS
	| eps

L3_OPERATIONS ->
	L3_OPERATION L3_OPERATIONS
	| eps

L4_OPERATIONS ->
	L4_OPERATION L4_OPERATIONS
	| eps
	
L5_OPERATIONS ->
	L5_OPERATION L5_OPERATIONS
	| eps

L6_OPERATIONS ->
	L6_OPERATION L6_OPERATIONS
	| eps	
	
L7_OPERATIONS ->
	L7_OPERATION                                                      
	| eps	

OPERATIONS ->
	L0_OPERATION L0_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
	| MESSAGE MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
	| EXTENSION MESSAGE MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
        | L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS  ALT_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS  ALT_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS  ALT_OPERATIONS
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS  ALT_OPERATIONS
	| L7_OPERATION  ALT_OPERATIONS
	| ASSIGNING
	| => SWITCHING
	| : MESSAGE_PARAMETER MESSAGE_PARAMETERS
	| eps

ALT_OPERATIONS ->
        || ALT_MESSAGE ALT_OPERATIONS
	| eps
		
MESSAGE_PARAMETERS ->
	: MESSAGE_PARAMETER MESSAGE_PARAMETERS
	| eps	

MESSAGE_OPERATIONS ->
	MESSAGE MESSAGE_OPERATIONS
	| EXTENSION MESSAGE MESSAGE_OPERATIONS
	| eps
	
MESSAGE_ARGUMENTS ->
	& SUBJECT_ARG MESSAGE_ARGUMENT_R MESSAGE_ARGUMENTS
	| eps
	
SUBJECT_ARGS ->
	& SUBJECT_ARG SUBJECT_ARGS
	| eps

FIELD ->
	identifier TERMINATOR

METHOD ->
	identifier METHOD_ARGUMENTS METHOD_BODY
	| reference METHOD_ARGUMENTS METHOD_BODY
	| private METHOD_ARGUMENTS METHOD_BODY
	| <= DISPATCH TERMINATOR
	| => RESEND_HANDLER TERMINATOR

CONSTRUCTOR ->
	identifier METHOD_ARGUMENTS METHOD_BODY
	| reference METHOD_ARGUMENTS METHOD_BODY
	
EXPRESSION_R ->
	NEXT_STATEMENT
	| ]
	
DISPATCH ->
	&& SUBJECT_ARG : MESSAGE_PARAMETER MESSAGE_ARGUMENTS
	          
DISPATCH_HANDLER ->
	MESSAGE
	| MESSAGE_EXPECTED

LOOP ->
	EXPRESSION
	
RESEND_HANDLER ->
	< IMPORT >
	| OBJECT

CODE_BLOCK ->
	[ STATEMENTS

RET_STATEMENT ->
	EXPRESSION
	
EXPRESSION ->
	OBJECT OPERATIONS

NEXT_EXPRESSION ->
	, EXPRESSION NEXT_EXPRESSION
	| CLOSING_BRACKET

INLINE_EXPRESSION ->
	&& INLINE_SIGNATURE CODE_BLOCK

INLINE_SIGNATURE ->
        SUBJECT_ARG INLINE_SIGNATURE2
	| : PARAMETER METHOD_ARGUMENTS

INLINE_SIGNATURE2 ->
	: PARAMETER ARGUMENTS
	| & SUBJECT_ARG : PARAMETER ARGUMENTS
	| eps
	
THROW_EXPRESSION ->
	EXPRESSION
	| OBJECT_EXPECTED

BREAK_EXPRESSION ->
	EXPRESSION

ASSIGNING ->
	:= EXPRESSION

SWITCHING ->
	OPTION NEXT_OPTION

OPTION ->
	OBJECT OPTION_BODY
	
BIGGER_OPTION ->
	OBJECT OPTION_BODY
	
SMALLER_OPTION ->
	OBJECT OPTION_BODY

OPTION_BODY ->
	? CODE_BLOCK

LAST_OPTION ->
	! CODE_BLOCK

NEXT_OPTION ->
	OPTION NEXT_OPTION
	| > BIGGER_OPTION NEXT_OPTION
	| < SMALLER_OPTION NEXT_OPTION
	| LAST_OPTION
	| eps

MESSAGE_REFERENCE ->
	identifier SUBJECT_ARGS
	| private SUBJECT_ARGS

SIGNATURE_REFERENCE ->
	& SUBJECT_ARG SUBJECT_ARGS

VARIABLE ->
	identifier VARIABLE_R

VARIABLE_R ->
	ASSIGNING
	| eps
	
EXTENSION ->
	~ OBJECT
	
OBJECT ->
	identifier OBJECT_R
	| reference OBJECT_R
	| private
	| integer
	| hex
	| long
	| real
	| literal
	| CODE_BLOCK
	| NESTED_EXPRESSION
	| ( EXPRESSION NEXT_EXPRESSION	
	| INLINE_EXPRESSION
	| % MESSAGE_SYMBOL

NESTED_EXPRESSION ->
	{ NESTED_CLASS
	   
MESSAGE_SYMBOL ->
	( MESSAGE_SYMBOL_BODY )
	| SUBJECT_ARG SUBJECT_BODY
	
MESSAGE_SYMBOL_BODY ->
	MESSAGE_REFERENCE MESSAGE_PARAM_OPTION
	| SIGNATURE_REFERENCE

MESSAGE_PARAM_OPTION ->
	( SIZE_VALUE )
	| eps

SUBJECT_BODY ->
	( EXPRESSION )
	| eps
	
OBJECT_R ->
	( EXPRESSION NEXT_EXPRESSION
	| NESTED_EXPRESSION
	| eps

MESSAGE ->
	identifier MESSAGE_R
	| reference MESSAGE_R
	| private MESSAGE_R

ALT_MESSAGE ->
	identifier MESSAGE_R
	| reference MESSAGE_R

MESSAGE_R ->
	: MESSAGE_PARAMETER GENERIC_MESSAGE_ARGUMENTS
	| :: TYPED_MESSAGE_PARAM
	| &: OPEN_ARGUMENT_LIST
	| &:: OPEN_ARGUMENT_PARAMETER
	| & SUBJECT_ARG START_MESSAGE_ARGUMENTS
	| eps

START_MESSAGE_ARGUMENTS ->
	& SUBJECT_ARG START_MESSAGE_ARGUMENTS
	| : MESSAGE_PARAMETER MESSAGE_ARGUMENTS
	| :: TYPED_MESSAGE_PARAM MESSAGE_ARGUMENTS
	| eps

GENERIC_MESSAGE_ARGUMENTS ->
	: MESSAGE_PARAMETER GENERIC_MESSAGE_ARGUMENTS
	| &: OPEN_ARGUMENT_LIST
	| :: TYPED_MESSAGE_PARAM MESSAGE_ARGUMENTS
	| & SUBJECT_ARG MESSAGE_ARGUMENT_R MESSAGE_ARGUMENTS
	| eps
	
MESSAGE_ARGUMENT_R ->
	: MESSAGE_PARAMETER
	| :: TYPED_MESSAGE_PARAM
	
MESSAGE_PARAMETER ->
	OBJECT

OPEN_ARGUMENT_PARAMETER ->
	identifier

OPEN_ARGUMENT_LIST ->
	MESSAGE_PARAMETER NEXT_OPEN_ARGUMENT

NEXT_OPEN_ARGUMENT ->
	: MESSAGE_PARAMETER NEXT_OPEN_ARGUMENT
	| eps

L0_OPERATION ->
	@ OBJECT
	
L3_OPERATION ->
	* L3_OPERAND
	| / L3_OPERAND
	| *= L3_OPERAND
	| /= L3_OPERAND

L4_OPERATION ->
	+ L4_OPERAND
	| - L4_OPERAND
	| += L4_OPERAND
	| -= L4_OPERAND
	| ^& L4_OPERAND
	| ^| L4_OPERAND
	| ^^ L4_OPERAND

L5_OPERATION ->
	<< L5_OPERAND
	| >> L5_OPERAND

L6_OPERATION ->
	== L6_OPERAND
	| != L6_OPERAND
	| < L6_OPERAND
	| > L6_OPERAND
	| <= L6_OPERAND
	| >= L6_OPERAND
	
L7_OPERATION ->
	? L7_OPERAND ELSE_R
	| ! L7_OPERAND

ELSE_R ->
	ELSE_OPERATION
	| eps

ELSE_OPERATION ->
	! L7_OPERAND

L3_OPERAND ->
	OBJECT L0_OPERATIONS MESSAGE_OPERATIONS
	
L4_OPERAND ->
	OBJECT L0_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS
	
L5_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS
	
L6_OPERAND ->
	OBJECT MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS
	
L7_OPERAND ->
	OBJECT

TYPED_MESSAGE_PARAM ->
	OBJECT
	
RESEND ->
	OBJECT
	
BASE_CLASS ->
	identifier
	| reference
	| private

SUBJECT_ARG ->
	identifier
	| private
	| reference

VERB_REFERENCE ->
	identifier
	| reference

PARAMETER ->
	identifier

OPEN_PARAMETER ->
	identifier
	
IMPORT ->
	identifier

FORWARD ->
	reference
	    
SIZE_VALUE ->
	integer

DECLARATION_END ->
	TERMINATOR
	| DECLARATION_END_EXPECTED

STATEMENT_END ->
	TERMINATOR
	| STATEMENT_END_EXPECTED

TERMINATOR ->
	.
	
NEXT_STATEMENT ->
	STATEMENT_END STATEMENTS

BLOCK_END ->
	]
	| BLOCK_CLOSING_EXPECTED

CLOSING_CURLY_BRACKET ->
	}

CLOSING_BRACKET ->
	)

OBJECT_EXPECTED ->
	. ERROR

DECLARATION_END_EXPECTED ->
	#symbol ERROR
	| #static ERROR
	| #define ERROR
	| #class ERROR
	| #method ERROR
	| #field ERROR
	| eof ERROR
	       
BLOCK_CLOSING_EXPECTED ->
	#symbol ERROR
	| #static ERROR
	| #define ERROR
	| #class ERROR
	| eof ERROR

STATEMENT_END_EXPECTED ->
	#var ERROR
	| #loop ERROR
	| #throw ERROR
	| #break ERROR

NESTED_MEMBER_EXPECTED ->
	#method ERROR
	| #field ERROR


MESSAGE_EXPECTED ->
	integer ERROR
	| hex ERROR
	| long ERROR
	| real ERROR
	| ( ERROR
