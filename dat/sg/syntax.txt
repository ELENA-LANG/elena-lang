__define START          	1
__define eps            	2

__define TEMPLATE               4111
__define SUBJECT_ARG		4112
__define EXPRESSION		4114
__define TOKEN_PARAM		4117
__define PARAMETER		4119
__define NESTED_CLASS		4120
__define OBJECT			4121
__define CODE_BLOCK		4122
__define MESSAGE		4123
__define MESSAGE_PARAMETER	4124
__define BLOCK_END		4125
__define L4_OPERATION           4127
__define DISPATCH               4128
__define ASSIGNING		4129
__define BASE_CLASS             4131
__define L3_OPERATION           4133
__define L7_OPERATION           4134
__define RET_STATEMENT		4135
__define L5_OPERATION           4136
__define EXTENSION		4139
__define ALT_MESSAGE		4140
__define CATCH_MESSAGE          4143
__define RESEND                 4145
__define MESSAGE_REFERENCE	4147
__define ROOT_EXPRESSION        4152
__define SWITCHING		4155
__define OPTION			4156
__define LAST_OPTION		4157
__define L6_OPERATION           4161
__define SIZE_PARAM             4162
__define L0_OPERATION           4163
__define TOKEN   		4172
__define SCOPE   		4173
__define ATTRIBUTE   		4174
__define ROOT_MESSAGE		4175
__define LAZY_EXPRESSION	4176

__define DECLARATION_END_EXPECTED	16384
__define STATEMENT_END_EXPECTED         16385
__define BLOCK_CLOSING_EXPECTED         16386

__define eof            	12291
__define literal		12292
__define identifier		12293
__define private	        12294
__define reference		12295
__define integer		12296
__define hex			12297
__define real			12298
__define character		12299
__define long                   12300
__define wide                   12301
__define attribute		12303

START ->
	SCOPE_DECLARATION DECLARATIONS eof
	| ATTRIBUTE_DECLARATION DECLARATIONS eof
	| eof

SCOPE_DECLARATION ->
	TOKEN TOKENS SCOPE

ATTRIBUTE_DECLARATION ->
	ATTRIBUTE ATTRIBUTES TEMPLATE DECLARATION_END

DECLARATIONS ->
	SCOPE_DECLARATION DECLARATIONS
	| ATTRIBUTE_DECLARATION DECLARATIONS eof
	| eps
	
SCOPES ->
	TOKEN TOKENS SCOPE SCOPES
	| eps

NEXT_BASE_CLASS ->
	, BASE_CLASS NEXT_BASE_CLASS
	| eps

TOKENS ->
	TOKEN TOKENS
	| eps

ATTRIBUTES ->
	ATTRIBUTE ATTRIBUTES
	| eps

TOKEN_PARAMS ->
	, TOKEN_PARAM TOKEN_PARAMS
	| )

TOKEN ->
	identifier
	| private 
	| reference

TEMPLATE ->
	identifier

NESTED_CLASS ->
	{ SCOPES CLOSING_CURLY_BRACKET

SCOPE ->
	= SYMBOL_EXPRESSION DECLARATION_END
	| { SCOPES CLOSING_CURLY_BRACKET
	| :: BASE_CLASS NEXT_BASE_CLASS SCOPE_BODY
	| : PARAMETER PARAMETER_BODY METHOD_BODY
	| ( TOKEN_PARAM TOKEN_PARAMS DECLARATION_END
	| => DISPATCH DECLARATION_END
	| <= RESEND
	| CODE_BLOCK
	| DECLARATION_END

SCOPE_BODY ->
	CLASS_BODY
	| = SYMBOL_EXPRESSION DECLARATION_END

PARAMETER_BODY ->
	: PARAMETER PARAMETER_BODY
	| SUBJECT_ARG : PARAMETER NEXT_PARAMETER
	| eps

NEXT_PARAMETER ->
	SUBJECT_ARG : PARAMETER NEXT_PARAMETER
	| eps

CLASS_BODY ->
	{ SCOPES CLOSING_CURLY_BRACKET
	| DECLARATION_END
	     
METHOD_BODY ->
	CODE_BLOCK
	| = RET_STATEMENT DECLARATION_END
	| => DISPATCH DECLARATION_END
	| <= RESEND
	
BASE_CLASS ->
	identifier TOKEN_BODY
	| reference 

TOKEN_BODY ->
	( TOKEN_PARAM TOKEN_PARAMS
	| eps

SYMBOL_EXPRESSION ->
	EXPRESSION

LAZY_EXPRESSION ->
	( EXPRESSION CLOSING_BRACKET

CODE_BLOCK ->
	[ STATEMENTS

STATEMENTS ->
	ROOT_EXPRESSION NEXT_STATEMENT
	| ^ RET_STATEMENT RET_STATEMENT_END
	| BLOCK_END

ROOT_EXPRESSION ->
	identifier ROOT_BODY
	| private ROOT_BODY
	| reference ROOT_OPERATIONS
	| integer ROOT_OPERATIONS
	| hex ROOT_OPERATIONS
	| long ROOT_OPERATIONS
	| real ROOT_OPERATIONS
	| literal ROOT_OPERATIONS
	| wide ROOT_OPERATIONS
	| character ROOT_OPERATIONS
	| constant ROOT_OPERATIONS
	| ( SUB_EXPRESSION ROOT_SUBBODY
	| % MESSAGE_REFERENCE ROOT_OPERATIONS
	| NESTED_CLASS ROOT_OPERATIONS
	| CODE_BLOCK ROOT_OPERATIONS
	| $ LAZY_EXPRESSION ROOT_OPERATIONS

SUB_EXPRESSION ->
	EXPRESSION NEXT_SUB_EXPRESSION
	| & SUBJECT_ARG : PARAMETER SUBJECT_CLOSURE_ARGS
	| : PARAMETER CLOSURE_ARGS

NEXT_SUB_EXPRESSION ->
	, EXPRESSION NEXT_SUB_EXPRESSION
	| CLOSING_BRACKET

NEXT_STATEMENT ->
	STATEMENT_END STATEMENTS
	| BLOCK_END

RET_STATEMENT ->
	EXPRESSION

CLOSURE_ARGS ->
	: PARAMETER CLOSURE_ARGS
	| ) CODE_BLOCK

SUBJECT_CLOSURE_ARGS ->
	& SUBJECT_ARG : PARAMETER SUBJECT_CLOSURE_ARGS
	| ) CODE_BLOCK

EXPRESSION ->
	OBJECT OPERATIONS

DISPATCH ->
	OBJECT

RESEND ->
	MESSAGE RESEND_BODY

RESEND_BODY ->
	; CODE_BLOCK
	|  DECLARATION_END

MESSAGE_PARAMETER ->
	OBJECT

OBJECT ->
	identifier OBJECT_BODY
	| reference
	| private
	| integer
	| hex
	| long
	| real
	| literal
	| wide
	| character
	| % MESSAGE_REFERENCE
	| CODE_BLOCK	
	| ( SUB_EXPRESSION
	| NESTED_CLASS
	| $ LAZY_EXPRESSION

OBJECT_BODY ->
	:: OBJECT_EXT
	| ( ROOT_SUB_EXPRESSION
	| eps

OBJECT_EXT ->
	NESTED_CLASS
	| ( EXPRESSION NEXT_LIST_ITEM

NEXT_LIST_ITEM ->
	, EXPRESSION NEXT_LIST_ITEM
	| CLOSING_BRACKET

MESSAGE ->
	identifier MESSAGE_BODY
	| private MESSAGE_BODY

CATCH_MESSAGE ->
	identifier MESSAGE_BODY
	| reference MESSAGE_BODY

ALT_MESSAGE ->
	identifier MESSAGE_BODY
	| reference MESSAGE_BODY

MESSAGE_BODY ->
	SUBJECT_ARG FIRST_SUBJECT_BODY 
	| : MESSAGE_PARAMETER MESSAGE_PARAMETERS NEXT_SUBJECT
	| eps

FIRST_SUBJECT_BODY ->
	: MESSAGE_PARAMETER NEXT_SUBJECT
	| eps

ROOT_MESSAGE ->
	identifier ROOT_MESSAGE_BODY
	| private ROOT_MESSAGE_BODY

ROOT_MESSAGE_BODY ->
	SUBJECT_ARG FIRST_SUBJECT_BODY
	| : MESSAGE_PARAMETER MESSAGE_PARAMETERS NEXT_SUBJECT
	| ( ROOT_MESSAGE_PARAM
	| eps

ROOT_MESSAGE_PARAM ->
	SIZE_PARAM CLOSING_BRACKET
	| TOKEN_PARAM CLOSING_BRACKET

NEXT_SUBJECT ->
	SUBJECT_ARG : MESSAGE_PARAMETER SUBJECTS
	| eps

SUBJECTS ->
	SUBJECT_ARG : MESSAGE_PARAMETER SUBJECTS
	| eps

MESSAGE_PARAMETERS ->
	: MESSAGE_PARAMETER MESSAGE_PARAMETERS
	| eps

ROOT_BODY ->
	ROOT_MESSAGE NEXT_ROOT_OPERATION
	| EXTENSION MESSAGE
	| L0_OPERATION ROOT_OPERATIONS
        | L5_OPERATION
        | L7_OPERATION
	| ASSIGNING
	| ( ROOT_SUB_EXPRESSION ROOT_CODE_BODY
	| CODE_BLOCK
	| => SWITCHING
	| eps

ROOT_SUB_EXPRESSION ->
	EXPRESSION CLOSING_BRACKET

NEXT_ROOT_OPERATION ->	
	; MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS ALT_OPERATIONS
	| L7_OPERATION
	| ASSIGNING
        | || CATCH_MESSAGE
        | \ ALT_MESSAGE
	| eps

ROOT_OPERATIONS ->
	MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS ALT_OPERATIONS
	| EXTENSION MESSAGE NEXT_MESSAGE L6_OPERATIONS ALT_OPERATIONS
	| L0_OPERATION ROOT_OPERATIONS
        | L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS
	| L6_OPERATION L6_OPERATIONS L7_OPERATIONS
        | L7_OPERATION
	| ASSIGNING
	| => SWITCHING
	| eps

ALT_OPERATIONS ->
        || CATCH_MESSAGE
        | \ ALT_MESSAGE
	| eps

ROOT_SUBBODY ->
	MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
	| EXTENSION MESSAGE NEXT_MESSAGE L6_OPERATIONS ALT_OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS
        | L6_OPERATION L6_OPERATIONS
        | L7_OPERATION
	| => SWITCHING
	| eps

ROOT_CODE_BODY ->
	CODE_BLOCK ROOT_CODE_BODY_OP
	| NESTED_CLASS
	| eps

ROOT_CODE_BODY2 ->
	CODE_BLOCK
	| NESTED_CLASS

ROOT_CODE_BODY_OP ->
        ; ROOT_CODE_BODY2
	| eps

OPERATIONS ->
	MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS L7_OPERATIONS ALT_OPERATIONS
	| EXTENSION MESSAGE NEXT_MESSAGE L6_OPERATIONS ALT_OPERATIONS
	| L0_OPERATION OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L5_OPERATION L5_OPERATIONS L6_OPERATIONS
        | L6_OPERATION L6_OPERATIONS
        | L7_OPERATION
        | || CATCH_MESSAGE
        | \ ALT_MESSAGE
	| => SWITCHING
	| eps

NEXT_MESSAGE ->
	; MESSAGE NEXT_MESSAGE
	| eps

MESSAGE_OPERATIONS ->
	MESSAGE NEXT_MESSAGE
	| EXTENSION MESSAGE NEXT_MESSAGE
	| eps

L0_OPERATION ->
	@ OBJECT 

L0_OPERATIONS ->
	L0_OPERATION L0_OPERATIONS
	| eps

L3_OPERATION ->
	* L3_OPERAND
	| / L3_OPERAND
	| && L3_OPERAND
	| ^^ L3_OPERAND

L3_OPERATIONS ->
	L3_OPERATION L3_OPERATIONS
	| eps

L3_OPERAND ->
	OBJECT MESSAGE_OPERATIONS

L4_OPERATION ->
	+ L4_OPERAND
	| - L4_OPERAND
	| &| L4_OPERAND

L4_OPERATIONS ->
	L4_OPERATION L4_OPERATIONS
	| eps

L4_OPERAND ->
	OBJECT L0_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS

L5_OPERATION ->
	<< L5_OPERAND
	| >> L5_OPERAND

L5_OPERATIONS ->
	L5_OPERATION L5_OPERATIONS
	| eps	

L5_OPERAND ->
	OBJECT L0_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS

L6_OPERATIONS ->
	L6_OPERATION L6_OPERATIONS
	| eps	

L6_OPERATION ->
	== L6_OPERAND
	| != L6_OPERAND
	| < L6_OPERAND
	| > L6_OPERAND
	| <= L6_OPERAND
	| >= L6_OPERAND

L6_OPERAND ->
	OBJECT L0_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS

L7_OPERATION ->
	? L7_OPERAND ELSE_BODY
	| ! L7_OPERAND

L7_OPERATIONS ->
	L7_OPERATION
	| eps	
	
ELSE_OPERATION ->
	! L7_OPERAND
	
ELSE_BODY ->
	ELSE_OPERATION
	| eps	

L7_OPERAND ->
	CODE_BLOCK

SWITCHING ->
	OPTION OPTIONS

OPTION ->
	identifier OPTION_BODY
	| literal OPTION_BODY
	| reference OPTION_BODY
	| integer OPTION_BODY
	| hex OPTION_BODY
	| real OPTION_BODY
	| character OPTION_BODY
	| long OPTION_BODY
	| wide OPTION_BODY
	| constant OPTION_BODY

OPTIONS ->
	; NEXT_OPTION
	| eps

NEXT_OPTION ->
	OPTION OPTIONS
	| LAST_OPTION

LAST_OPTION ->
	! CODE_BLOCK

OPTION_BODY ->
	CODE_BLOCK

EXTENSION ->
	~ OBJECT

ASSIGNING ->
	:= EXPRESSION

ATTRIBUTE ->
	attribute

TOKEN_PARAM ->
	identifier

SIZE_PARAM ->
	integer

SUBJECT_ARG ->
	identifier

PARAMETER ->
	identifier

MESSAGE_REFERENCE ->
	identifier
	| literal

TERMINATOR ->
	.

BLOCK_END ->
	]
	| BLOCK_CLOSING_EXPECTED

CLOSING_BRACKET ->
	)

CLOSING_CURLY_BRACKET ->
	}

DECLARATION_END ->
	TERMINATOR
	| DECLARATION_END_EXPECTED

STATEMENT_END ->
	TERMINATOR
	| STATEMENT_END_EXPECTED

RET_STATEMENT_END ->
	TERMINATOR BLOCK_END
	| BLOCK_END
