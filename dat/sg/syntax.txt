__define START          	1
__define eps            	2

__define SUBJECT_ARG		4112
__define EXPRESSION		4114
__define TOKEN_PARAM		4117
__define PARAMETER		4119
__define NESTED_CLASS		4120
__define OBJECT			4121
__define CODE_BLOCK		4122
__define MESSAGE		4123
__define MESSAGE_PARAMETER	4124
__define BLOCK_END		4125
__define L4_OPERATION           4127
__define DISPATCH               4128
__define ASSIGNING		4129
__define BASE_CLASS             4131
__define L3_OPERATION           4133
__define L7_OPERATION           4134
__define RET_STATEMENT		4135
__define L5_OPERATION           4136
__define EXTENSION		4139
__define ALT_MESSAGE		4140
__define CATCH_MESSAGE          4143
__define RESEND                 4145
__define MESSAGE_REFERENCE	4147
__define ROOT_EXPRESSION        4152
__define SWITCHING		4155
__define OPTION			4156
__define LAST_OPTION		4157
__define L6_OPERATION           4161
__define SIZE_PARAM             4162
__define TOKEN   		4172
__define SCOPE   		4173
__define ATTRIBUTE   		4174
__define LAZY_EXPRESSION	4176
__define ANGLE_OPERATOR         4177
__define ARRAY_OPERATION        4179
__define XCLOSURE               4183
__define NESTED_CODE_BLOCK      4186
__define NESTED_EXPRESSION      4187
__define L8_OPERATION           4188
__define IDLE_MESSAGE_PARAMETER 4189
__define SUB_MESSAGE_PARAMETER  4190
__define DYNAMIC_SIZE_PARAM	4191

__define DECLARATION_END_EXPECTED	16384
__define STATEMENT_END_EXPECTED         16385
__define BLOCK_CLOSING_EXPECTED         16386

__define eof            	12291
__define literal		12292
__define identifier		12293
__define private	        12294
__define reference		12295
__define integer		12296
__define hex			12297
__define real			12298
__define character		12299
__define long                   12300
__define wide                   12301
__define constant               12302
__define attribute		12303
__define member			12304

START ->
	SCOPE_DECLARATION DECLARATIONS eof
	| eof

DECLARATIONS ->
	SCOPE_DECLARATION DECLARATIONS
	| eps
	
SCOPE_DECLARATION ->
	TOKEN TOKENS SCOPE

TOKEN_DECLARATION ->
	= TOKEN_DECLARATION_BODY

TOKEN_DECLARATION_BODY ->
	SYMBOL_EXPRESSION
	| ATTRIBUTE

SCOPES ->
	TOKEN TOKENS SCOPE SCOPES
	| eps

SCOPE ->
	TOKEN_DECLARATION DECLARATION_END
	| DECLARATION_END
	| OPENING_CURLY_BRACKET SCOPES CLOSING_CURLY_BRACKET
	| DOUBLE_COLON BASE_CLASS NEXT_BASE_CLASS CLASS_SCOPE
	| CODE_BLOCK
	| DISPATCH_DECLARATION DECLARATION_END
	| COLON PARAMETER PARAMETER_BODY METHOD_BODY
	| OPENING_BRACKET SIGNATURE_BODY METHOD_BODY
	| RESEND_OPERATOR RESEND
	| ASSIGN_OPERATOR ASSIGNING DECLARATION_END

CLASS_SCOPE ->
	{ SCOPES CLOSING_CURLY_BRACKET
	| DECLARATION_END
	| CODE_BLOCK

PARAMETER_BODY ->
	: PARAMETER NEXT_PARAMETER
	| SUBJECT_ARG : PARAMETER NEXT_SUBJECT_PARAMETER
	| eps

NEXT_BASE_CLASS ->
	, BASE_CLASS NEXT_BASE_CLASS
	| eps
	        
NEXT_SUBJECT_PARAMETER ->
	SUBJECT_ARG : PARAMETER NEXT_SUBJECT_PARAMETER
	| eps

NEXT_PARAMETER ->
	: PARAMETER NEXT_PARAMETER
	| eps
	
SIGNATURE_BODY ->
	TOKEN_PARAM PARAMETER NEXT_SIGNATURE

NEXT_SIGNATURE ->
	, TOKEN_PARAM PARAMETER NEXT_SIGNATURE
	| CLOSING_BRACKET NEXT_SIGNATURE_BODY

NEXT_SIGNATURE_BODY ->
	SUBJECT_ARG ( TOKEN_PARAM PARAMETER NEXT_SIGNATURE
	| eps

METHOD_BODY ->
	CODE_BLOCK
	| = RET_STATEMENT DECLARATION_END
	| => DISPATCH DECLARATION_END
	| <= RESEND

DISPATCH_DECLARATION ->
	=> DISPATCH 
	
CODE_BLOCK ->
	OPEN_SBRACKET STATEMENTS

DISPATCH ->
	OBJECT

EXTENSION ->
	OBJECT

RESEND ->
	MESSAGE RESEND_BODY

RESEND_BODY ->
	; CODE_BLOCK
	| DECLARATION_END

STATEMENTS ->
	ROOT_EXPRESSION NEXT_STATEMENT
	| ^ RET_STATEMENT RET_STATEMENT_END
	| BLOCK_END

NEXT_STATEMENT ->
	STATEMENT_END STATEMENTS
	| BLOCK_END	

RET_STATEMENT ->
	EXPRESSION

SYMBOL_EXPRESSION ->
	EXPRESSION

ROOT_EXPRESSION ->
	identifier ROOT_OPERATIONS
	| private ROOT_OPERATIONS
	| reference ROOT_OPERATIONS
	| member ROOT_OPERATIONS
	| character OPERATIONS
	| literal OPERATIONS
	| wide OPERATIONS
	| integer OPERATIONS
	| hex OPERATIONS
	| long OPERATIONS
	| real OPERATIONS
	| constant OPERATIONS
	| CODE_BLOCK OPERATIONS
	| OPENING_BRACKET SUB_EXPRESSION ROOT_SUB_OPERATIONS	
	| DOLLAR_SIGN LAZY_EXPRESSION OPERATIONS

SUB_EXPRESSION ->
	EXPRESSION NEXT_SUB_EXPRESSION
	| : PARAMETER CLOSURE_ARGS

NEXT_SUB_EXPRESSION ->
	, EXPRESSION NEXT_SUB_EXPRESSION
	| CLOSING_BRACKET

CLOSURE_ARGS ->
	: PARAMETER CLOSURE_ARGS
	| ) SIGNATURE_BODY CLOSURE_ARGS_BODY

SIGNATURE_BODY ->
	< TOKEN_PARAM TOKEN_PARAMS
	| eps

CLOSURE_ARGS_BODY ->
	CODE_BLOCK
	| ( RET_STATEMENT )

EXPRESSION ->
        OBJECT OPERATIONS

OBJECT ->
	identifier OBJECT_BODY
	| private
	| member
	| reference OBJECT_BODY
	| integer
	| hex
	| long
	| real
	| literal
	| wide
	| character
	| constant
	| CODE_BLOCK	
	| OPENING_BRACKET SUB_EXPRESSION
	| NESTED_CLASS
	| DOLLAR_SIGN LAZY_EXPRESSION
	| PERCENT_SIGN MESSAGE_REFERENCE

OBJECT_BODY ->
	:: OBJECT_EXT
	| eps

OBJECT_EXT ->
	NESTED_CLASS
	| ( EXPRESSION NEXT_SUB_EXPRESSION

ROOT_SUB_OPERATIONS ->
	L7_OPERATION
	| OPERATIONS
	| => SWITCHING

ROOT_OPERATIONS ->
	MESSAGE NEXT_MESSAGE L5_OPERATIONS L6_OPERATIONS ROOT_MESSAGE_OPERATIONS
	| ~ EXTENSION MESSAGE NEXT_MESSAGE L5_OPERATIONS L6_OPERATIONS
	| ( SUB_BODY ROOT_BODY
	| ARRAY_OPERATION ARRAY_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS ROOT_MESSAGE_OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L5_OPERATION L6_OPERATIONS
        | L6_OPERATION ROOT_L6_OPERATIONS
	| L7_OPERATION
	| L8_OPERATION
	| := ASSIGNING
	| => SWITCHING
        | || CATCH_MESSAGE
        | \ ALT_MESSAGE
	| eps

ARRAY_OPERATION ->
	[ EXPRESSION CLOSING_SBRACKET

ARRAY_OPERATIONS ->
	ARRAY_OPERATION ARRAY_OPERATIONS
	| eps

ROOT_L6_OPERATIONS ->
	:= ASSIGNING
	| eps

ROOT_MESSAGE_OPERATIONS ->
	:= ASSIGNING
	| \ ALT_MESSAGE
        | || CATCH_MESSAGE
	| L7_OPERATION
	| L8_OPERATION
	| eps

ROOT_BODY ->
	CODE_BLOCK NEXT_ROOT_BODY
	| NESTED_CLASS
	| L6_OPERATION
	| MESSAGE NEXT_MESSAGE
	| eps

NEXT_ROOT_BODY ->
        ; ROOT_BODY2
	| eps	

ROOT_BODY2 ->
	CODE_BLOCK
	| NESTED_CODE_BLOCK

NESTED_CODE_BLOCK ->
        NESTED_EXPRESSION

NESTED_EXPRESSION ->
	identifier OPEN_BRACKET SUB_BODY ROOT_BODY

OPERATIONS ->
	MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS ALT_OPERATIONS
	| ~ EXTENSION MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS ALT_OPERATIONS
	| ( SUB_BODY SUB_BODY_OPERATIONS
	| ARRAY_OPERATION ARRAY_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L5_OPERATION L6_OPERATIONS
        | L6_OPERATION
        | || CATCH_MESSAGE
        | \ ALT_MESSAGE
	| eps

SUB_BODY ->
	SUB_MESSAGE_PARAMETER SUB_MESSAGE_PARAMETERS
	| IDLE_MESSAGE_PARAMETER

IDLE_MESSAGE_PARAMETER ->
	CLOSING_BRACKET

SUB_MESSAGE_PARAMETER ->
	OBJECT OPERATIONS

SUB_MESSAGE_PARAMETERS ->
	, SUB_MESSAGE_PARAMETER SUB_MESSAGE_PARAMETERS
	| CLOSING_BRACKET 

MESSAGE_OPERATIONS ->
	MESSAGE NEXT_MESSAGE
	| ~ EXTENSION MESSAGE NEXT_MESSAGE
	| ( SUB_BODY
	| eps

SUB_BODY_OPERATIONS ->
	MESSAGE NEXT_MESSAGE L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L4_OPERATION L4_OPERATIONS L5_OPERATIONS L6_OPERATIONS
	| L5_OPERATION L6_OPERATIONS
        | L6_OPERATION
	| eps

NEXT_MESSAGE ->
	; MESSAGE NEXT_MESSAGE
	| eps

MESSAGE ->
	identifier MESSAGE_BODY
	| private MESSAGE_BODY

MESSAGE_BODY ->
	: MESSAGE_PARAMETER NEXT_SUBJECT_ARG
	| SUBJECT_ARG SUBJECT_ARG_R
	| ( MESSAGE_LIST
	| eps

SUBJECT_ARG_R ->
	: MESSAGE_PARAMETER NEXT_SUBJECT_ARG
	| ( SUBJECT_LIST

SUBJECT_LIST ->
	EXPRESSION CLOSING_BRACKET NEXT_SUBJECT_LIST_ITEM
	| XCLOSURE

NEXT_SUBJECT_LIST_ITEM ->
	SUBJECT_ARG SUBJECT_ARG_R
	| eps
	      
NEXT_SUBJECT_ARG ->
	SUBJECT_ARG SUBJECT_ARG_R
	| eps

MESSAGE_LIST ->
	EXPRESSION MESSAGE_LIST_R
	| XCLOSURE

MESSAGE_LIST_R  ->
	, EXPRESSION NEXT_MESSAGE_LIST_ITEM
	| CLOSING_BRACKET NEXT_SUBJECT_LIST_ITEM

NEXT_MESSAGE_LIST_ITEM ->
	, EXPRESSION NEXT_MESSAGE_LIST_ITEM
	| CLOSING_BRACKET

ALT_MESSAGE ->
	identifier MESSAGE_BODY

CATCH_MESSAGE ->
	identifier MESSAGE_BODY
	| reference MESSAGE_BODY

XCLOSURE ->
	COLON PARAMETER CLOSURE_ARGS NEXT_SUBJECT_LIST_ITEM

SWITCHING ->
	OPTION OPTIONS

OPTION ->
	identifier OPTION_BODY
	| literal OPTION_BODY
	| reference OPTION_BODY
	| integer OPTION_BODY
	| hex OPTION_BODY
	| real OPTION_BODY
	| character OPTION_BODY
	| long OPTION_BODY
	| wide OPTION_BODY
	| constant OPTION_BODY

OPTIONS ->
	; NEXT_OPTION
	| eps

NEXT_OPTION ->
	OPTION OPTIONS
	| LAST_OPTION

LAST_OPTION ->
	EXCALMATION CODE_BLOCK

OPTION_BODY ->
	CODE_BLOCK

ASSIGNING ->
	EXPRESSION

NESTED_CLASS ->
	OPENING_CURLY_BRACKET SCOPES CLOSING_CURLY_BRACKET

MESSAGE_PARAMETER ->
	OBJECT

L3_OPERATION ->
	* L3_OPERAND
	| / L3_OPERAND
	| && L3_OPERAND
	| ^^ L3_OPERAND

L3_OPERAND ->
	OBJECT ARRAY_OPERATIONS MESSAGE_OPERATIONS

L3_OPERATIONS ->
	L3_OPERATION L3_OPERATIONS
	| eps

L4_OPERATION ->
	+ L4_OPERAND
	| - L4_OPERAND
	| &| L4_OPERAND

L4_OPERAND ->
	OBJECT ARRAY_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS

L4_OPERATIONS ->
	L4_OPERATION L4_OPERATIONS
	| eps

L5_OPERATION ->
	<< L5_OPERAND
	| >> L5_OPERAND

L5_OPERAND ->
	OBJECT ARRAY_OPERATIONS MESSAGE_OPERATIONS

L5_OPERATIONS ->
	L5_OPERATION L5_OPERATIONS
	| eps	

L6_OPERATION ->
	< OBJECT TEMPLATE_BODY
	| DYNAMIC_SIZE_PARAM SIZE_OPERAND
	| > L6_OPERAND
	| == L6_OPERAND
	| != L6_OPERAND
	| <= L6_OPERAND
	| >= L6_OPERAND

L6_OPERATIONS ->
	L6_OPERATION
	| eps	

L6_OPERAND ->
	OBJECT ARRAY_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS

L7_OPERATION ->
	? L7_OPERAND ELSE_BODY
	| ! L7_OPERAND

ELSE_BODY ->
	ELSE_OPERATION
	| eps	

ELSE_OPERATION ->
	! L7_OPERAND

L7_OPERAND ->
	CODE_BLOCK

ALT_OPERATIONS ->
        || CATCH_MESSAGE
	| \ ALT_MESSAGE
	| eps

L8_OPERATION ->
	+= L8_OPERAND	
	| -= L8_OPERAND
	| *= L8_OPERAND
	| /= L8_OPERAND

L8_OPERAND ->
	OBJECT ARRAY_OPERATIONS MESSAGE_OPERATIONS L3_OPERATIONS L4_OPERATIONS L5_OPERATIONS

LAZY_EXPRESSION ->
	OPEN_BRACKET EXPRESSION CLOSING_BRACKET

TEMPLATE_BODY ->
	ANGLE_OPERATOR TEMPLATE_OPERAND
	| MESSAGE NEXT_MESSAGE
	| ARRAY_OPERATION ARRAY_OPERATIONS
	| ( SUB_BODY SUB_BODY_OPERATIONS
	| eps

SIZE_OPERAND ->
	( EXPRESSION )

TEMPLATE_OPERAND ->
	( TEMPLATE_BRACKET
	| MESSAGE
	| eps
	          
TEMPLATE_BRACKET ->
	EXPRESSION )
	| )

DECLARATION_END ->
	TERMINATOR
	| DECLARATION_END_EXPECTED

TOKEN_BODY ->
	< FIRST_TOKEN_PARAM
	| DYNAMIC_SIZE_PARAM
	| eps

MESSAGE_REFERENCE ->
	identifier
	| literal

FIRST_TOKEN_PARAM ->
	TOKEN_PARAM TOKEN_PARAMS
	| SIZE_PARAM CLOSING_ANGLE_BRACKET

TOKENS ->
	TOKEN TOKENS
	| eps

TOKEN ->
	identifier TOKEN_BODY
	| private 
	| member
	| reference

TOKEN_PARAMS ->
	, TOKEN_PARAM TOKEN_PARAMS
	| CLOSING_ANGLE_BRACKET

TOKEN_PARAM ->
	identifier TOKEN_BODY
	| reference
	| private

SUBJECT_ARG ->
	identifier SUBJECT_BODY
	      
SUBJECT_BODY ->
	< TOKEN_PARAM >
	| DYNAMIC_SIZE_PARAM
	| eps

BASE_CLASS ->
	identifier TOKEN_BODY
	| reference 
	| private

ATTRIBUTE ->
	attribute

SIZE_PARAM ->
	integer
	
PARAMETER ->
	identifier

OPEN_SBRACKET ->
	[

OPEN_BRACKET ->
	(

CLOSING_CURLY_BRACKET ->
	}

CLOSING_ANGLE_BRACKET ->
	>

OPENING_CURLY_BRACKET ->
	{

OPENING_BRACKET ->
	(

CLOSING_BRACKET ->
	)

CLOSING_SBRACKET ->
	]

ANGLE_OPERATOR ->
	>

BLOCK_END ->
	]
	| BLOCK_CLOSING_EXPECTED

STATEMENT_END ->
	TERMINATOR
	| STATEMENT_END_EXPECTED

RET_STATEMENT_END ->
	TERMINATOR BLOCK_END
	| BLOCK_END

TERMINATOR ->
	.

COLON ->
	:

DOUBLE_COLON ->
	::

RESEND_OPERATOR ->
	<=

DYNAMIC_SIZE_PARAM ->
	<>

ASSIGN_OPERATOR ->
	:=

EXCALMATION ->
	!

DOLLAR_SIGN ->
	$

PERCENT_SIGN ->
	%