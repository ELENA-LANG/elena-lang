__define START          	1
__define eps            	2

__define TEMPLATE               4111
__define SUBJECT_ARG		4112
__define EXPRESSION		4114
__define TOKEN_PARAM		4117
__define PARAMETER		4119
__define OBJECT			4121
__define CODE_BLOCK		4122
__define MESSAGE		4123
__define MESSAGE_PARAMETER	4124
__define BLOCK_END		4125
__define DISPATCH               4128
__define ASSIGNING		4129
__define BASE_CLASS             4131
__define RET_STATEMENT		4135
__define EXTENSION		4139
__define MESSAGE_REFERENCE	4147
__define ROOT_EXPRESSION        4152
__define TOKEN   		4172
__define SCOPE   		4173
__define ATTRIBUTE   		4174

__define DECLARATION_END_EXPECTED	16384
__define STATEMENT_END_EXPECTED         16385
__define BLOCK_CLOSING_EXPECTED         16386

__define eof            	12291
__define identifier		12293
__define private	        12294
__define reference		12295
__define integer		12296
__define attribute		12303

START ->
	SCOPE_DECLARATION DECLARATIONS eof
	| ATTRIBUTE_DECLARATION DECLARATIONS eof
	| eof

SCOPE_DECLARATION ->
	TOKEN TOKENS SCOPE

ATTRIBUTE_DECLARATION ->
	ATTRIBUTE ATTRIBUTES TEMPLATE DECLARATION_END

DECLARATIONS ->
	SCOPE_DECLARATION DECLARATIONS
	| ATTRIBUTE_DECLARATION DECLARATIONS eof
	| eps
	
SCOPES ->
	TOKEN TOKENS SCOPE SCOPES
	| eps

TOKENS ->
	TOKEN TOKENS
	| eps

ATTRIBUTES ->
	ATTRIBUTE ATTRIBUTES
	| eps

TOKEN_PARAMS ->
	, TOKEN_PARAM TOKEN_PARAMS
	| )

TOKEN ->
	identifier
	| private 

TEMPLATE ->
	identifier

SCOPE ->
	= SYMBOL_EXPRESSION DECLARATION_END
	| { SCOPES CLOSING_CURLY_BRACKET
	| :: BASE_CLASS CLASS_BODY
	| : PARAMETER NEXT_PARAMETER METHOD_BODY
	| => DISPATCH DECLARATION_END
	| CODE_BLOCK
	| DECLARATION_END

NEXT_PARAMETER ->
	SUBJECT_ARG : PARAMETER NEXT_PARAMETER
	| eps

CLASS_BODY ->
	{ SCOPES CLOSING_CURLY_BRACKET
	| DECLARATION_END
	     
METHOD_BODY ->
	CODE_BLOCK
	| = RET_STATEMENT DECLARATION_END
	
BASE_CLASS ->
	identifier TOKEN_BODY
	| reference 

TOKEN_BODY ->
	( TOKEN_PARAM TOKEN_PARAMS
	| eps

SYMBOL_EXPRESSION ->
	EXPRESSION

CODE_BLOCK ->
	[ STATEMENTS

STATEMENTS ->
	ROOT_EXPRESSION NEXT_STATEMENT
	| BLOCK_END

ROOT_EXPRESSION ->
	identifier ROOT_BODY
	| private

NEXT_STATEMENT ->
	STATEMENT_END STATEMENTS
	| BLOCK_END

RET_STATEMENT ->
	EXPRESSION

SUB_EXPRESSION ->
	: PARAMETER CLOSURE_ARGS

CLOSURE_ARGS ->
	) CODE_BLOCK

EXPRESSION ->
	OBJECT OPERATIONS

DISPATCH ->
	OBJECT

MESSAGE_PARAMETER ->
	OBJECT

OBJECT ->
	identifier
	| reference
	| private
	| integer
	| % MESSAGE_REFERENCE
	| CODE_BLOCK	
	| ( SUB_EXPRESSION

MESSAGE ->
	identifier MESSAGE_BODY
	| private MESSAGE_BODY

MESSAGE_BODY ->
	SUBJECT_ARG NEXT_SUBJECT_ARG
	| : MESSAGE_PARAMETER NEXT_SUBJECT
	| eps

NEXT_SUBJECT_ARG ->
	: MESSAGE_PARAMETER
	| eps

NEXT_SUBJECT ->
	SUBJECT_ARG : MESSAGE_PARAMETER SUBJECTS
	| eps

SUBJECTS ->
	SUBJECT_ARG : MESSAGE_PARAMETER SUBJECTS
	| eps

ROOT_BODY ->
	MESSAGE ROOT_OPERATIONS
	| eps

ROOT_OPERATIONS ->
	ASSIGNING
	| eps

OPERATIONS ->
	MESSAGE
	| EXTENSION MESSAGE
	| eps

EXTENSION ->
	:: OBJECT

ASSIGNING ->
	:= EXPRESSION

ATTRIBUTE ->
	attribute

TOKEN_PARAM ->
	identifier

SUBJECT_ARG ->
	identifier

PARAMETER ->
	identifier

MESSAGE_REFERENCE ->
	identifier
	| literal

TERMINATOR ->
	.

BLOCK_END ->
	]
	| BLOCK_CLOSING_EXPECTED

CLOSING_CURLY_BRACKET ->
	}

DECLARATION_END ->
	TERMINATOR
	| DECLARATION_END_EXPECTED

STATEMENT_END ->
	TERMINATOR
	| STATEMENT_END_EXPECTED
