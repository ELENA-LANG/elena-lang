__define START          	1
__define eps            	2
__define eof            	69635
__define literal		69636
__define identifier		69637
__define private	        69638
__define reference		69639
__define integer		69640
__define hex			69641
__define real			69642
__define wildcard               69643

__define SHORTCUT		4110
__define SHORTCUT_REFERENCE     4112
__define WILDSHORTCUT_REFERENCE 4114
__define CLASS			4116
__define SYMBOL			4118
__define STATIC			4120
__define ACTION_EXPRESSION      4122
__define EXTERNAL_EXPRESSION    4124
__define EMBEDDED_EXPRESSION    4126
__define SYMBOL_EXPRESSION	4128
__define EXTENSION              4130
__define EXPRESSION             4132
__define METHOD			4134
__define METHOD_PARAMETER       4136
__define VARIABLE               4138
__define OBJECT         	4140
__define CODE_BRACKETS          4142
__define BASE_CLASS             4144
__define FIELD                  4146
__define SIZE                   4148
__define ROLE                   4150
__define ASSIGNING		4152
__define RET_STATEMENT          4154
__define LOOP                   4156
__define SHIFT                  4158
__define BLOCK_END              4160
__define ROLE_NAME              4162
__define ALTERNATIVE            4164
__define SYMBOL_PARAMETER       4166
__define EXTEND     		4168
__define CASE_EXPRESSION        4170
__define HINT			4172
__define HINT_VALUE             4174
__define L0_OPERATION           4176
__define L1_OPERATION           4178
__define L2_OPERATION           4180
__define L3_OPERATION           4182
__define L4_OPERATION           4184
__define L0_EXPRESSION          4186
__define L1_EXPRESSION          4188
__define L2_EXPRESSION          4190
__define L3_EXPRESSION          4192
__define L4_EXPRESSION          4194
__define GROUP                  4196
__define TYPE                   4198
__define CAST                   4200
__define SCOPE                  4202
__define MESSAGE                4204

// error rules
__define DOT_EXPECTED                 16384
__define FIELD_DOT_EXPECTED           16385
__define CLOSE_BRACKET_EXPECTED       16386
__define CLOSE_BRACKET_EXPECTED2      16387
__define OPEN_BRACKET_EXPECTED        16388
__define OPEN_ACTION_BRACKET_EXPECTED 16389
__define CLOSE_SBRACKET_EXPECTED      16390
__define CLOSE_SBRACKET_EXPECTED2     16391
__define CLOSE_BRACE_EXPECTED         16392
__define VARIABLE_NAME_EXPECTED       16393
__define CLOSE_SBRACKET_EXPECTED3     16394
__define VARIABLE_NAME_EXPECTED2      16395
__define EXTENSION_NOTEXPECTED        16396
__define METHOD_NAME_EXPECTED         16397
__define EQUAL_EXPECTED               16398 

START ->
	#scope SCOPE SCOPES SHORTCUTS SYMBOLS
	| #область HINT_OPTION SHORTCUT SHORTCUTS SYMBOLS 
	| #define HINT_OPTION SHORTCUT SHORTCUTS SYMBOLS         
	| #задать HINT_OPTION SHORTCUT SHORTCUTS SYMBOLS 
	| #class HINT_OPTION CLASS SYMBOLS
	| #класс HINT_OPTION CLASS SYMBOLS
	| #symbol HINT_OPTION SYMBOL SYMBOLS
	| #символ HINT_OPTION SYMBOL SYMBOLS
	| #static HINT_OPTION STATIC SYMBOLS
	| #статичный HINT_OPTION STATIC SYMBOLS 
	| eof

SCOPE ->
	identifier { MESSAGE MESSAGES

SCOPES ->
	#scope SCOPE SCOPES
	| #область SCOPE SCOPES 
	| eps

MESSAGE ->
	identifier

MESSAGES ->
	, MESSAGE MESSAGES
	| }

SYMBOLS ->
	#class HINT_OPTION CLASS SYMBOLS
	| #класс HINT_OPTION CLASS SYMBOLS 
	| #symbol HINT_OPTION SYMBOL SYMBOLS
	| #символ HINT_OPTION SYMBOL SYMBOLS 
	| #static HINT_OPTION STATIC SYMBOLS
	| #статичный HINT_OPTION STATIC SYMBOLS 
	| eof

SYMBOL ->
	identifier SYMBOL_PARAMETER_OPTION SYMBOL_BODY
	| private SYMBOL_PARAMETER_OPTION SYMBOL_BODY
	| VARIABLE_NAME_EXPECTED

STATIC ->
	identifier SYMBOL_BODY
	| private SYMBOL_BODY
	| VARIABLE_NAME_EXPECTED

SYMBOL_PARAMETER_OPTION ->
	: SYMBOL_PARAMETER
	| eps

SYMBOL_PARAMETER ->
	identifier | private

CLASS ->
	identifier CLASS_BODY 
	| private CLASS_BODY
	| VARIABLE_NAME_EXPECTED

CLASS_BODY ->
	{ FIELDS ROLES METHODS REDIRECTION CLOSING_BRACE
	| ( BASE_CLASS CLOSING_BRACKET2 { FIELDS ROLES METHODS REDIRECTION CLOSING_BRACE

BASE_CLASS ->
	identifier | private | reference

FIELDS ->
	#field FIELD TERMINAL_DOT FIELDS
	| #поле FIELD TERMINAL_DOT FIELDS 
	| eps

FIELD ->
	identifier
        | private
	| SIZE_OPTION
	| VARIABLE_NAME_EXPECTED
	| eps

SIZE_OPTION ->
	( SIZE CLOSING_BRACKET

SIZE ->
	integer | hex

ROLES ->
	#role ROLE ROLES
	| #роль ROLE ROLES 
	| eps

ROLE ->
	identifier ROLE_BODY 
	| private ROLE_BODY 
	| VARIABLE_NAME_EXPECTED

ROLE_BODY ->
	{ METHODS EXTENSION_ERROR CLOSING_BRACE

EXTENSION_ERROR ->
	EXTENSION_NOTEXPECTED
	| eps

METHODS ->
	#method HINT_OPTION METHOD METHODS
	| #метод HINT_OPTION METHOD METHODS 
	| eps

METHOD ->
	identifier METHOD_BODY
	| private METHOD_BODY
	| reference METHOD_BODY
        | == METHOD_PARAMETER OPERATOR_BODY
        | != METHOD_PARAMETER OPERATOR_BODY
        | < METHOD_PARAMETER OPERATOR_BODY
        | > METHOD_PARAMETER OPERATOR_BODY
        | <= METHOD_PARAMETER OPERATOR_BODY
        | >= METHOD_PARAMETER OPERATOR_BODY
        | + METHOD_PARAMETER OPERATOR_BODY
        | - METHOD_PARAMETER OPERATOR_BODY
        | * METHOD_PARAMETER OPERATOR_BODY
        | / METHOD_PARAMETER OPERATOR_BODY
        | += METHOD_PARAMETER OPERATOR_BODY
        | -= METHOD_PARAMETER OPERATOR_BODY
        | *= METHOD_PARAMETER OPERATOR_BODY
        | /= METHOD_PARAMETER OPERATOR_BODY
        | << METHOD_PARAMETER OPERATOR_BODY
        | >> METHOD_PARAMETER OPERATOR_BODY
        | @ METHOD_PARAMETER OPERATOR_BODY
	| => OPERATOR_BODY
	| ? OPERATOR_BODY
	| ! OPERATOR_BODY
	| METHOD_NAME_EXPECTED

SYMBOL_BODY ->
	= EXPRESSION TERMINAL_DOT
	| ACTION_EXPRESSION TERMINAL_DOT
	| EQUAL_EXPECTED

METHOD_BODY ->	
	CODE_BRACKETS
	| : METHOD_PARAMETER OPERATOR_BODY
	| = RET_STATEMENT

OPERATOR_BODY ->	
        CODE_BRACKETS
	| = RET_STATEMENT

CODE_BRACKETS ->
	[ STATEMENTS

STATEMENTS ->
	EXPRESSION NEXT_STATEMENT
	| #var VARIABLE NEXT_STATEMENT
	| #пер VARIABLE NEXT_STATEMENT 
	| #if CASE_EXPRESSION NEXT_STATEMENT
	| #если CASE_EXPRESSION NEXT_STATEMENT 
	| #loop LOOP NEXT_STATEMENT
	| #цикл LOOP NEXT_STATEMENT 
	| SHIFT NEXT_STATEMENT
	| ^ RET_STATEMENT BLOCK_END2
	| BLOCK_END

VARIABLE ->
	identifier ASSIGNING
	| private ASSIGNING
	| VARIABLE_NAME_EXPECTED

NEXT_STATEMENT ->
	. STATEMENTS
	| DOT_EXPECTED

RET_STATEMENT ->
	EXPRESSION RET_STATEMENT_END

METHOD_PARAMETER ->
	identifier | private

REDIRECTION ->
	#annex EXTEND TERMINAL_DOT
	| #дополнение EXTEND TERMINAL_DOT 
	| eps

EXTEND ->
	OBJECT

EXPRESSION ->
	OBJECT OPERATIONS
	| #external EXTERNAL_EXPRESSION
	| #внешний EXTERNAL_EXPRESSION 
	| #inline EMBEDDED_EXPRESSION
	| #встроенный EMBEDDED_EXPRESSION

ACTION_EXPRESSION ->
	=> ACTION_BODY

ACTION_BODY ->
	CODE_BRACKETS
	| ( EXPRESSION CLOSING_BRACKET
	| OPEN_ACTION_BRACKET_EXPECTED

SYMBOL_EXPRESSION ->
	{ METHOD INLINE_METHODS CLOSING_BRACE

SHIFT ->
	#shift ROLE_OPTION
	| #смена ROLE_OPTION 

ROLE_OPTION ->
	 ROLE_NAME
	 | eps

ROLE_NAME ->
	identifier

OBJECT ->
	identifier IDENTIFIER_OPTION
	| reference REFERENCE_OPTION
	| private IDENTIFIER_OPTION
	| literal
	| integer
	| hex
	| real
	| SYMBOL_EXPRESSION
	| ( EXPRESSION MEMBERS
	| #group GROUP
	| #группа GROUP 
	| #cast CAST
	| #сеть CAST 
	| #type TYPE
	| #тип TYPE 
	| #annex EXTENSION_EXPRESSION
	| #дополнение EXTENSION_EXPRESSION 
	| ACTION_EXPRESSION

IDENTIFIER_OPTION ->
	ACTION_EXPRESSION
	| SYMBOL_EXPRESSION
	| eps

REFERENCE_OPTION ->
	SYMBOL_EXPRESSION
	| eps

GROUP ->
	( EXPRESSION MEMBERS

CAST ->
	( EXPRESSION MEMBERS

TYPE ->
	reference | identifier

MEMBERS ->
	, EXPRESSION MEMBERS
	| )
	| CLOSE_BRACKET_EXPECTED

LOOP ->
	OBJECT OPERATION LOOP_BODY

LOOP_BODY ->
	CODE_BRACKETS
	| eps

CASE_EXPRESSION ->
	OBJECT OPERATION CASE_OPTIONS

CASE_OPTIONS ->
	CODE_BRACKETS ELSE_OPTION
	| ALTERNATIVE CODE_BRACKETS

ELSE_OPTION ->
	ALTERNATIVE ELSE_EXPRESSION
	| eps

ELSE_EXPRESSION ->
	OPERATION CODE_BRACKETS ELSE_OPTION
	| CODE_BRACKETS

OPERATIONS ->
	ASSIGNING
	| OPERATION ALTERNATIVES
	| eps

ALTERNATIVES ->
	ALTERNATIVE OPERATION ALTERNATIVES
	| eps

ASSIGNING ->
	:= EXPRESSION

OPERATION ->
	L0_OPERATION L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS
	| L1_OPERATION L1_OPERATIONS L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS
	| L2_OPERATION L2_OPERATIONS L3_OPERATIONS L4_OPERATIONS
	| L3_OPERATION L3_OPERATIONS L4_OPERATIONS
	| L4_OPERATION L4_OPERATIONS


L4_EXPRESSION ->
	L3_EXPRESSION L4_OPERATIONS

L4_OPERATIONS ->
	L4_OPERATION L4_OPERATIONS
	| eps

L4_OPERATION ->
	== L3_EXPRESSION
	| != L3_EXPRESSION
	| > L3_EXPRESSION
	| < L3_EXPRESSION
	| >= L3_EXPRESSION
	| <= L3_EXPRESSION
	| << L3_EXPRESSION
	| >> L3_EXPRESSION
	| ?
	| ! 

L3_EXPRESSION ->
	L2_EXPRESSION L3_OPERATIONS

L3_OPERATIONS ->
	L3_OPERATION L3_OPERATIONS
	| eps

L3_OPERATION ->
	+ L2_EXPRESSION
	| - L2_EXPRESSION
	| += L2_EXPRESSION
	| -= L2_EXPRESSION

L2_EXPRESSION ->
	L1_EXPRESSION L2_OPERATIONS

L2_OPERATIONS ->
	L2_OPERATION L2_OPERATIONS
	| eps

L2_OPERATION ->
	* L1_EXPRESSION
	| / L1_EXPRESSION
	| *= L1_EXPRESSION
	| /= L1_EXPRESSION

L1_EXPRESSION ->
	L0_EXPRESSION L1_OPERATIONS

L1_OPERATIONS ->
	L1_OPERATION L1_OPERATIONS
	| eps

L1_OPERATION ->
	identifier MESAGE_PARAMETER_OPTION
	| private MESAGE_PARAMETER_OPTION
	| reference MESAGE_PARAMETER_OPTION
	| @ L0_EXPRESSION

MESAGE_PARAMETER_OPTION ->
	: L0_EXPRESSION
	| eps

L0_EXPRESSION ->
	OBJECT L0_OPERATIONS

L0_OPERATIONS ->
	L0_OPERATION
	| eps

L0_OPERATION ->
	:: L0_EXPRESSION

EXTERNAL_EXPRESSION ->
	reference EXTERNAL_BODY 

EMBEDDED_EXPRESSION ->
	reference EXTERNAL_BODY

EXTERNAL_BODY  ->
	( EXPRESSION MEMBERS
	| OPEN_BRACKET_EXPECTED

EXTENSION_EXPRESSION ->
	( EXTEND CLOSING_BRACKET EXTENSION
	| OPEN_BRACKET_EXPECTED

EXTENSION ->
	{ INLINE_METHODS CLOSING_BRACE

BLOCK_END ->
	]
	| CLOSE_SBRACKET_EXPECTED

INLINE_METHODS ->
	METHOD INLINE_METHODS
	| eps	

SHORTCUT ->
	identifier SHORTCUT_BODY
	| wildcard WILDSHORTCUT_BODY

SHORTCUTS ->
	#define HINT_OPTION SHORTCUT SHORTCUTS
	| #задать HINT_OPTION SHORTCUT SHORTCUTS 
	| eps

SHORTCUT_BODY ->
	= SHORTCUT_REFERENCE TERMINAL_DOT

WILDSHORTCUT_BODY ->
	= WILDSHORTCUT_REFERENCE TERMINAL_DOT

SHORTCUT_REFERENCE ->
	reference

WILDSHORTCUT_REFERENCE ->
	wildcard

HINT_OPTION ->
	[ HINT HINTS CLOSING_SBRACKET
	| eps

HINT ->
	identifier HINT_VALUE_OPTION

HINT_VALUE_OPTION ->
	: HINT_VALUE
	| eps

HINT_VALUE ->
	identifier
	| reference

HINTS ->
	, HINT HINTS
	| eps

ALTERNATIVE ->
	||

CLOSING_BRACE ->
	}
	| CLOSE_BRACE_EXPECTED

CLOSING_BRACKET ->
	) 
	| CLOSE_BRACKET_EXPECTED

CLOSING_BRACKET2 ->
	) 
	| CLOSE_BRACKET_EXPECTED2

TERMINAL_DOT ->
	.
	| FIELD_DOT_EXPECTED

RET_STATEMENT_END ->
	.
	| DOT_EXPECTED

CLOSING_SBRACKET ->
	]
	| CLOSE_SBRACKET_EXPECTED2

BLOCK_END2 ->
	BLOCK_END
	| CLOSE_SBRACKET_EXPECTED3

// --- ERRORS ---

VARIABLE_NAME_EXPECTED ->
	reference ERROR
	| integer ERROR
	| real ERROR
	| hex ERROR
	| ] ERROR
	| #shift ERROR
	| #смена ERROR 
	| #var ERROR
	| #пер ERROR 
	| #loop ERROR
	| #цикл ERROR 
	| #if ERROR
	| #если ERROR 
	| wildcard ERROR

CLOSE_BRACE_EXPECTED ->
	. ERROR
	| eof ERROR
	| #symbol ERROR
	| #static ERROR
	| #define ERROR
	| #class ERROR
	| #символ ERROR
	| #статичный ERROR
	| #задать ERROR
	| #класс ERROR

CLOSE_BRACKET_EXPECTED ->
	. ERROR
	| [ ERROR
	| eof ERROR

CLOSE_BRACKET_EXPECTED2 ->
	{ ERROR

FIELD_DOT_EXPECTED ->
	#field ERROR
	| #поле ERROR
	| #method ERROR
	| #метод ERROR
	| #role ERROR
	| #роль ERROR 
	| #class ERROR
	| #класс ERROR
	| #symbol ERROR
	| #символ ERROR
	| #static ERROR
	| #статичный ERROR 
	| #define ERROR	
	| #задать ERROR	
	| } ERROR
	| eof ERROR

DOT_EXPECTED ->
	] ERROR
	| #if ERROR
	| #если ERROR
	| #loop ERROR
	| #цикл ERROR
	| #var ERROR
	| #пер ERROR
	| #shift ERROR
	| #смена ERROR
	| eof ERROR
	| } ERROR

VARIABLE_NAME_EXPECTED2 ->
	reference ERROR
	| integer ERROR
	| real ERROR
	| hex ERROR
	| ] ERROR
	| #shift ERROR
	| #смена ERROR
	| #var ERROR
	| #пер ERROR
	| #loop ERROR
	| #цикл ERROR
	| #if ERROR
	| #если ERROR
	| wildcard ERROR

METHOD_NAME_EXPECTED ->
	| integer ERROR
	| real ERROR
	| hex ERROR
	| ] ERROR
	| #shift ERROR
	| #смена ERROR
	| #var ERROR
	| #пер ERROR
	| #loop ERROR
	| #цикл ERROR
	| #if ERROR
	| #если ERROR
	| wildcard ERROR

CLOSE_SBRACKET_EXPECTED ->
	. ERROR
	| [ ERROR
	| eof ERROR
	| #field ERROR
	| #поле ERROR
	| #method ERROR
	| #метод ERROR
	| #role ERROR
	| #роль ERROR
	| #symbol ERROR
	| #символ ERROR
	| #static ERROR
	| #статичный ERROR
	| #define ERROR
	| #задать ERROR
	| } ERROR

CLOSE_SBRACKET_EXPECTED3 ->
	#var ERROR
	| #пер ERROR
	| #loop ERROR
	| #цикл ERROR
	| #if ERROR
	| #если ERROR
	| #shift ERROR
	| #смена ERROR
	| identifier ERROR
	| reference ERROR
	| private ERROR
	| literal ERROR
	| integer ERROR
	| hex ERROR
	| real ERROR

OPEN_ACTION_BRACKET_EXPECTED ->
	identifier ERROR
	| reference ERROR
	| private ERROR
	| literal ERROR
	| integer ERROR
	| hex ERROR
	| real ERROR
	| { ERROR	
	| , ERROR
	| . ERROR
	| ) ERROR

CLOSE_SBRACKET_EXPECTED2 ->
	. ERROR
	| [ ERROR
	| eof ERROR

OPEN_BRACKET_EXPECTED ->
	identifier ERROR
	| reference ERROR
	| private ERROR
	| literal ERROR
	| integer ERROR
	| hex ERROR
	| real ERROR
	| { ERROR	
	| , ERROR
	| . ERROR
	| ) ERROR

EQUAL_EXPECTED ->
	{ ERROR

EXTENSION_NOTEXPECTED ->
	#annex ERROR
	| #дополнение ERROR 
