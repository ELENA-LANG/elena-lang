__define eof                 8195;
__define identifier         12292;
__define integer            12293;
__define string             12294;
__define hexinteger         12295;
__define reference          12296;
__defineterminal "}"        12297;
__define character          12298;
__define global		    12299;
__define wide               12300;
__define constant           12301;
__define long               12302;
__define real               12303;
__define interpolate        12304;

__define DECLARATION         5120;
__define BLOCK               7184;
__define NO_BODY             7185;
__define TEMPLATE_BLOCK      4104;
__define PARAMETER           4106;
__define END_OF_BLOCK        4107;
__define DICTIONARY          4128;
__define META_STATEMENT      4129;
__define INCLUDE_STATEMENT   4130;
__define IMPORT_STATEMENT    4131;
__define COND_STATEMENT      4132;
__define SHARED_DICTIONARY   4133;
__define ENDCOND_STATEMENT   4134;
__define ELSE_COND_STATEMENT 4135;
__define FOR_STATEMENT       4136;
__define ENDFOR_STATEMENT    4137;
__define OBJECT              4145;
__define TEMPLATE_TYPE       4146;
__define ARRAY_TYPE          4147;
__define NULLABLE_TYPE       4154;
__define NESTED              4224;
__define CLOSURE             4225;
__define MESSAGE             4288;
__define SUB_VARIABLE        4311;
__define RET_EXPRESSION      7220;
__define GET_EXPRESSION      7222;
__define INIT_EXPRESSION     7223;
__define ACCUM_EXPRESSION    7225;
__define NESTED_EXPRESSION   6197;
__define ASYNC_OPERATION        6203;
__define INDEXER_OPERATION      6209;
__define ASSIGN_OPERATION       6210;
__define ADDITION_ASSIGNMENT    6211;
__define ADD_OPERATION          6212;
__define SUB_OPERATION          6213;
__define LEN_OPERATION          6214;
__define IF_OPERATION           6215;
__define LESS_OPERATION         6216;
__define NAME_OPERATION         6217;
__define EQUAL_OPERATION        6218;
__define NOT_OPERATION          6219;
__define NOTEQUAL_OPERATION     6220;
__define LOOP_OPERATION         6221;
__define ELSE_OPERATION         6222;
__define IF_ELSE_OPERATION      6223;
__define MUL_OPERATION          6224;
__define DIV_OPERATION          6225;
__define NOTLESS_OPERATION      6226;
__define GREATER_OPERATION      6227;
__define NOTGREATER_OPERATION   6228;
__define EXTERN_OPERATION       6229;
__define NEGATE_OPERATION       6230;
__define VALUE_OPERATION        6231;
__define BAND_OPERATION         6232;
__define BOR_OPERATION          6233;
__define BXOR_OPERATION         6234;
__define BNOT_OPERATION         6235;
__define SHL_OPERATION          6236;
__define SHR_OPERATION          6237;
__define SUB_ASSIGNMENT         6238;
__define MUL_ASSIGNMENT         6239;
__define DIV_ASSIGNMENT         6240;
__define AND_OPERATION          6241;
__define OR_OPERATION           6242;
__define XOR_OPERATION          6243;
__define BREAK_OPERATION        6244;
__define LAZY_OPERATION         6245;
__define TUPLE_ASSIGNING        6246;
__define CONTINUE_OPERATION     6247;
__define YIELD_OPERATION        6248;
__define EXPRVAL_OPERATION      6249;
__define REFER_OPERATION        6251;
__define INC_OPERATION          6252;
__define DEC_OPERATION          6253;
__define SIZE_OPERATION         6254;
__define TEMPLATE_EXPR_BLOCK    6304;

__define MESSAGE_OPERATION      6337;
__define PROPERTY_OPERATION     6340;
__define EXPRESSION             6288;
__define L5_EXPRESSION          6289;
__define SINGLE_EXPRESSION      6290;
__define L8_EXPRESSION          6291;
__define ROOT_EXPRESSION        6292;
__define L6_EXPRESSION          6293;
__define T_EXPRESSION           6294;
__define L4_EXPRESSION          6295;
__define NT_EXPRESSION          6296;
__define L7_EXPRESSION          6297;
__define L3_SINGLE_EXPRESSION   6298;
__define NESTED_ROOT_EXPRESSION 6299;
__define OPERATION_TEMPLATE     6300;
__define LESS_SUB_EXPRESSION 	6301;
__define INTERPOL_EXPRESSION    6302;
__define L3_EXPRESSION          6303;
__define KEY_VALUE_EXPRESSION   6305;
__define CLOSURE_OPERATION      6306;
__define INTERPOLATE_EXPR       6307;
__define LT_EXPRESSION          6308;
__define SWITCH_OPTION 	        6353;
__define SWITCH_LAST_OPTION     6354;
__define SWITCH_CODE 	        6355;
__define COLLECTION_EXPRESSION  6356;
__define TUPLE_COLLECTION 	6357;
__define POSTFIX                4201;
__define TEMPLATE_POSTFIX       4202;

__define PARAMETERIZED_POSTFIX  4207;
__define TEMPLATE_ARG           4208;
__define DIMENSION              5233;
__define RESEND                 7366;
__define CATCH_OPERATION        7367;
__define CATCH                  7368;
__define FINAL_OPERATION        7386;
__define NIL_MESSAGE_OPERATION  6363;
__define ALT_MESSAGE_OPERATION  6364;
__define REDIRECT               7371;
__define ALT_OPERATION          7372;
__define ISNIL_OPERATION        7373;
__define SWITCH_OPERATION       7376;
__define COMPLEX_NAME 	        4302;
__define INLINE                 4303;
__define SUB_DECLARATION        4312;
__define FINALLY                7385;
__define PARAMETER_BLOCK        4336;
__define TUPLE_TYPE 		4341;
__define CLOSURE_RET_TYPE       4342;

__define BLOCK_CLOSING_EXPECTED         16386;

START ::= 
        { DECLARATION | META_DECLARATION }+ eof 
	| eof;
	eof;

META_DECLARATION ::=
	"#new" DICTIONARY DECLARATION_END
	| "#share" SHARED_DICTIONARY DECLARATION_END
	| "#let" META_STATEMENT DECLARATION_END
	| "#include" INCLUDE_STATEMENT DECLARATION_END
	| "#import" IMPORT_STATEMENT DECLARATION_END
        | "#if" COND_STATEMENT
        | "#elif" ELSE_COND_STATEMENT
	| ENDCOND_STATEMENT
        | "#for" FOR_STATEMENT
        | ENDFOR_STATEMENT;

META_STATEMENT ::=
	EXPRESSION;

DECLARATION ::=
	{ identifier | reference }+ IR_DECLARATION
	| "(" TUPLE_TYPE ")" identifier+ { POSTFIXES NESTED_SCOPE | SCOPE };

SUB_DECLARATION ::=
	{ identifier | reference }+ { TEMPLATE_BRACKETS identifier? | { DYNAMIC_DIMENSION ^ARRAY_TYPE }+ identifier | eps };

IR_R ::=
	POSTFIXES NESTED_SCOPE 
	| SCOPE;

IR_DECLARATION ::=
	TEMPLATE_BRACKETS {
		identifier IR_R
		| DYNAMIC_DIMENSION ^TEMPLATE_TYPE ^ARRAY_TYPE { DYNAMIC_DIMENSION ^ARRAY_TYPE }* identifier IR_R
		| "?" ^TEMPLATE_TYPE ^NULLABLE_TYPE identifier IR_R
		| "(" { PARAMETER { "," PARAMETER }* }? ")" POSTFIXES? {
			"::" "{" { DECLARATION | META_DECLARATION }* END_OF_BLOCK
			| METHOD_BODY
		}
		| POSTFIXES NESTED_SCOPE
		| NESTED_SCOPE
	}
	| { DYNAMIC_DIMENSION ^ARRAY_TYPE }+ identifier IR_R
	| "::" {
		COMPLEX_NAME { "::" COMPLEX_NAME }* TEMPLATE_BRACKETS? METHOD_SCOPE
	}
	| "?" =NULLABLE_TYPE identifier { POSTFIXES NESTED_SCOPE | SCOPE }
	| SCOPE
	| POSTFIXES NESTED_SCOPE;

SCOPE ::=
	"{" { DECLARATION | META_DECLARATION }* END_OF_BLOCK
	| ROOT_METHOD_SCOPE
	| "+=" ACCUM_EXPRESSION DECLARATION_END
	| ":=" INIT_EXPRESSION DECLARATION_END
	| "=" GET_EXPRESSION DECLARATION_END
	| "[" DIMENSION "]" DECLARATION_END
	| DECLARATION_END;

NESTED_SCOPE ::=
	"{" { DECLARATION | META_DECLARATION }* END_OF_BLOCK
	| "=" GET_EXPRESSION DECLARATION_END
	| "[" DIMENSION "]" DECLARATION_END
	| DECLARATION_END;

METHOD_SCOPE_MEMBER ::=
	PARAMETER NEXT_METHOD_SCOPE_MEMBER
	| "#for" FOR_STATEMENT METHOD_SCOPE_MEMBER;

NEXT_METHOD_SCOPE_MEMBER ::=
	"," METHOD_SCOPE_MEMBER
	| ENDFOR_STATEMENT
	| eps;

METHOD_SCOPE ::=
	"(" { METHOD_SCOPE_MEMBER }? ")" POSTFIXES? METHOD_BODY;

ROOT_METHOD_SCOPE ::=
	"(" { METHOD_SCOPE_MEMBER }? ")" POSTFIXES? {
		METHOD_BODY
		| "::" "{" { DECLARATION | META_DECLARATION }* END_OF_BLOCK
	};

METHOD_BODY ::=
	"{" BLOCK
	| "=>" REDIRECT DECLARATION_END
	| "<=" RESEND { DECLARATION_END | "{" BLOCK }
	| "=" RET_EXPRESSION DECLARATION_END
	| NO_BODY;

NO_BODY ::=
	";";

REDIRECT ::= 
	EXPRESSION;

RESEND ::=
	identifier+ RESEND_R;

BLOCK ::=
	STATEMENT NEXT_STATEMENT
	| "^" RET_EXPRESSION LAST_STATEMENT
        | "#if" COND_STATEMENT STATEMENT NEXT_STATEMENT	
	| END_OF_BLOCK
        | "#for" FOR_STATEMENT STATEMENT NEXT_STATEMENT;

COND_STATEMENT ::=
	"(" EXPRESSION ")";

FOR_STATEMENT ::=
	"(" EXPRESSION ")";

ELSE_COND_STATEMENT ::=
	"(" EXPRESSION ")";

ENDCOND_STATEMENT ::=
	"#endif";

ENDFOR_STATEMENT ::=
	"#endfor";

STATEMENT ::=
	ROOT_EXPRESSION
	| "#let" META_STATEMENT
	| "#include" INCLUDE_STATEMENT
	| "#import" IMPORT_STATEMENT
	| "#share" SHARED_DICTIONARY;

NEXT_STATEMENT ::=
	DECLARATION_END {
		STATEMENT NEXT_STATEMENT 
        	| "#if" COND_STATEMENT STATEMENT NEXT_STATEMENT
        	| "#elif" ELSE_COND_STATEMENT STATEMENT NEXT_STATEMENT
		| { ENDCOND_STATEMENT | ENDFOR_STATEMENT } { STATEMENT NEXT_STATEMENT | "^" RET_EXPRESSION LAST_STATEMENT | END_OF_BLOCK }
		| END_OF_BLOCK 
		| "^" RET_EXPRESSION LAST_STATEMENT
	}
	| END_OF_BLOCK;

LAST_STATEMENT ::=
	DECLARATION_END END_OF_BLOCK
	| END_OF_BLOCK;

IMPORT_STATEMENT ::=
	{ identifier | reference }+ ^ OBJECT "=" EXPRESSION;

INCLUDE_STATEMENT ::=
	{ identifier | reference }+ ^ OBJECT;

ACCUM_EXPRESSION ::=
	EXPRESSION;

INIT_EXPRESSION ::=
	EXPRESSION;

GET_EXPRESSION ::=
	EXPRESSION;

RET_EXPRESSION ::=
	EXPRESSION;

T_EXPRESSION ::=
	"{" BLOCK;

T_EXPRESSION_F ::=
	identifier { NT_EXPRESSION T_EXPRESSION_F | LT_EXPRESSION }
	| eps;

NT_EXPRESSION ::=
	"{" BLOCK
	| "::" "{" NESTED_EXPRESSION ^NESTED
	| BRACKET SUB_EXPRESSION;

LT_EXPRESSION ::=
	NESTED_ROOT_EXPRESSION ^ BLOCK;

NESTED_EXPRESSION ::=
	{ DECLARATION | META_DECLARATION }+ END_OF_BLOCK
	| END_OF_BLOCK;

SINGLE_EXPRESSION ::=
	{ identifier | reference | global }+ ^OBJECT
	| { string | integer | hexinteger | long | real | constant | character | wide } ^OBJECT
	| BRACKET SUB_EXPRESSION;

L3_SINGLE_EXPRESSION ::=
	BRACKET { 
		identifier+ {
			LAMBDA_R
			| LESS TEMPLATE_ARG { "," TEMPLATE_ARG }* ">" identifier { 
				"=>" ^ PARAMETER RET_EXPRESSION ^CLOSURE ")" ^EXPRESSION
				| ")" "{" ^ PARAMETER BLOCK ^CLOSURE ^EXPRESSION 
			}
			| ")" {
				"{" ^ PARAMETER BLOCK ^CLOSURE ^EXPRESSION
			}
		}
		| CLOSURE_RET_TYPE identifier+ LAMBDA_RX
	};

TYPE_EXPR ::=
	identifier {
		LESS ^OBJECT TEMPLATE_ARG { "," TEMPLATE_ARG }* ">" ^TEMPLATE_TYPE TEMPLATE_R
	}
	| "{" NESTED_EXPRESSION ^NESTED;

NESTED_ROOT_EXPRESSION ::=
	identifier {
		identifier+ {
			I_R
			| RI_OP
			| VI_OP
			| eps ^OBJECT
		}
		| I_OP
		| RI5_OP
		| RI_OP
		| VI_OP
		| { ":" identifier }+ "(" ^OBJECT MESSAGE_PARAMETER ")" {
			T_EXPRESSION T_EXPRESSION_F ^ TEMPLATE_BLOCK
			| LT_EXPRESSION ^ TEMPLATE_BLOCK
		}
		| eps ^OBJECT
	}
	| { reference | global } {
		R_OP
		| eps ^OBJECT
	}
	| { string | wide } ^OBJECT { SBRACKET INDEXER_R }? L3_F
	| { integer | hexinteger | long | real | constant | character } ^OBJECT L3_F
	| ":" identifier EXPRESSION? ^OPERATION_TEMPLATE
	| "$break" ^BREAK_OPERATION
	| "$continue" ^CONTINUE_OPERATION
	| "$yield" EXPRESSION ^YIELD_OPERATION
	| "$await" EXPRESSION ^ASYNC_OPERATION
	| "$lazy" EXPRESSION ^LAZY_OPERATION;

ROOT_EXPRESSION ::=
	identifier {
		identifier+ {
			I_R
			| RI_OP
			| VI_OP
			| eps ^OBJECT
		}
		| I_OP
		| RI5_OP
		| RI_OP
		| VI_OP
		| T_EXPRESSION T_EXPRESSION_F ^ TEMPLATE_BLOCK
		| { ":" identifier }+ "(" ^OBJECT MESSAGE_PARAMETER ")" {
			T_EXPRESSION T_EXPRESSION_F ^ TEMPLATE_BLOCK
			| LT_EXPRESSION ^ TEMPLATE_BLOCK
		}
		| "=>" ^OBJECT { SWITCH_OPTION+ SWITCH_LAST_OPTION? } ^SWITCH_OPERATION
		| eps ^OBJECT
	}
	| { reference | global } {
		identifier {
			I_R
			| RI_OP
			| VI_OP
			| eps ^OBJECT
		}
		| R_OP
		| eps ^OBJECT
	}
	| { string | wide } ^OBJECT { SBRACKET INDEXER_R }? L3_F
	| { integer | hexinteger | long | real | constant | character } ^OBJECT L3_F
	| BRACKET SUB_EXPRESSION {
		ASSIGN EXPRESSION ^TUPLE_ASSIGNING
		| "=>" { SWITCH_OPTION+ SWITCH_LAST_OPTION? } ^SWITCH_OPERATION
		| BRACKET FUNCTION_R L3_F
		| L3_F
		| L8_F
	}
	| ":" identifier EXPRESSION? ^OPERATION_TEMPLATE
	| "::" TYPE_EXPR
	| "$value" SINGLE_EXPRESSION ^EXPRVAL_OPERATION ASSIGN ASSIGN_R
	| "$rep" EXPRESSION ^LOOP_OPERATION
	| "$ext" EXPRESSION ^EXTERN_OPERATION
	| "$break" ^BREAK_OPERATION
	| "$continue" ^CONTINUE_OPERATION
	| "$yield" EXPRESSION ^YIELD_OPERATION
	| "$await" EXPRESSION ^ASYNC_OPERATION
	| "$lazy" EXPRESSION ^LAZY_OPERATION;

SUB_EXPRESSION ::=
	identifier {
		identifier+ {			
			I_R SUB_R
			| LAMBDA_R
			| EI_OP SUB_R
			| I5_OP_MINUS_LESS SUB_R
			| "{" NESTED_EXPRESSION ^NESTED ")"
			| ")" {
				"{" ^ PARAMETER BLOCK ^CLOSURE ^EXPRESSION
				| eps ^OBJECT
			}
		}
		| I_OP SUB_R
		| I5_OP ")"
		| EI_OP ")"
		| LAMBDA_R
		| "{" NESTED_EXPRESSION ^NESTED ")"
		| ")" {
			"{" ^ PARAMETER BLOCK ^CLOSURE ^EXPRESSION
			| eps ^OBJECT
		}
	}
	| { reference | global } {
		R_OP SUB_R
		| ")" ^OBJECT
	}
	| { string | wide } ^OBJECT { SBRACKET INDEXER_R }? { INLINE_F | L3_F } SUB_R
	| { integer | hexinteger | long | real | constant | character } ^OBJECT { INLINE_F | L3_F } SUB_R
	| interpolate { INTERPOL_EXPRESSION interpolate }+ ^INTERPOLATE_EXPR ")"
	| CLOSURE_RET_TYPE identifier+ LAMBDA_RX
	| BRACKET SUB_EXPRESSION SUB_F ")"
	| "::" TYPE_EXPR ")"
	| ":" identifier L3_EXPRESSION? ^OPERATION_TEMPLATE ")"
	| "*" SINGLE_EXPRESSION ^VALUE_OPERATION ")"
	| "~" SINGLE_EXPRESSION ^BNOT_OPERATION ")"
	| "-" SINGLE_EXPRESSION ^NEGATE_OPERATION ")"
	| "!" EXPRESSION ^NOT_OPERATION ")"
	| NAMED_OPERATORS ")"
	| "$yield" EXPRESSION ^YIELD_OPERATION ")"
	| "$await" EXPRESSION ^ASYNC_OPERATION ")"
	| "$lazy" EXPRESSION ^LAZY_OPERATION ")"
	| ")" "{" BLOCK ^CLOSURE;

LESS_SUB_EXPRESSION ::=
	SUB_EXPRESSION;

INTERPOL_EXPRESSION ::=
	identifier {
		identifier+ ^OBJECT
		| eps ^OBJECT
	}
	| { reference | global } ^OBJECT
	| { string | integer | hexinteger | long | real | constant | character | wide } ^OBJECT
	| NAMED_OPERATORS;

EXPRESSION ::=
	identifier {
		identifier+ {
			I_R
			| VI_OP
			| EI_OP
			| I5_OP_MINUS_LESS
			| "{" NESTED_EXPRESSION ^NESTED
			| eps ^OBJECT
		}
		| { reference | global } {
			R_OP
			| eps ^OBJECT
		}
		| EI_OP
		| I_OP
		| I5_OP
		| I8_OP
		| VI_NO_IF_OP
		| "{" NESTED_EXPRESSION ^NESTED L3_F
		| "=" ^OBJECT SINGLE_EXPRESSION ^KEY_VALUE_EXPRESSION
		| eps ^OBJECT
	}
	| { reference | global } {
		R_OP
		| eps ^OBJECT
	}
	| { string | wide } ^OBJECT { SBRACKET INDEXER_R }? { INLINE_F | L3_F }
	| { integer | hexinteger | long | real | constant | character } ^OBJECT { INLINE_F | L3_F }
	| interpolate { INTERPOL_EXPRESSION interpolate }+ ^INTERPOLATE_EXPR
	| BRACKET SUB_EXPRESSION SUB_F
	| "{" BLOCK ^CLOSURE
	| "::" TYPE_EXPR
	| ":" identifier L3_EXPRESSION? ^OPERATION_TEMPLATE
	| "*" SINGLE_EXPRESSION ^VALUE_OPERATION L4_F
	| "~" SINGLE_EXPRESSION ^BNOT_OPERATION
	| "!" EXPRESSION ^NOT_OPERATION
	| "-" SINGLE_EXPRESSION ^NEGATE_OPERATION
	| "&" SINGLE_EXPRESSION ^CLOSURE_OPERATION
	| NAMED_OPERATORS L4_F
	| "$yield" EXPRESSION ^YIELD_OPERATION
	| "$await" EXPRESSION ^ASYNC_OPERATION
	| "$lazy" EXPRESSION ^LAZY_OPERATION;

SUB_F ::=
	BRACKET FUNCTION_R
	| L3_F
	| L8_F
	| INLINE_F;

SUB_R ::=
	"," ^EXPRESSION EXPRESSION { "," EXPRESSION }* ^TUPLE_COLLECTION ")"
	| ")";

LAMBDA_R ::=
	"=>" ^ PARAMETER RET_EXPRESSION ^CLOSURE ")" ^EXPRESSION
	| "," ^OBJECT ^EXPRESSION EXPRESSION { "," EXPRESSION }* {
		"=>" ^ PARAMETER_BLOCK RET_EXPRESSION ^CLOSURE ")" ^EXPRESSION
		| ")" {
			"{" ^ PARAMETER_BLOCK BLOCK ^CLOSURE ^EXPRESSION 
			| eps ^TUPLE_COLLECTION
		}
	};

LAMBDA_RX ::=
	"=>" ^= PARAMETER RET_EXPRESSION ^CLOSURE ")" ^EXPRESSION
	| "," ^=OBJECT ^=EXPRESSION EXPRESSION { "," EXPRESSION }* {
		"=>" ^= PARAMETER_BLOCK RET_EXPRESSION ^CLOSURE ")" ^EXPRESSION
		| ")" "{" ^= PARAMETER_BLOCK BLOCK ^CLOSURE ^EXPRESSION 
	};

XI_R ::=
	X_R;

X_R ::=
        SBRACKET ^^OBJECT =OBJECT INDEXER_RX LX3_F6 ^LESS_OPERATION
	| DOT    ^^OBJECT =OBJECT MESSAGE LX3_R6 ^LESS_OPERATION
	| STAR   ^^OBJECT =OBJECT L4_EXPRESSION ^=MUL_OPERATION ^LESS_OPERATION
	| DIV    ^^OBJECT =OBJECT  L4_EXPRESSION ^=DIV_OPERATION ^LESS_OPERATION
	| MINUS  ^^OBJECT =OBJECT L5_EXPRESSION ^=SUB_OPERATION ^LESS_OPERATION
	| PLUS   ^^OBJECT =OBJECT L5_EXPRESSION ^=ADD_OPERATION ^LESS_OPERATION
	| AND  =OBJECT =EXPRESSION ^^OBJECT ^LESS_OPERATION L7_EXPRESSION ^AND_OPERATION L7_F
	| OR   =OBJECT =EXPRESSION ^^OBJECT ^LESS_OPERATION L7_EXPRESSION ^OR_OPERATION L7_F
	| XOR  =OBJECT =EXPRESSION ^^OBJECT ^LESS_OPERATION L7_EXPRESSION ^XOR_OPERATION L7_F
	| eps   ^^OBJECT =OBJECT =EXPRESSION ^LESS_OPERATION;

SUB_X_R ::=
	DOT     MESSAGE LX3_R6 ^LESS_OPERATION
	| STAR  L4_EXPRESSION ^=MUL_OPERATION ^LESS_OPERATION
	| DIV   L4_EXPRESSION ^=DIV_OPERATION ^LESS_OPERATION
	| MINUS L5_EXPRESSION ^=SUB_OPERATION ^LESS_OPERATION
	| PLUS  L5_EXPRESSION ^=ADD_OPERATION ^LESS_OPERATION
	| AND   ^LESS_OPERATION L7_EXPRESSION ^AND_OPERATION
	| OR    ^LESS_OPERATION L7_EXPRESSION ^OR_OPERATION
	| XOR   ^LESS_OPERATION L7_EXPRESSION ^XOR_OPERATION
	| eps   ^LESS_OPERATION;

LX3_F6 ::=
	DOT MESSAGE LX3_R6
	| LX5_F6;

LX5_F6 ::=
	MINUS L5_EXPRESSION ^=SUB_OPERATION LX5_F6
	| PLUS  L5_EXPRESSION ^=ADD_OPERATION LX5_F6
	| eps;

LX3_R6 ::=
	BRACKET MESSAGE_XR LX3_F6
	| MINUS ^= PROPERTY_OPERATION L5_EXPRESSION ^=SUB_OPERATION LX5_F6
	| PLUS  ^= PROPERTY_OPERATION L5_EXPRESSION ^=ADD_OPERATION LX5_F6	
	| eps ^= PROPERTY_OPERATION;

// ; extening I_OP
VI_NO_IF_OP ::=
	{ DYNAMIC_DIMENSION ^ARRAY_TYPE }+ {
		identifier ^OBJECT ASSIGN ASSIGN_R
		| BRACKET ^OBJECT FUNCTION_R L3_F
		| "{" ^OBJECT COLLECTION? "}" ^ COLLECTION_EXPRESSION L3_F
	};

VI_OP ::=
	VI_NO_IF_OP
	| "?" ^NULLABLE_TYPE identifier ^OBJECT { ASSIGN ASSIGN_R }?;

// ; extening I_OP
EI_OP ::=
	BRACKET ^OBJECT FUNCTION_R L2_F;

RI5_OP ::=
	LESS ^OBJECT TEMPLATE_ARG { "," TEMPLATE_ARG }* ">" ^TEMPLATE_TYPE TEMPLATE_R;

I5_OP_MINUS_LESS ::=
	EQUAL ^OBJECT    L6_EXPRESSION ^EQUAL_OPERATION L7_F
	| NOTEQUAL ^OBJECT L6_EXPRESSION ^NOTEQUAL_OPERATION L7_F
	| GREATER ^OBJECT  L6_EXPRESSION ^GREATER_OPERATION L7_F
	| NOTGREATER ^OBJECT  L6_EXPRESSION ^NOTGREATER_OPERATION L7_F
	| NOTLESS ^OBJECT  L6_EXPRESSION ^NOTLESS_OPERATION L7_F;

I5_OP ::=
	LESS {
		identifier {
			XI_R
			| ">"  ^^OBJECT =TEMPLATE_ARG ^TEMPLATE_TYPE TEMPLATE_R
			| LESS ^^OBJECT TEMPLATE_ARG { "," TEMPLATE_ARG }* ">" ^=TEMPLATE_TYPE ^=TEMPLATE_ARG { "," TEMPLATE_ARG }* ">" ^TEMPLATE_TYPE TEMPLATE_R
		}
		| {integer | hexinteger | long | real | constant | character | string | wide} X_R
		| "," ^OBJECT TEMPLATE_ARG { "," TEMPLATE_ARG }+ ">" ^TEMPLATE_TYPE TEMPLATE_R
		| "(" =OBJECT LESS_SUB_EXPRESSION SUB_X_R
		| "*" =OBJECT SINGLE_EXPRESSION ^=VALUE_OPERATION ^LESS_OPERATION
	}
	| I5_OP_MINUS_LESS;

I8_OP ::=	
	IF ^OBJECT SINGLE_EXPRESSION ":" SINGLE_EXPRESSION ^IF_ELSE_OPERATION;

I_OP ::=
	SBRACKET ^OBJECT INDEXER_R { INLINE_F | L0_F }
	| "::" ^OBJECT EXT_R L3_F
	| INC ^OBJECT ^INC_OPERATION
	| DEC ^OBJECT ^DEC_OPERATION
	| ASSIGN ^OBJECT EXPRESSION ^ASSIGN_OPERATION
	| APPEND ^OBJECT EXPRESSION ^ADDITION_ASSIGNMENT
	| REDUCE ^OBJECT EXPRESSION ^SUB_ASSIGNMENT
	| AMUL ^OBJECT EXPRESSION ^MUL_ASSIGNMENT
	| ADIV ^OBJECT EXPRESSION ^DIV_ASSIGNMENT
	| DOT ^OBJECT MESSAGE L3_R
	| IF_DOT ^OBJECT MESSAGE? CALL_R ^NIL_MESSAGE_OPERATION L3_F
	| ALT_DOT ^OBJECT MESSAGE? CALL_R ^ALT_MESSAGE_OPERATION L3_F
	| SHL ^OBJECT  L4_EXPRESSION ^SHL_OPERATION L4_F
	| SHR ^OBJECT  L4_EXPRESSION ^SHR_OPERATION L4_F
	| STAR ^OBJECT L4_EXPRESSION ^MUL_OPERATION L4_F
	| DIV ^OBJECT  L4_EXPRESSION ^DIV_OPERATION L4_F
	| BAND ^OBJECT L4_EXPRESSION ^BAND_OPERATION L4_F
	| BOR ^OBJECT  L4_EXPRESSION ^BOR_OPERATION L4_F
	| BXOR ^OBJECT L4_EXPRESSION ^BXOR_OPERATION L4_F
	| MINUS ^OBJECT L5_EXPRESSION ^SUB_OPERATION L5_F
	| PLUS ^OBJECT  L5_EXPRESSION ^ADD_OPERATION L5_F
	| AND ^OBJECT L7_EXPRESSION ^AND_OPERATION L7_F
	| OR ^OBJECT  L7_EXPRESSION ^OR_OPERATION L7_F
	| XOR ^OBJECT L7_EXPRESSION ^XOR_OPERATION L7_F
	| ALT ^OBJECT ALT_R
	| TRY ^OBJECT TRY_R
	| FNL ^OBJECT FNL_R
	| ISNIL ^OBJECT EXPRESSION ^ISNIL_OPERATION;

TEMPLATE_R ::=
	"{" NESTED_EXPRESSION ^NESTED
	| { DYNAMIC_DIMENSION ^ARRAY_TYPE }+ ^OBJECT BRACKET FUNCTION_R L3_F
	| identifier ^OBJECT { ASSIGN ASSIGN_R }? 
	| BRACKET ^OBJECT FUNCTION_R
	| SBRACKET ^OBJECT INDEXER_R 
	| DOT ^OBJECT MESSAGE L3_R
	| eps ^OBJECT;

R_OP ::=
	DOT ^OBJECT MESSAGE L3_R
	| BRACKET ^OBJECT FUNCTION_R L2_F;

RF_OP ::=
	DOT ^MESSAGE_OPERATION MESSAGE L3_R
	| SHL ^MESSAGE_OPERATION  L4_EXPRESSION ^SHL_OPERATION
	| SHR ^MESSAGE_OPERATION  L4_EXPRESSION ^SHR_OPERATION
	| STAR ^MESSAGE_OPERATION L4_EXPRESSION ^MUL_OPERATION
	| DIV ^MESSAGE_OPERATION  L4_EXPRESSION ^DIV_OPERATION
	| BAND ^MESSAGE_OPERATION L4_EXPRESSION ^BAND_OPERATION
	| BOR ^MESSAGE_OPERATION  L4_EXPRESSION ^BOR_OPERATION
	| BXOR ^MESSAGE_OPERATION L4_EXPRESSION ^BXOR_OPERATION
	| MINUS ^MESSAGE_OPERATION L5_EXPRESSION ^SUB_OPERATION
	| PLUS ^MESSAGE_OPERATION  L5_EXPRESSION ^ADD_OPERATION
	| EQUAL ^MESSAGE_OPERATION    L6_EXPRESSION ^EQUAL_OPERATION L7_F
	| NOTEQUAL ^MESSAGE_OPERATION    L6_EXPRESSION ^NOTEQUAL_OPERATION L7_F
	| GREATER ^MESSAGE_OPERATION  L6_EXPRESSION ^GREATER_OPERATION L7_F
	| NOTGREATER ^MESSAGE_OPERATION  L6_EXPRESSION ^NOTGREATER_OPERATION L7_F
	| NOTLESS ^MESSAGE_OPERATION  L6_EXPRESSION ^NOTLESS_OPERATION L7_F
	| AND ^MESSAGE_OPERATION L7_EXPRESSION ^AND_OPERATION L7_F
	| OR ^MESSAGE_OPERATION  L7_EXPRESSION ^OR_OPERATION L7_F
	| XOR ^MESSAGE_OPERATION L7_EXPRESSION ^XOR_OPERATION L7_F
	| ALT ^MESSAGE_OPERATION ALT_R
	| TRY ^MESSAGE_OPERATION TRY_R
	| FNL ^MESSAGE_OPERATION FNL_R;

RI_OP ::=
	BRACKET ^OBJECT {
		MESSAGE_PARAMETER {
			")" {
				RF_OP
				| T_EXPRESSION T_EXPRESSION_F ^ TEMPLATE_BLOCK
				| LT_EXPRESSION ^ TEMPLATE_BLOCK
				| eps ^MESSAGE_OPERATION
			}
			| { ";" EXPRESSION }+ ")" {
				T_EXPRESSION T_EXPRESSION_F ^ TEMPLATE_BLOCK					
				| LT_EXPRESSION ^ TEMPLATE_BLOCK
			}
			| { "," MESSAGE_PARAMETER }+ ")" { eps ^MESSAGE_OPERATION }
		}
		| ")" {
			RF_OP
			| eps ^MESSAGE_OPERATION
		}
	};

INLINE_F ::=
        identifier ":" ^^EXPRESSION SINGLE_EXPRESSION ^TEMPLATE_EXPR_BLOCK ^EXPRESSION;

L0_F ::=
	SBRACKET INDEXER_R L0_F
	| APPEND EXPRESSION ^ADDITION_ASSIGNMENT
	| REDUCE EXPRESSION ^SUB_ASSIGNMENT
	| AMUL EXPRESSION ^MUL_ASSIGNMENT
	| ADIV EXPRESSION ^DIV_ASSIGNMENT
	| L1_F;

L1_F ::=
	ASSIGN EXPRESSION ^ASSIGN_OPERATION
	| L2_F;

L2_F ::=	
	L3_F;      

L3_R ::=
	BRACKET MESSAGE_R { L3_F | IF SINGLE_EXPRESSION ":" SINGLE_EXPRESSION ^IF_ELSE_OPERATION }
	| ASSIGN EXPRESSION ^PROPERTY_OPERATION
	| DOT ^PROPERTY_OPERATION MESSAGE L3_R
	| "::" L3_SINGLE_EXPRESSION ^ MESSAGE_OPERATION L3_F
	| SHL ^PROPERTY_OPERATION  L4_EXPRESSION ^SHL_OPERATION
	| SHR ^PROPERTY_OPERATION  L4_EXPRESSION ^SHR_OPERATION
	| STAR ^PROPERTY_OPERATION L4_EXPRESSION ^MUL_OPERATION L4_F
	| DIV ^PROPERTY_OPERATION  L4_EXPRESSION ^DIV_OPERATION L4_F
	| BAND ^PROPERTY_OPERATION L4_EXPRESSION ^BAND_OPERATION L4_F
	| BOR ^PROPERTY_OPERATION  L4_EXPRESSION ^BOR_OPERATION L4_F
	| BXOR ^PROPERTY_OPERATION L4_EXPRESSION ^BXOR_OPERATION L4_F
	| MINUS ^PROPERTY_OPERATION L5_EXPRESSION ^SUB_OPERATION L5_F
	| PLUS ^PROPERTY_OPERATION  L5_EXPRESSION ^ADD_OPERATION L5_F
	| LESS ^PROPERTY_OPERATION L6_EXPRESSION ^LESS_OPERATION L6_F
	| EQUAL ^PROPERTY_OPERATION      L6_EXPRESSION ^EQUAL_OPERATION L6_F
	| NOTEQUAL ^PROPERTY_OPERATION   L6_EXPRESSION ^NOTEQUAL_OPERATION L6_F
	| GREATER ^PROPERTY_OPERATION    L6_EXPRESSION ^GREATER_OPERATION L6_F
	| NOTGREATER ^PROPERTY_OPERATION L6_EXPRESSION ^NOTGREATER_OPERATION L6_F
	| NOTLESS ^PROPERTY_OPERATION    L6_EXPRESSION ^NOTLESS_OPERATION L6_F
	| AND ^PROPERTY_OPERATION L7_EXPRESSION ^AND_OPERATION L7_F
	| OR ^PROPERTY_OPERATION  L7_EXPRESSION ^OR_OPERATION L7_F
	| XOR ^PROPERTY_OPERATION L7_EXPRESSION ^XOR_OPERATION L7_F
	| ISNIL ^PROPERTY_OPERATION EXPRESSION ^ISNIL_OPERATION
	| IF ^PROPERTY_OPERATION SINGLE_EXPRESSION ":" SINGLE_EXPRESSION ^IF_ELSE_OPERATION
	| eps ^PROPERTY_OPERATION;

L3_F ::=
	DOT MESSAGE L3_R
	| "::" EXT_R L3_F
	| IF_DOT MESSAGE CALL_R ^NIL_MESSAGE_OPERATION L3_F
	| L4_F;

L4_F ::= 
	SHL L4_EXPRESSION ^SHL_OPERATION
	| SHR  L4_EXPRESSION ^SHR_OPERATION
	| STAR L4_EXPRESSION ^MUL_OPERATION L4_F
	| DIV  L4_EXPRESSION ^DIV_OPERATION L4_F
	| BAND L4_EXPRESSION ^BAND_OPERATION L4_F
	| BOR  L4_EXPRESSION ^BOR_OPERATION L4_F
	| BXOR L4_EXPRESSION ^BXOR_OPERATION L4_F
	| L5_F;

L5_F ::=
	MINUS L5_EXPRESSION ^SUB_OPERATION L5_F
	| PLUS  L5_EXPRESSION ^ADD_OPERATION L5_F
	| L6_F;

L6_F ::=
	EQUAL        L6_EXPRESSION ^EQUAL_OPERATION L7_F
	| NOTEQUAL   L6_EXPRESSION ^NOTEQUAL_OPERATION L7_F
	| GREATER    L6_EXPRESSION ^GREATER_OPERATION L7_F
	| LESS       L6_EXPRESSION ^LESS_OPERATION L7_F
	| NOTGREATER L6_EXPRESSION ^NOTGREATER_OPERATION L7_F
	| NOTLESS    L6_EXPRESSION ^NOTLESS_OPERATION L7_F
	| L7_F;

L7_F ::=
	AND L7_EXPRESSION ^AND_OPERATION L7_F
	| OR  L7_EXPRESSION ^OR_OPERATION L7_F
	| XOR L7_EXPRESSION ^XOR_OPERATION L7_F
	| L9_F;

L8_F ::=
	IF  IF_R
	| ELSE ELSE_R;

L9_F ::=
	ALT ALT_R
	| TRY TRY_R
	| FNL FNL_R
	| ISNIL EXPRESSION ^ISNIL_OPERATION	
	| eps;

NAMED_OPERATORS ::=
	"$name" SINGLE_EXPRESSION ^NAME_OPERATION
	| "$size" SINGLE_EXPRESSION ^SIZE_OPERATION
	| "$value" SINGLE_EXPRESSION ^EXPRVAL_OPERATION { BRACKET MESSAGE_R }?
	| "$reference" SINGLE_EXPRESSION ^REFER_OPERATION
	| "$len" SINGLE_EXPRESSION ^LEN_OPERATION;

L3_EXPRESSION ::=
	identifier {
		identifier+ {
			eps ^OBJECT
		}
		| I_OP3
		| eps ^OBJECT
	}
	| { reference | global } ^OBJECT
	| { string | integer | hexinteger | long | real | constant | character | wide } ^OBJECT;

I_OP3 ::=
	SBRACKET ^OBJECT INDEXER_R
	| BRACKET ^OBJECT MESSAGE_R
	| DOT ^OBJECT MESSAGE L3_R3;

L3_R3 ::=
	BRACKET MESSAGE_R
	| eps ^PROPERTY_OPERATION;

L4_EXPRESSION ::=
	identifier {
		identifier+ {
			I_R4
			| "{" NESTED_EXPRESSION ^NESTED
			| eps ^OBJECT
		}
		| I_OP4
		| I8_OP
		| eps ^OBJECT
	}
	| { reference | global } ^OBJECT
	| { string | integer | hexinteger | long | real | constant | character | wide } ^OBJECT
	| interpolate { INTERPOL_EXPRESSION interpolate }+ ^INTERPOLATE_EXPR
	| BRACKET SUB_EXPRESSION L3_F4
	| "*" SINGLE_EXPRESSION ^VALUE_OPERATION
	| "~" SINGLE_EXPRESSION ^BNOT_OPERATION
	| NAMED_OPERATORS;	

I_OP4 ::=
	SBRACKET ^OBJECT INDEXER_R L0_F4
	| BRACKET ^OBJECT MESSAGE_R L3_F4
	| DOT ^OBJECT MESSAGE L3_R4;

L0_F4 ::=
	SBRACKET INDEXER_R L0_F4
	| L2_F4;

L2_F4 ::=
	L3_F4;

L3_F4 ::=
	DOT MESSAGE L3_R4
	| eps;

L3_R4 ::=
	BRACKET MESSAGE_R L3_F4
	| eps ^PROPERTY_OPERATION;	

L5_EXPRESSION ::=
	identifier {
		identifier+ {
			I_R5
			| "{" NESTED_EXPRESSION ^NESTED
			| eps ^OBJECT
		}
		| I_OP5
		| I8_OP
		| eps ^OBJECT
	}
	| { reference | global } ^OBJECT
	| { string | integer | hexinteger | long | real | constant | character | wide } ^OBJECT L3_F5
	| interpolate { INTERPOL_EXPRESSION interpolate }+ ^INTERPOLATE_EXPR
	| BRACKET SUB_EXPRESSION L3_F5
	| "*" SINGLE_EXPRESSION ^VALUE_OPERATION
	| "~" SINGLE_EXPRESSION ^BNOT_OPERATION
	| NAMED_OPERATORS;	

I_OP5 ::=
	SBRACKET ^OBJECT INDEXER_R L0_F5
	| BRACKET ^OBJECT MESSAGE_R L3_F5
	| DOT ^OBJECT MESSAGE L3_R5
	| SHL ^OBJECT  L4_EXPRESSION ^SHL_OPERATION L4_F5
	| SHR ^OBJECT  L4_EXPRESSION ^SHR_OPERATION L4_F5
	| STAR ^OBJECT L4_EXPRESSION ^MUL_OPERATION L4_F5
	| DIV ^OBJECT  L4_EXPRESSION ^DIV_OPERATION L4_F5
	| BAND ^OBJECT L4_EXPRESSION ^BAND_OPERATION L4_F5
	| BOR ^OBJECT  L4_EXPRESSION ^BOR_OPERATION L4_F5
	| BXOR ^OBJECT L4_EXPRESSION ^BXOR_OPERATION L4_F5;	

L0_F5 ::=
	SBRACKET INDEXER_R L0_F5
	| L2_F5;

L2_F5 ::=
	L3_F5;

L3_F5 ::=
	DOT MESSAGE L3_R5
	| L4_F5;

L3_R5 ::=
	BRACKET MESSAGE_R L3_F5
	| "::" L3_SINGLE_EXPRESSION ^ MESSAGE_OPERATION L3_F5
	| eps ^PROPERTY_OPERATION;	

L4_F5 ::=
	SHL L4_EXPRESSION ^SHL_OPERATION L4_F5
	| SHR  L4_EXPRESSION ^SHR_OPERATION L4_F5
	| STAR L4_EXPRESSION ^MUL_OPERATION L4_F5
	| DIV  L4_EXPRESSION ^DIV_OPERATION L4_F5
	| BAND L4_EXPRESSION ^BAND_OPERATION L4_F5
	| BOR  L4_EXPRESSION ^BOR_OPERATION L4_F5
	| BXOR L4_EXPRESSION ^BXOR_OPERATION L4_F5
	| eps;

L6_EXPRESSION ::=
	identifier {
		identifier+ {
			I_R6
			| "{" NESTED_EXPRESSION ^NESTED
			| eps ^OBJECT
		}
		| I_OP6
		| I8_OP
		| eps ^OBJECT
	}
	| { reference | global } ^OBJECT
	| { string | integer | hexinteger | long | real | constant | character | wide } ^OBJECT L3_F6
	| interpolate { INTERPOL_EXPRESSION interpolate }+ ^INTERPOLATE_EXPR
	| BRACKET SUB_EXPRESSION L3_F6
	| "*" SINGLE_EXPRESSION ^VALUE_OPERATION
	| "~" SINGLE_EXPRESSION ^BNOT_OPERATION
	| NAMED_OPERATORS;	

I_OP6 ::=
	SBRACKET ^OBJECT INDEXER_R L0_F6
	| BRACKET ^OBJECT MESSAGE_R L3_F6
	| DOT ^OBJECT MESSAGE L3_R6
	| SHL ^OBJECT L4_EXPRESSION ^SHL_OPERATION L4_F6
	| SHR ^OBJECT  L4_EXPRESSION ^SHR_OPERATION L4_F6
	| STAR ^OBJECT L4_EXPRESSION ^MUL_OPERATION L4_F6
	| DIV ^OBJECT  L4_EXPRESSION ^DIV_OPERATION L4_F6
	| BAND ^OBJECT L4_EXPRESSION ^BAND_OPERATION L4_F6
	| BOR ^OBJECT  L4_EXPRESSION ^BOR_OPERATION L4_F6
	| BXOR ^OBJECT L4_EXPRESSION ^BXOR_OPERATION L4_F6
	| MINUS ^OBJECT L5_EXPRESSION ^SUB_OPERATION L5_F6
	| PLUS ^OBJECT  L5_EXPRESSION ^ADD_OPERATION L5_F6;	

L0_F6 ::=
	SBRACKET INDEXER_R L0_F6
	| L2_F6;

L2_F6 ::=
	L3_F6;

L3_F6 ::=
	DOT MESSAGE L3_R6
	| L4_F6;

L3_R6 ::=
	BRACKET MESSAGE_R L3_F6
	| DOT ^PROPERTY_OPERATION MESSAGE L3_R6
	| "::" L3_SINGLE_EXPRESSION ^ MESSAGE_OPERATION L3_F6
	| MINUS ^PROPERTY_OPERATION L5_EXPRESSION ^SUB_OPERATION L5_F6
	| PLUS ^PROPERTY_OPERATION  L5_EXPRESSION ^ADD_OPERATION L5_F6
	| eps ^PROPERTY_OPERATION;	

L4_F6 ::=
	SHL L4_EXPRESSION ^SHL_OPERATION L4_F6
	| SHR  L4_EXPRESSION ^SHR_OPERATION L4_F6
	| STAR L4_EXPRESSION ^MUL_OPERATION L4_F6
	| DIV  L4_EXPRESSION ^DIV_OPERATION L4_F6
	| BAND L4_EXPRESSION ^BAND_OPERATION L4_F6
	| BOR  L4_EXPRESSION ^BOR_OPERATION L4_F6
	| BXOR L4_EXPRESSION ^BXOR_OPERATION L4_F6
	| L5_F6;

L5_F6 ::=
	MINUS L5_EXPRESSION ^SUB_OPERATION L5_F6
	| PLUS  L5_EXPRESSION ^ADD_OPERATION L5_F6
	| eps;

L7_EXPRESSION ::=
	identifier {
		identifier+ {
			I_R7
			| "{" NESTED_EXPRESSION ^NESTED
			| eps ^OBJECT
		}
		| I_OP7
		| I8_OP
		| eps ^OBJECT
	}
	| { reference | global } ^OBJECT
	| { string | integer | hexinteger | long | real | constant | character | wide } ^OBJECT
	| interpolate { INTERPOL_EXPRESSION interpolate }+ ^INTERPOLATE_EXPR
	| BRACKET SUB_EXPRESSION L3_F7
	| "*" SINGLE_EXPRESSION ^VALUE_OPERATION
	| "~" SINGLE_EXPRESSION ^BNOT_OPERATION
	| NAMED_OPERATORS;	


I_OP7 ::=
	SBRACKET ^OBJECT INDEXER_R L0_F7
	| BRACKET ^OBJECT FUNCTION_R L3_F7
	| DOT ^OBJECT MESSAGE L3_R7
	| MINUS ^OBJECT L5_EXPRESSION ^SUB_OPERATION L5_F7
	| PLUS ^OBJECT  L5_EXPRESSION ^ADD_OPERATION L5_F7
	| EQUAL ^OBJECT      L6_EXPRESSION ^EQUAL_OPERATION
	| NOTEQUAL ^OBJECT   L6_EXPRESSION ^NOTEQUAL_OPERATION
	| GREATER ^OBJECT    L6_EXPRESSION ^GREATER_OPERATION
	| LESS ^OBJECT       L6_EXPRESSION ^LESS_OPERATION
	| NOTGREATER ^OBJECT L6_EXPRESSION ^NOTGREATER_OPERATION
	| NOTLESS ^OBJECT    L6_EXPRESSION ^NOTLESS_OPERATION;	

L0_F7 ::=
	SBRACKET INDEXER_R L0_F7
	| L2_F7;

L2_F7 ::=
	L3_F7;

L3_F7 ::=
	DOT MESSAGE L3_R7
	| L4_F7;

L4_F7 ::= 
	L5_F7;

L3_R7 ::=
	BRACKET MESSAGE_R L3_F7
	| EQUAL ^PROPERTY_OPERATION      L6_EXPRESSION ^EQUAL_OPERATION
	| NOTEQUAL ^PROPERTY_OPERATION   L6_EXPRESSION ^NOTEQUAL_OPERATION
	| GREATER ^PROPERTY_OPERATION    L6_EXPRESSION ^GREATER_OPERATION
	| LESS ^PROPERTY_OPERATION       L6_EXPRESSION ^LESS_OPERATION
	| NOTGREATER ^PROPERTY_OPERATION L6_EXPRESSION ^NOTGREATER_OPERATION
	| NOTLESS ^PROPERTY_OPERATION    L6_EXPRESSION ^NOTLESS_OPERATION;
	| eps ^PROPERTY_OPERATION;	

L5_F7 ::=
	L6_F7;

L6_F7 ::=
	EQUAL        L6_EXPRESSION ^EQUAL_OPERATION
	| NOTEQUAL   L6_EXPRESSION ^NOTEQUAL_OPERATION
	| GREATER    L6_EXPRESSION ^GREATER_OPERATION
	| LESS       L6_EXPRESSION ^LESS_OPERATION
	| NOTGREATER L6_EXPRESSION ^NOTGREATER_OPERATION
	| NOTLESS    L6_EXPRESSION ^NOTLESS_OPERATION
	| eps;

L8_EXPRESSION ::=
	"{" BLOCK ^ CLOSURE;

I_R ::=
	":" ^^OBJECT ^^EXPRESSION SINGLE_EXPRESSION ^ TEMPLATE_EXPR_BLOCK ^EXPRESSION
	| LESS ^OBJECT TEMPLATE_ARG { "," TEMPLATE_ARG }* ">" ^TEMPLATE_TYPE TEMPLATE_R
	| I_OP;

I_R4 ::=
	":" ^^OBJECT ^^EXPRESSION SINGLE_EXPRESSION ^ TEMPLATE_EXPR_BLOCK ^EXPRESSION
	| I_OP4;

I_R5 ::=
	":" ^^OBJECT ^^EXPRESSION SINGLE_EXPRESSION ^ TEMPLATE_EXPR_BLOCK ^EXPRESSION
	| I_OP5;

I_R6 ::=
	":" ^^OBJECT ^^EXPRESSION SINGLE_EXPRESSION ^ TEMPLATE_EXPR_BLOCK ^EXPRESSION
	| I_OP6;

I_R7 ::=
	":" ^^OBJECT ^^EXPRESSION SINGLE_EXPRESSION ^ TEMPLATE_EXPR_BLOCK ^EXPRESSION
	| I_OP7;

ASSIGN_R ::=
	EXPRESSION ^ASSIGN_OPERATION;

INDEXER_R ::=
	EXPRESSION "]" ^INDEXER_OPERATION;

INDEXER_RX ::=
	EXPRESSION "]" ^=INDEXER_OPERATION;

FUNCTION_R ::=
	MESSAGE_PARAMETERS ")" ^MESSAGE_OPERATION
	| ")" ^MESSAGE_OPERATION;

MESSAGE_R ::=
	MESSAGE_PARAMETERS ")" ^ MESSAGE_OPERATION
	| ")" ^ MESSAGE_OPERATION;

MESSAGE_XR ::=
	MESSAGE_PARAMETERS ")" ^= MESSAGE_OPERATION
	| ")" ^= MESSAGE_OPERATION;

EXT_R ::=
	MESSAGE LESS TEMPLATE_ARG { "," TEMPLATE_ARG }* ">" { 
		BRACKET FUNCTION_R 
		| "::" L3_SINGLE_EXPRESSION ^ MESSAGE_OPERATION 
	};

IF_R ::=
	L8_EXPRESSION { eps ^IF_OPERATION | "!" L8_EXPRESSION ^IF_ELSE_OPERATION }
	| SINGLE_EXPRESSION ":" SINGLE_EXPRESSION ^IF_ELSE_OPERATION;

ELSE_R ::=
	L8_EXPRESSION ^ELSE_OPERATION;

ALT_R ::=
	CATCH ^ALT_OPERATION;

TRY_R ::=
	CATCH { FNL FINALLY }? ^CATCH_OPERATION;

FNL_R ::=
	FINALLY ^FINAL_OPERATION;

RESEND_R ::=
	"(" MESSAGE_PARAMETERS? ")" ^ MESSAGE_OPERATION
	| eps ^PROPERTY_OPERATION;

CALL_R ::=
	BRACKET MESSAGE_R
	| eps ^PROPERTY_OPERATION;

FINALLY ::=
	L7_EXPRESSION;

CATCH ::=
	MESSAGE {
		BRACKET MESSAGE_R
		| "::" L3_SINGLE_EXPRESSION ^ MESSAGE_OPERATION
	};

COLLECTION ::=
	EXPRESSION { "," EXPRESSION }* ;

TUPLE_TYPE ::=
	SUB_DECLARATION { "," SUB_DECLARATION }+;

MESSAGE_PARAMETERS ::=
	MESSAGE_PARAMETER { "," MESSAGE_PARAMETER }*;

MESSAGE_PARAMETER ::=
	EXPRESSION;

PARAMETER ::=
	identifier+ {
		TEMPLATE_BRACKETS identifier
		| DYNAMIC_DIMENSION ^ARRAY_TYPE identifier
		| "?" ^NULLABLE_TYPE identifier
		| eps
	}
	| reference identifier;

CLOSURE_RET_TYPE ::=
	"[" identifier "]";

DICTIONARY ::=
	identifier+;

SHARED_DICTIONARY ::=
	identifier+;

DIMENSION ::=
        integer
        | hexinteger
	| identifier;

NEXT_TEMPLATE_ARG ::=
	"," TEMPLATE_ARG NEXT_TEMPLATE_ARG
	| ">";

TEMPLATE_BRACKETS ::=
	"<" TEMPLATE_ARG NEXT_TEMPLATE_ARG;

TEMPLATE_ARG ::=
	identifier { TEMPLATE_BRACKETS ^ TEMPLATE_TYPE | DYNAMIC_DIMENSION ^ARRAY_TYPE }? { "?" ^NULLABLE_TYPE }?
	| reference
	| global;

SWITCH_OPTION ::=
	identifier ^ OBJECT ":" SWITCH_CODE
	| { integer | character | string } ^ OBJECT ":" SWITCH_CODE;

SWITCH_LAST_OPTION ::=
	"!" ":" SWITCH_CODE;

SWITCH_CODE ::=
	"{" BLOCK;

POSTFIXES ::=
	":" POSTFIX { "," POSTFIX }*;

POSTFIX ::=
	identifier { 
		"(" { MESSAGE_PARAMETER { "," MESSAGE_PARAMETER }* }? ")" ^ INLINE
		| TEMPLATE_BRACKETS {
			"(" { MESSAGE_PARAMETER { "," MESSAGE_PARAMETER }* }? ")" ^PARAMETERIZED_POSTFIX
			| eps ^ TEMPLATE_TYPE
		}
		| eps };

MESSAGE ::=
	identifier;

COMPLEX_NAME ::=
	identifier;

DYNAMIC_DIMENSION ::=
	"[]";

SBRACKET   ::= "[";
ASSIGN     ::= ":=";
APPEND     ::= "+=";
REDUCE     ::= "-=";
AMUL       ::= "*=";
ADIV       ::= "/=";
BRACKET    ::= "(";
IF         ::= "?";
ELSE       ::= "!";
EQUAL      ::= "==";
NOTEQUAL   ::= "!=";
LESS       ::= "<";
GREATER    ::= ">";
NOTLESS    ::= ">=";
NOTGREATER ::= "<=";
AND        ::= "&&";
OR         ::= "||";
XOR        ::= "^^";
ALT        ::= "\";
TRY        ::= "\\";
FNL        ::= "$fnl";
DOT        ::= ".";
SHL        ::= "$shl";
SHR        ::= "$shr";
INC        ::= "++";
DEC        ::= "--";
MINUS      ::= "-";
PLUS       ::= "+";
STAR       ::= "*";
DIV        ::= "/";
BAND       ::= "&";
BOR        ::= "|";
BXOR       ::= "^";
ISNIL      ::= "??";
IF_DOT     ::= "?.";
ALT_DOT    ::= "\.";

DECLARATION_END ::=
	";";

END_OF_BLOCK ::=
	"}"
	| BLOCK_CLOSING_EXPECTED;

BLOCK_CLOSING_EXPECTED ::=
	eof;
