//        ELENA Language 5.10
//      inline system library

// built-in constants

define EXCEPTION_ACCESS_VIOLATION  101h
define ELENA_ERR_DIVIDE_BY_ZERO    102h
define ELENA_ERR_OUT_OF_MEMORY     103h

// prop_mssg_mask - property message mask

define ARG_MASK              0000001Fh
define SPECIAL_MESSAGE       00000020h
define VARIADIC_MESSAGE      00000080h
define SPECIAL_MESSAGE_INV  0FFFFFFDFh

define elStructure            00000008h

// ; NOTE : __ indicates platform dependant constant!!
define __rsrv_object_offset32        12      
define __rsrv_object_offset64        20
define __page_size32                 16
define __page_size64                 32

define __temp_index32                1      
define __temp_index64                1      

// ; external methods

procedure __object."#dispatch[1]"

  bsredirect  

  open
  reserve  __page_size
  alloci   3
  storesi  1
  movf     -__rsrv_object_offset
  storesi  2
  storesi  0
  movr     class : system'Message
  callextr api : tempObject, 1 
  movr     class : system'MethodNotFoundException
  storesi  0
  pushr    mssgconst : "new[3]"

  throw

end

procedure __object.equal[2]

  peeksi 1
  pushsi 2
  equal
  select const : false, const : true
  pop
  quit
  
end

procedure __object."equalReference$system@Object$system@Object[2]"

  peeksi 1
  pushsi 2
  equal
  select const : false, const : true
  pop
  quit
  
end

procedure __object."__getClass$system@Object[1]"

  peeksi 1
  class
  quit

end

procedure __object."raise[1]"

  pop
  peeksi 0
  throw
  
end

procedure __object."setField$system@Object$system@IntNumber$system@Object[3]"

  peeksi  1
  flag
  and     elStructure
  elsen   labErr, 0
  len
  peeksi  2
  notless labErr
  lessn   labErr, 0
  load
  peeksi  1
  pushsi  3
  set
  pop
  quit

labErr:
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    
  
end

procedure __extension."#dispatch[1]"

  storesi 1
  geti    1
  bsredirect

  peeksi  1
  geti    0
  jumpvi  0

end

procedure __symbol."#dispatch[1]"

  open 
  reserve  4
  savef    -4
  calli    0
  loadf    -4
  restore  4
  close
  jumpvi   0

end

procedure __symbol."tryLoad$@system@ref#1&system@UnsafePointer$system@String$system@String[3]"

  open

  alloci   3

  peekfi   -3   
  savesi   2
  peekfi   -2
  savesi   1
  loadenv
  savesi   0
  callextr extern : LoadSymbolByString2, 0203h
  freei    3

  peekfi   -1
  save

  close

  quit

end

procedure __symbol."load$system@Symbol$system@String[2]"

  alloci   2

  storesi  2
  loadenv
  savesi   0
  callextr extern : LoadSymbolByString, 0202h
  freei    2

  ifn      labErr, 0
  peeksi   1
  save

  quit
 
labErr:
  peeksi  2

  open
  alloci  2
  storesi 1
  movr    class : system'SymbolLoaderException
  storesi 0
  pushr   mssgconst : "new[2]"

  throw  

end

procedure __class."load$system@ClassReference$system@String[2]"

  alloci   2
  peeksi   2
  storesi  1
  loadenv
  storesi  0
  callextr extern : LoadClassByString, 0202h
  ifn      labErr, 0
  peeksi   1
  save

  quit
 
labErr:
  peeksi  2

  open
  alloci  2
  storesi 1
  movr    class : system'TypeLoaderException
  storesi 0
  pushr   mssgconst : "new[2]"

  throw  

end

procedure __class."#dispatch[1]"

  geti    0
  jumpvi  0

end

procedure __dptr."system$setReference[2]"

  loadsi 2
  save
  quit

end

procedure __dptr."readVal$system@UnsafePointer$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  geti   0
  load
  peeksi 2
  save
  quit

end

procedure __dptr."copyTo$system@UnsafePointer$system@Symbol[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __int."readHashCodeTo$system@IntNumber$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __int."readHashCodeTo$system@UIntNumber$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __int."readHashCodeTo$system@ByteNumber$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __int."readHashCodeTo$system@ShortNumber$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __int."readHashCodeTo$system@RealNumber$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __int."readHashCodeTo$system@LongNumber$@system@ref#1&system@IntNumber[2]"

  peeksi  1
  load
  peeksi  2
  save
  quit

end

procedure __literal."equal$system@String[2]"

  pushsi 2
  pushsi 2
  callextr api : sequal, 2
  freei 2
  select const : false, const : true
  quit
  
end

procedure __literal."less$system@String[2]"

  pushsi 2
  pushsi 2
  callextr api : sless, 2
  freei 2
  select const : false, const : true
  quit
  
end

procedure __literal."readLengthTo$system@String$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  len
  dec 1
  peeksi 2
  save
  quit

end


procedure __literal."save$system@IntNumber$@system@Array#1&system@CharValue$@system@ref#1&system@IntNumber[4]"

  pushsi 4
  pushsi 4
  pushsi 4
  pushsi 4

  callextr api : strtochararray, 4
  
  freei  4
  quit

end

procedure __literal."system$$saveToByteArray$system@IntNumber$@system@Array#1&system@ByteNumber$system@IntNumber[4]"

  pushsi 1
  pushsi 5
  pushsi 4
  pushsi 6

  callextr api : subcopyto, 4
  
  peeksi 0
  freei  4
  quit

end

procedure __wide."equal$system@WideString[2]"

  pushsi 2
  pushsi 2
  callextr api : wequal, 2
  freei 2
  select const : false, const : true
  quit
  
end

procedure __wide."less$system@WideString[2]"

  pushsi 2
  pushsi 2
  callextr api : wless, 2
  freei 2
  select const : false, const : true
  quit
  
end

procedure __wide."readLengthTo$system@WideString$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  len
  shr 1
  dec 1
  peeksi 2
  save
  quit

end

procedure __wide."save$system@IntNumber$@system@Array#1&system@CharValue$@system@ref#1&system@IntNumber[4]"

  pushsi 4
  pushsi 4
  pushsi 4
  pushsi 4

  callextr api : wstrtochararray, 4
                
  freei  4
  quit

end

procedure __wide."system$$saveToShortArray$system@IntNumber$@system@Array#1&system@ShortNumber$system@IntNumber[4]"

  pushsi 1
  pushsi 5
  pushsi 4
  pushsi 6

  // ; wsubcopy(target,index,size,arr)
  callextr api : wsubcopyto, 4
  
  peeksi 0
  freei  4
  quit

end

procedure __char."readLengthTo$system@CharValue$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  // ; < 80 - 1
  lessn labEnd, 80h
  // ; <= 800 - 2
  lessn labEnd2, 800h 
  lessn labEnd3, 10000h 
  movn 4
  peeksi 2
  save  
  quit
labEnd:
  movn 1
  peeksi 2
  save  
  quit
labEnd2:
  movn 2
  peeksi 2
  save  
  quit
labEnd3:
  movn 3
  peeksi 2
  save  
  quit

end

procedure __char."readWideLengthTo$system@CharValue$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  and    0FFFFh
  // ; < 80 - 1
  lessn  labEnd, 0D800h
  movn   2
  peeksi 2
  save  
  quit
labEnd:
  movn   4
  peeksi 2
  save  
  quit

end

procedure __array."readLengthTo$system@Array$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  count
  peeksi 2
  save
  quit

end

procedure __array."copy$system@Array$system@IntNumber$system@IntNumber$system@Array[4]"

  pushsi 4
  pushsi 4
  pushsi 4  
  pushsi 4  

  callextr api : nsubcopy, 4
  freei 4
  quit
  
end

procedure __exception."on[2]"

  open 
  hook    labNotFound
  alloci  1
  storesi 0 
  peekfi  -2
  movm    mssgconst : "#invoke[1]"

  callvi  0

labReturn:

  unhook

  close
  quit

labNotFound:

  restore __page_size

  close
  pushsi  __temp_index

labContinueError:

  popa
  unhook
  pusha
  throw

end

procedure __message."#dispatch[1]"

  pushd

  // check if it is invoke
  and     SPECIAL_MESSAGE
  ifn     labDefault, 0 

  load
  storev

  elsed   labDefault

  popd
  peeksi  1
  jumpvi  0

labDefault:
  popd
  bsredirect 

  open
  reserve  __page_size
  alloci   3
  storesi  1
  movf     -__rsrv_object_offset
  storesi  2
  storesi  0
  movr     class : system'Message
  callextr api : tempObject, 1 
  movr     class : system'MethodNotFoundException
  storesi  0
  pushr    mssgconst : "new[3]"

  throw
  
end

procedure __message."getWeakMessage$system@Message$@system@ref#1&system@Message[2]"

  peeksi 1
  load

  pushn  0
  movsip 0
  save
  loadverb
  setv
  popd

  peeksi 2
  save

  quit

end

procedure __message."getMessageName$system@Message$@system@ref#1&system@MessageName[2]"

  peeksi  1
  load
  loadverb
  peeksi  2
  save

  quit

end


procedure __message."load$system@Message$system@String[2]"

  peeksi   2
  open
  alloci   1
  storesi  0
  callextr extern : LoadMessage, 0101h
  freei    1

  ifn      labErr, 0
  close

  peeksi   1
  save

  quit
 
labErr:
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr   mssgconst : "new[1]"

  throw  

end

procedure __signature."#dispatch[1]"

  pushd

  // check if it is invoke
  and      SPECIAL_MESSAGE
  ifn      labDefault, 0 

  load
  movsip 0
  setv
  popd
  and      SPECIAL_MESSAGE_INV
  peeksi   1
  jumpvi   0
  
labDefault:
  popd
  bsredirect 

  open
  reserve  __page_size
  alloci   3
  storesi  1
  movf     -__rsrv_object_offset
  storesi  2
  storesi  0
  movr     class : system'Message
  callextr api : tempObject, 1 
  movr     class : system'MethodNotFoundException
  storesi  0
  pushr    mssgconst : "new[3]"

  throw
  
end

procedure __signature."load$system@MessageName$system@String[2]"

  peeksi   2
  alloci   1
  storesi  0
  callextr extern : LoadSubject, 0201h
  freei    1
  ifn      labErr, 0
  peeksi   1
  save

  quit
 
labErr:
  peeksi   2

  open
  alloci  2
  storesi 1
  movr    class : system'MessageLoaderException
  storesi 0
  pushr   mssgconst : "new[1]"

  throw  

end

procedure __signature."getProperty$system@MessageName$@system@ref#1&system@Message[2]"

  peeksi 1
  load
  pushn  1
  movsip 0
  setv
  popd
  or     prop_mssg_mask  
  peeksi 2
  save

  quit

end

procedure __signature."setProperty$system@MessageName$@system@ref#1&system@Message[2]"

  peeksi 1
  load
  pushn  2
  movsip 0
  setv
  popd
  or     prop_mssg_mask
  peeksi 2
  save

  quit

end

procedure __signature."varidadic$system@MessageName$@system@ref#1&system@Message[2]"

  peeksi 1
  load
  pushn  2
  movsip 0
  setv
  popd
  or     80h
  peeksi 2
  save

  quit

end

procedure __extmessage."#dispatch[1]"

  pushd

  // check if it is invoke
  and     SPECIAL_MESSAGE
  ifn     labDefault, 0 

  load
  storev

  elsed   labDefault
  popd

  jumpi   1

labDefault:
  popd
  bsredirect 

  open
  reserve  __page_size
  alloci   3
  storesi  1
  movf     -__rsrv_object_offset
  storesi  2
  storesi  0
  movr     class : system'Message
  callextr api : tempObject, 1 
  movr     class : system'MethodNotFoundException
  storesi  0
  pushr    mssgconst : "new[3]"

  throw
  
end

procedure __closuretape."#dispatch[1]"

  pushd

  //; check if it is a closure call, otherwise handle it by default
  and     SPECIAL_MESSAGE
  ifn     labDefault, 0 

  popd
  mcount

  open 
  reserve 8
  alloci  1
  storesi 0 
          
  savef   -8
  movn    0  
  savef   -4  

  // ; copy the call stack
  loadf   -8
  mcount
  inc     1
  allocd
  
  movsip  0
  pushfip -1
  dec     1
  xsetr   terminal
  ifn     labSkip, 0
  labNextParam:
  dec     1
  xtrans
  elsen   labNextParam, 0
labSkip:
  pop

  peekfi  1

labNext:
  breakpoint

  loadf   -4

  ifcount labEnd

  get
  inc 1
  savef   -4

  vcallrm system'dynamic'TapeFunction, mssgconst : "params##invoke<system'Object>[0]"
  storesi 0
  peekfi  1
  jump    labNext

labEnd:
  peeksi  0

  restore 8
  close

  quit

labDefault:
  popd
  bsredirect  

  open
  reserve  __page_size
  alloci   3
  storesi  1
  movf     -__rsrv_object_offset
  storesi  2
  storesi  0
  movr     class : system'Message
  callextr api : tempObject, 1 
  movr     class : system'MethodNotFoundException
  storesi  0
  pushr    mssgconst : "new[3]"

  throw

end

procedure __real."exp$system@RealNumber$@system@ref#1&system@RealNumber[2]"

  pushsi 1
  peeksi 3
  rexp
  pop

  quit

end

procedure __real."ln$system@RealNumber$@system@ref#1&system@RealNumber[2]"

  pushsi 1
  peeksi 3
  rln
  pop

  quit

end

procedure __real."sqrt$system@RealNumber$@system@ref#1&system@RealNumber[2]"

  pushsi 1
  peeksi 3
  callextr api : rsqrt, 2
  pop

  quit

end

procedure __real."sin$system@RealNumber$@system@ref#1&system@RealNumber[2]"

  pushsi 1
  peeksi 3
  rsin
  pop

  quit

end

procedure __real."cos$system@RealNumber$@system@ref#1&system@RealNumber[2]"

  pushsi 1
  peeksi 3
  rcos
  pop

  quit

end

procedure __real."arctan$system@RealNumber$@system@ref#1&system@RealNumber[2]"

  pushsi 1
  peeksi 3
  rarctan
  pop

  quit
  
end

procedure __real."pi$@system@ref#1&system@RealNumber[1]"

  peeksi 1
  callextr api : rpi, 1

  quit
  
end

procedure __real."abs$system@RealNumber$@system@ref#1&system@RealNumber[2]"

  pushsi 1
  peeksi 3
  rabs
  pop

  quit

end

procedure __real."round$system@RealNumber$@system@ref#1&system@RealNumber[2]"

  pushsi 1
  peeksi 3
  rround
  pop

  quit

end

procedure __real."truncate$system@RealNumber$@system@ref#1&system@RealNumber[2]"

  pushsi 1
  peeksi 3
  rint
  pop

  quit

end

procedure __timest."empty$system@calendar@TimeStruct[1]"

  peeksi  1
  xsaveai 0, 0
  xsaveai 1, 0
  xsaveai 2, 0
  xsaveai 3, 0

  quit

end

procedure __event."#dispatch[1]"

  bsredirect  

  open
  reserve  8

  alloci   1
  geti     0
  storefi  1
  
  savef    -8
  xsavef   -4, 0

  // ; define the message length
  loadf    -8
  and      ARG_MASK
  ifn      labSkip, 0
  
  allocd

  // ; copy message
  movsip  0 
  pushfip -1

labNextParam:
  dec      1
  xtrans
  elsen    labNextParam, 0

labSkip:
  pop

  peekfi   1

labNext:
  count
  movf     -4
  if       labEnd

  peekfi   1
  loadf    -4
  get
  inc      1
  savef    -4
  
  loadf    -8
  callvi   0
  
  peekfi   1
  jump     labNext

labEnd:
  loadfi  -1
  restore  8
  close
  quit

end

procedure __exception.register[0]

  movr intern : system'core_routines'critical_exception_handler
  callextr api : register_critical_exception_handler, 0

  quit

end

procedure __args."readLengthTo$@system@ref#1&system@IntNumber[2]"

  movn   0
labSearch:
  peeksi 1
  get
  inc 1
  elser labSearch, terminal
  dec 1
  peeksi 2
  save
  quit

end

procedure __bytearray."read$@system@Array#1&system@ByteNumber$system@IntNumber$@system@ref#1&system@ShortNumber[3]"

  peeksi  1
  len
  peeksi  2
  notless labErr
  load
  lessn   labErr, 0
 
  peeksi  2
  load
  peeksi  1
  read
  and     0FFFFh
  peeksi  3
  save

  quit
  
labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw  

end

procedure __bytearray."read$@system@Array#1&system@ByteNumber$system@IntNumber$@system@ref#1&system@IntNumber[3]"

  peeksi  1
  len
  peeksi  2
  notless labErr
  load
  lessn   labErr, 0

  peeksi  2
  load
  peeksi  1
  read
  peeksi  3
  save

  quit
  
labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw  

end

procedure __bytearray."write$@system@Array#1&system@ByteNumber$system@IntNumber$system@ShortNumber[3]"

  peeksi  1
  len
  peeksi  2
  notless labErr
  load
  lessn   labErr, 0

  pushsi  3
  peeksi  2
  xwrite  2
  pop
  quit

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw  

end

procedure __chararray."write$@system@Array#1&system@CharValue$system@IntNumber$system@IntNumber$@system@Array#1&system@CharValue[4]"

  pushsi 4
  pushsi 4
  pushsi 4
  pushsi 4
  
  callextr api : ninsert, 4
  ifn labErr, 0 

  peeksi 0
  freei  4
  quit

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw  

end

procedure __chararray."move$@system@Array#1&system@CharValue$system@IntNumber$system@IntNumber$system@IntNumber[4]"

  pushsi 4
  pushsi 4
  pushsi 4
  pushsi 4
  
  callextr api : nmove, 4
  ifn labErr, 0 

  peeksi 0
  freei  4
  quit

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw  
  
end

procedure __literalconvertor."convert$system@CharValue$@system@Array#1&system@ByteNumber$@system@ref#1&system@IntNumber[3]"

  peeksi 1                                                       
  load
  ifn    labEmpty, 0

  pushsi 2
  pushsi 2
  callextr api : chartostr, 2
  freei  2

  peeksi 3
  save
  quit
  
labEmpty:
  movn 0
  peeksi 3
  save
  quit

end

procedure __lazyexpression."#dispatch[1]"

  vcallrm  system'BaseLazyExpression, mssgconst : "#invoke[0]"
  storesi  1
  jumpvi   0

end

procedure __literalconvertor."convert$system@WideString$@system@Array#1&system@ByteNumber$@system@ref#1&system@IntNumber[3]"

  pushsi 1
  pushsi 3
  callextr api : wstrtostr, 2
  freei 2
  peeksi 3
  save
  quit

end

procedure __literalconvertor."convert$system@RealNumber$system@IntNumber$@system@Array#1&system@ByteNumber$@system@ref#1&system@IntNumber[4]"

  pushn  0   // temporal to support x86-64 mode
  pushsi 4
  pushsi 4
  pushsi 4
  
  callextr api : realtostr, 3
  freei 4

  peeksi 4
  save

  quit
end

procedure __literalconvertor."convert$system@LongNumber$system@IntNumber$@system@Array#1&system@ByteNumber$@system@ref#1&system@IntNumber[4]"

  pushn  0   // temporal to support x86-64 mode
  pushsi 4
  pushsi 4
  pushsi 4
  
  callextr api : longtostr, 3
  freei 4

  peeksi 4
  save

  quit

end

procedure __wideconvertor."convert$system@String$@system@Array#1&system@ShortNumber$@system@ref#1&system@IntNumber[3]"

  pushsi 1
  pushsi 3
  callextr api : strtowstr, 2
  freei 2
  peeksi 3
  save
  quit

end

procedure __wideconvertor."convert$system@CharValue$@system@Array#1&system@ShortNumber$@system@ref#1&system@IntNumber[3]"

  peeksi 1
  load
  ifn    labEmpty, 0

  pushsi 2
  pushsi 2
  callextr api : chartowstr, 2
  freei  2
  peeksi 3
  save
  quit

labEmpty:
  movn 0
  peeksi 3
  save
  quit

end

procedure __wideconvertor."convert$system@LongNumber$system@IntNumber$@system@Array#1&system@ShortNumber$@system@ref#1&system@IntNumber[4]"

  pushn  0   // temporal to support x86-64 mode
  pushsi 4
  pushsi 4
  pushsi 4
  
  callextr api : longtowstr, 3
  freei 4

  peeksi 4
  save

  quit

end

procedure __wideconvertor."convert$system@RealNumber$system@IntNumber$@system@Array#1&system@ShortNumber$@system@ref#1&system@IntNumber[4]"

  pushn    0   // temporal to support x86-64 mode
  pushsi   4
  pushsi   4
  pushsi   4
  
  callextr api : realtowstr, 3
  freei    4

  peeksi   4
  save

  quit

end

procedure __byteconvertor."convert$system@ShortNumber$@system@ref#1&system@ByteNumber[2]"

  peeksi 1
  load

  lessn labErr, 0  
  lessn labCopy, 0FFh

labErr:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopy:
  peeksi 2
  save
  quit  

end

procedure __byteconvertor."convert$system@CharValue$@system@ref#1&system@ByteNumber[2]"

  peeksi 1
  load
  
  lessn labErr, 0  
  lessn labCopy, 080h

labErr:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    


labCopy:
  peeksi 2
  save
  quit

end

procedure __byteconvertor."convert$system@IntNumber$@system@ref#1&system@ByteNumber[2]"

  peeksi 1
  load
  
  lessn labErr, 0  
  lessn labCopy, 100h

labErr:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopy:
  peeksi 2
  save
  quit

end

procedure __byteconvertor."convert$system@UIntNumber$@system@ref#1&system@ByteNumber[2]"

  peeksi 1
  load  

  lessn labCopy, 100h

labErr:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopy:
  peeksi 2
  save
  quit

end

procedure __byteconvertor."convert$system@LongNumber$@system@ref#1&system@ByteNumber[2]"

  peeksi   1
  pusha
  callextr api : longtoint, 1
  pop

  ifr      labErr, 0

  lessn    labErr, 0  
  lessn    labCopy, 0FFh

labErr:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopy:
  peeksi 2
  save
  quit

end

procedure __byteconvertor."convert$system@RealNumber$@system@ref#1&system@ByteNumber[2]"

  peeksi   1
  open
  reserve  4

  rintf    4
  movf     4
  rload
  pushn    0
  movsip   0
  rsaven
  popd

  restore  4
  close

  lessn    labErr, 0  
  lessn    labCopy, 0FFh

labErr:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopy:
  peeksi   2
  save
  quit

end

procedure __byteconvertor."convert$system@String$system@IntNumber$@system@ref#1&system@ByteNumber[3]"

  pushsi 2
  pushsi 2  
  callextr api : strtoint, 2
  freei 2

  ifr      labErr, 0
  peeksi 3
  save

  lessn labErr2, 0  
  lessn labExit, 0FFh

labErr2:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labExit:
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __byteconvertor."convert$system@WideString$system@IntNumber$@system@ref#1&system@ByteNumber[3]"

  pushsi 2
  pushsi 2  
  callextr api : wstrtoint, 2
  freei 2

  ifr      labErr, 0
  peeksi 3
  save

  lessn labErr2, 0  
  lessn labExit, 0FFh

labErr2:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labExit:
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __shortconvertor."convert$system@UIntNumber$@system@ref#1&system@ShortNumber[2]"

  peeksi 1
  load

  lessn labCopy, 8000h

  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopy:
  peeksi 2
  save
  quit

end

procedure __shortconvertor."convert$system@IntNumber$@system@ref#1&system@ShortNumber[2]"

  peeksi 1

  load
  lessn labNegative, 0
  lessn labCopy, 8000h

  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopy:
  peeksi 2
  save
  quit
  
labNegative:
  not

  lessn labCopyNeg, 8000h

  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    
  
labCopyNeg:
  not
  peeksi 2
  save
  quit  

end

procedure __shortconvertor."convert$system@LongNumber$@system@ref#1&system@ShortNumber[2]"

  peeksi   1
  pusha
  callextr api : longtoint, 1
  pop

  ifr      labErr, 0

  lessn labNegative, 0  
  elsen labErr, 0  

  load
  lessn labCopy, 8000h  
  jump  labErr

labCopy:
  peeksi 2
  save
  quit

labNegative:
  load
  not
  lessn labCopyNegative, 8000h  

labErr:
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopyNegative:
  load
  peeksi 2
  save
  quit  

end

procedure __shortconvertor."convert$system@RealNumber$@system@ref#1&system@ShortNumber[2]"

  peeksi   1
  open
  reserve  4

  rintf    4
  movf     4
  rload
  pushn    0
  movsip   0
  rsaven
  popd

  restore  4
  close
  
  lessn    labErr, 0FFFF8000h
  lessn    labCopy, 08000h

labErr:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopy:
  peeksi   2 
  save
  quit

end

procedure __shortconvertor."convert$system@ByteNumber$@system@ref#1&system@ShortNumber[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit  

end

procedure __shortconvertor."convert$system@CharValue$@system@ref#1&system@ShortNumber[2]"

  peeksi 1
  load
  
  lessn labErr, 0  
  lessn labCopy, 08000h

labErr:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labCopy:
  peeksi 2
  save
  quit

end


procedure __shortconvertor."convert$system@String$system@IntNumber$@system@ref#1&system@ShortNumber[3]"
  
  pushsi 2
  pushsi 2  
  callextr api : strtoint, 2
  freei 2

  ifr      labErr, 0
  peeksi 3
  save
  
  lessn labErr2, 0FFFF8000h
  lessn labExit, 08000h
  
labErr2:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labExit:
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

end

procedure __shortconvertor."convert$system@WideString$system@IntNumber$@system@ref#1&system@ShortNumber[3]"
  
  pushsi 2
  pushsi 2  
  callextr api : wstrtoint, 2
  freei 2

  ifr      labErr, 0
  peeksi 3
  save
  
  lessn labErr2, 0FFFF8000h
  lessn labExit, 08000h
  
labErr2:  
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

labExit:
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

end

procedure __longconvertor."convert$system@IntNumber$@system@ref#1&system@LongNumber[2]"
  
  peeksi 1
  load
  peeksi 2
  lload
  quit

end

procedure __longconvertor."convert$system@UIntNumber$@system@ref#1&system@LongNumber[2]"
  
  movn   0
  peeksi 2
  lload

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __longconvertor."convert$system@ShortNumber$@system@ref#1&system@LongNumber[2]"
  
  peeksi 1
  load
  peeksi 2
  lload
  quit

end

procedure __longconvertor."convert$system@ByteNumber$@system@ref#1&system@LongNumber[2]"
  
  movn   0
  peeksi 2
  lload

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __longconvertor."convert$system@String$system@IntNumber$@system@ref#1&system@LongNumber[3]"

  pushn  0
  pushsi 4
  pushsi 4
  pushsi 4  
  callextr api : strtolong, 3
  freei 4

  ifr      labErr, 0
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __longconvertor."convert$system@WideString$system@IntNumber$@system@ref#1&system@LongNumber[3]"

  pushn  0
  pushsi 4
  pushsi 4
  pushsi 4  
  callextr api : wstrtolong, 3
  freei 4

  ifr      labErr, 0
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __longconvertor."convert$system@RealNumber$@system@ref#1&system@LongNumber[2]"

  peeksi 1
  rload
  peeksi 2
  rsavel
  quit

end

procedure __intconvertor."convert$system@LongNumber$@system@ref#1&system@IntNumber[2]"

  peeksi   1
  pusha
  callextr api : longtoint, 1
  pop

  ifr      labErr, 0
  peeksi   2
  save
  quit  

labErr:
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

end

procedure __intconvertor."convert$system@String$system@IntNumber$@system@ref#1&system@IntNumber[3]"

  pushsi 2
  pushsi 2  
  callextr api : strtoint, 2
  freei 2

  ifr      labErr, 0
  peeksi 3
  save
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __intconvertor."convert$system@WideString$system@IntNumber$@system@ref#1&system@IntNumber[3]"
  
  pushsi 2
  pushsi 2  
  callextr api : wstrtoint, 2
  freei 2

  ifr      labErr, 0
  peeksi 3
  save
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr mssgconst : "new[1]"

  throw


end

procedure __intconvertor."convert$system@RealNumber$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  rload
  peeksi 2  
  rsaven
  peeksi 1
  quit

end

procedure __intconvertor."convert$system@CharValue$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __intconvertor."convert$system@ShortNumber$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __intconvertor."convert$system@ByteNumber$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  load
  peeksi 2
  save
  quit

end

procedure __intconvertor."convertUnsigned$system@String$system@IntNumber$@system@ref#1&system@IntNumber[3]"
  
  pushsi 2
  pushsi 2  
  callextr api : strtouint, 2
  freei 2

  ifr      labErr, 0
  peeksi 3
  save
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __uintconvertor."convert$system@LongNumber$@system@ref#1&system@IntNumber[2]"

  peeksi 1
  loadi  1
  ifn    labNext, 0
  elsen  labErr,  0FFFFFFFFh  

labNext:
  load
  peeksi 2
  save
  quit  

labErr:
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

end

procedure __realconvertor."convert$system@String$system@IntNumber$@system@ref#1&system@RealNumber[3]"
  
  pushn    0
  pushsi   4
  pushsi   4
  pushsi   4  
  callextr api : strtoreal, 3
  freei    4
  ifr      labErr, 0
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr   mssgconst : "new[1]"

  throw

end

procedure __realconvertor."convert$system@WideString$system@IntNumber$@system@ref#1&system@RealNumber[3]"
  
  pushn    0
  pushsi   4
  pushsi   4
  pushsi   4  
  callextr api : wstrtoreal, 3
  freei    4
  ifr      labErr, 0
  quit

labErr:
  open
  alloci  1
  movr    class : system'FormatException
  storesi 0
  pushr   mssgconst : "new[1]"

  throw

end


procedure __realconvertor."convert$system@IntNumber$@system@ref#1&system@RealNumber[2]"
  
  peeksi 1
  load
  rset
  peeksi 2
  rsave
  quit

end


procedure __realconvertor."convert$system@ByteNumber$@system@ref#1&system@RealNumber[2]"
  
  peeksi 1
  load
  rset
  peeksi 2
  rsave
  quit

end

procedure __realconvertor."convert$system@ShortNumber$@system@ref#1&system@RealNumber[2]"
  
  peeksi 1
  load
  rset
  peeksi 2
  rsave
  quit

end

procedure __realconvertor."convert$system@LongNumber$@system@ref#1&system@RealNumber[2]"
  
  pushsi 2
  pushsi 2  
  callextr api : longtoreal, 2
  freei 2
  quit

end

procedure __charconvertor."convert$system@IntNumber$@system@Array#1&system@ShortNumber$@system@ref#1&system@CharValue[3]"

  pushsi   2
  peeksi   2
  load
  pushd

  callextr api : core_wstrtochar, 2
  ifr      labErr, 0

  freei    2
  peeksi   3
  save
  quit

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __charconvertor."save$system@CharValue$system@IntNumber$@system@Array#1&system@ShortNumber$@system@ref#1&system@IntNumber[4]"

  pushn  0   // ; HOTFIX : to support 16 byte alignment
  pushsi 4
  pushsi 4
  pushsi 4  
  callextr api : chartoshorts, 3
  freei  4
  peeksi 4
  save
  
  quit

end

procedure __charconvertor."save$system@CharValue$system@IntNumber$@system@Array#1&system@ByteNumber$@system@ref#1&system@IntNumber[4]"

  pushn  0   // ; HOTFIX : to support 16 byte alignment
  pushsi 4
  pushsi 4
  pushsi 4  
  callextr api : chartobytes, 3
  freei  4
  peeksi 4
  save
  
  quit

end

procedure __charconvertor."convert$system@ByteNumber$@system@ref#1&system@CharValue[2]"
  
  peeksi 1
  load

  lessn labErr, 0
  lessn labCopy, 080h

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

labCopy:

  peeksi 2
  save
  quit

end

procedure __charconvertor."convert$system@IntNumber$system@String$@system@ref#1&system@CharValue[3]"
  
  pushsi   2
  peeksi   2
  load
  pushd

  callextr api : core_strtochar, 2
  ifr      labErr, 0

  freei    2
  peeksi   3
  save
  quit

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __charconvertor."convert$system@IntNumber$@system@Array#1&system@ByteNumber$@system@ref#1&system@CharValue[3]"
  
  pushsi 2
  pushsi 2

  callextr api : core_strtochar, 2
  ifr   labErr, 0

  freei 2
  peeksi 3
  save
  quit

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __charconvertor."convert$system@ShortNumber$@system@ref#1&system@CharValue[2]"
  
  peeksi 1
  load

  lessn labErr, 0
  lessn labCopy, 010000h

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

labCopy:

  peeksi 1
  save
  quit

end

procedure __charconvertor."convert$system@IntNumber$@system@ref#1&system@CharValue[2]"
  
  peeksi 1
  load
  
  lessn labErr, 0
  lessn labCopy, 110000h

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

labCopy:

  peeksi 2
  save
  quit

end

procedure __charconvertor."convert$system@IntNumber$system@WideString$@system@ref#1&system@CharValue[3]"
  
  pushsi 2
  pushsi 2

  callextr api : core_wstrtochar, 2
  ifr   labErr, 0

  freei 2
  peeksi 3
  save
  quit

labErr:
  open
  alloci  1
  movr    class : system'InvalidArgumentException
  storesi 0
  pushr mssgconst : "new[1]"

  throw

end

procedure __utf8encoder."convertFrom$system@IntNumber$@system@ref#1&system@IntNumber$@system@Array#1&system@ByteNumber$@system@Array#1&system@CharValue$@system@ref#1&system@IntNumber[6]"

  pushn  0 // ; temporally
  pushsi 7
  pushsi 7
  pushsi 7  
  pushsi 7  
  pushsi 7  
  
  callextr api : s_encode, 5
  freei 6
  ifr labErr, 0
  
  quit

labErr:
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    
  
end

procedure __utf8encoder."convertTo$system@IntNumber$@system@ref#1&system@IntNumber$@system@Array#1&system@CharValue$@system@Array#1&system@ByteNumber$@system@ref#1&system@IntNumber[6]"

  pushn  0 // ; temporally
  pushsi 7
  pushsi 7
  pushsi 7  
  pushsi 7  
  pushsi 7  
  
  callextr api : s_decode, 5
  freei 6
  ifr labErr, 0
  
  quit

labErr:
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    
  
end

procedure __utf16encoder."convertFrom$system@IntNumber$@system@ref#1&system@IntNumber$@system@Array#1&system@ByteNumber$@system@Array#1&system@CharValue$@system@ref#1&system@IntNumber[6]"

  pushn  0 // ; temporally
  pushsi 7
  pushsi 7
  pushsi 7  
  pushsi 7  
  pushsi 7  

  callextr api : ws_encode, 5
  freei 6
  ifr labErr, 0
  
  quit

labErr:
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

end

procedure __utf16encoder."convertTo$system@IntNumber$@system@ref#1&system@IntNumber$@system@Array#1&system@CharValue$@system@Array#1&system@ByteNumber$@system@ref#1&system@IntNumber[6]"

  pushn  0 // ; temporally
  pushsi 7
  pushsi 7
  pushsi 7  
  pushsi 7  
  pushsi 7  
  
  callextr api : ws_decode, 5
  freei 6
  ifr labErr, 0
  
  quit

labErr:
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    
  
end

procedure __utf16encoder."convert$system@IntNumber$system@IntNumber$@system@Array#1&system@ShortNumber$@system@Array#1&system@CharValue$@system@ref#1&system@IntNumber[6]"

  pushn  0 // ; temporally
  pushsi 7
  pushsi 7
  pushsi 7  
  pushsi 7  
  pushsi 7  
  
  callextr api : ws_encodew, 5
  freei 6
  ifr labErr, 0
  
  quit

labErr:
  open
  alloci  1
  movr    class : system'OutOfRangeException
  storesi 0
  pushr mssgconst : "new[1]"

  throw    

end

procedure __alloc_closure."params##invoke$system@Object[0]"

  load
  popa
  allocd
  pusha
  movr   0
  quit

end

procedure __mssg_closure."params##invoke$system@Object[0]"

  load
  peeksi  1
  jumpvi  0

end

procedure __local_closure."params##invoke$system@Object[0]"

  load
  movfip 0
  get

  quit

end

procedure __copytostack_closure."params##invoke$system@Object[0]"

  pusha
  load
  movfip 0
  get

  swap
  xload  4
  xset
  pop

  peeksi  1

  quit
end

procedure __assign_closure."params##invoke$system@Object[0]"

  pushsi  1
  load
  movfip 0
  xset
  popa

  quit

end

procedure __dynamicmssg_closure."params##invoke$system@Object[0]"

  load
  movfip 0
  get
  load
  peeksi  1
  jumpvi  0

end

procedure __saving_closure."params##invoke$system@Object[0]"

  pushsi 1

  load
  movsip 2
  xset
  popa

  quit

end


procedure __exit_closure."params##invoke$system@Object[0]"

  peekfi  1
  count
  savef   -4
  peeksi  1
  quit

end

// ; system routines

symbol sta_start

  open
  reserve  sizeof ProgramHeader

  alloci   5

  movfip   -1
  storesi  0
  callextr extern : PrepareEM, 0201h

  movf     -4
  storesi  0
  callextr api : initProcess, 1

  movf     -4
  storesi  4
  movr     entry : "$forwards'$program"
  storesi  3
  movr     api : veh_handler
  storesi  2
  movr     api : default_handler
  storesi  1
  loadenv
  savesi   0
  callextr extern : InitializeSTA, 0205h

  restore  sizeof ProgramHeader
  close
  quit

end

symbol vm_sta_start

  open
  reserve  sizeof ProgramHeader

  alloci   5

  movfip   -1
  storesi  0
  callextr extern : PrepareEM, 0201h

  movf     -4
  storesi  0
  callextr api : initProcess, 1

  movf     -4
  storesi  5
  movr     rdata : "$elena'@tapekey"
  storesi  4
  movr     api : veh_handler
  storesi  3
  movr     api : default_handler
  storesi  2
  loadenv
  savesi   1
  callextr api : get_seh_handler, 0
  savesi   0
  callextr extern : InitializeVMSTA, 0206h

  restore  sizeof ProgramHeader
  close
  quit

end

procedure critical_exception_handler

  open

  alloci  1

  ifn     labAccessViolation, EXCEPTION_ACCESS_VIOLATION
  ifn     labDivisionByZero, ELENA_ERR_DIVIDE_BY_ZERO
  ifn     labOutOfMemory, ELENA_ERR_OUT_OF_MEMORY

  movr    class : system'CriticalException
  storesi 0
  pushr   mssgconst : "new[1]"
  throw

labAccessViolation:
  movr    class : system'NilReferenceException
  storesi 0
  pushr   mssgconst : "new[1]"
  throw

labDivisionByZero:
  movr    class : system'DivisionByZeroException
  storesi 0
  pushr mssgconst : "new[1]"
  throw

labOutOfMemory:
  movr    class : system'OutOfMemoryException
  storesi 0
  pushr   mssgconst : "new[1]"
  throw

end
