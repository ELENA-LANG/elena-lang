//        ELENA Language 4.0
//      inline system library

define elStructure          000000008h
define elSubject            000002000h

procedure __object."#dispatch[1]"

  bsredirect  

  open    4
  reserve 2
  esavesi 3
  bcopys  -3
  pushb
  pusha
  acopyr class : system'Message
  pushr class : system'MethodNotFoundException
  asavesi 5
  aloadsi 0
  pushr const : %"new[2]"

  throw

end

procedure __object.equal[2]

  aloadsi 1
  bloadsi 2
  ifb     labTrue
  acopyr  const : system'false
  quitn   2
  
labTrue:
  acopyr const : system'true
  quitn 2
  
end

procedure __object."throw[1]"

  pop
  aloadsi 0
  throw
  
end

procedure __object."__getClass[1]"

  bloadsi 1
  class
  quitn 1

end

procedure __object."setField$system@IntNumber$system@Object[3]"

  aloadsi 1
  flag
  andn elStructure
  elsen labErr 0
  len
  bcopya
  ecopyd
  aloadsi 2
  nload
  notless labErr
  lessn labErr 0
  aloadsi 3
  set
  bcopya
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __exception."on[2]"

  popd
  popa // exception
  popb // block
  pusha
  pushd
  acopyb
  copym message : "#invoke[1]"
  bsredirect
  aloadsi 3
  throw

end

procedure __exception."on[3]"

  open 1
  pusha
  aloadfi -3
  pusha
  aloadfi -4
  pusha

  hook labNotFound

  aloadsi 6
  pusha
  aloadsi 6
labCall:  
  copym message : "#invoke[1]"
  acallvi 0
  
labReturn:

  unhook

  close
  quitn 3

labNotFound:

  dloadsi 9
  address labReturn
  else labContinueError

  restore 1
  close
  close
  popi 1

  aloadsi 5
  ifr labContinueError 0 
  bcopya
  acopyr 0 
  asavesi 5
  acopyb
  jump    labCall

  unhook

  close
  quitn 3

labContinueError:
  popa
  unhook
  pusha
  throw

end

procedure __exception.register[0]

  acopyr intern : system'core_routines'critical_exception_handler
  callextr api : register_critical_exception_handler

  quit

end

procedure __int."read:HashCode$@system@ref#1&IntNumber[2]"

  bloadsi 2
  ncopy
  quitn 2

end

procedure __char."readLengthTo$@system@ref#1&IntNumber[2]"

  bloadsi 2
  nload
  // ; < 80 - 1
  ecopy 1
  lessn labEnd 80h
  eaddn 1
  // ; <= 800 - 2
  lessn labEnd 800h 
  eaddn 1
  lessn labEnd 10000h 
  // ; <= 10000 - 3
  eaddn 1
  // ; - 4
labEnd:
  dcopye
  nsave  
  quitn 2

end

procedure __literal."read:Length$@system@ref#1&IntNumber[2]"

  aloadsi 1
  blen
  dec
  bloadsi 2
  nsave
  quitn 2

end

procedure __literal."copy$system@String$system@IntNumber$system@IntNumber$@system@Array#1&ByteNumber[4]"

  bloadsi 1
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  
  callextr api : subcopyz
  
  acopyb
  quitn 4

end

procedure __literal."add$system@String[2]"

  blen
  dec
  ecopyd
  bcopya
  aloadsi 2
  blen
  add
  acopyr class : system'String
  bcreate
  bswap
  blen
  dec
  ecopyd
  dcopy 0
  callextr api : insert
  ecopyd
  aloadsi 2
  blen
  eswap
  callextr api : insert
  acopyb

  quitn 2

end                                                

procedure __literal."read$system@IntNumber$@system@ref#1&CharValue[3]"

  blen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  acopyb  
  callextr api : strtochar
  ifr labErr 0
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __literal."new$system@IntNumber$system@IntNumber$@system@Array#1&CharValue[4]"

  aloadsi 3
  nload
  ifn labEmpty 0
    
  aloadsi 4
  ecopyd
  callextr api : slen_ch
            
  acopyr class : system'String
  inc
  bcreate
  bcopya

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4

  callextr api : s_copychars
  
  acopyb
  blen
  ecopy 0
  dec
  bwriteb
  quitn 4
  
labEmpty:
  dcopy 1
  acopyr class : system'String
  bcreate
  bcopya
  dcopy 0
  nsave
  acopyb
  quitn 4

end

procedure __literal."equal$system@String[2]"

  bloadsi 2
  callextr api : sequal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __literal."less$system@String[2]"

  bloadsi 2
  callextr api : sless
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __literal."save$system@IntNumber$@system@Array#1&CharValue$@system@ref#1&IntNumber[4]"

  pusha
  bloadsi 4
  aloadsi 5
  nload
  ecopyd
  aloadsi 3
  nload
  aloadsi 0
  callextr api : strtochararray
  bloadsi 5
  dcopye
  nsave
  popa

  quitn 4

end

procedure __literal."indexOf$system@IntNumber$system@String$@system@ref#1&IntNumber[4]"

  bcopya
  aloadsi 2                 // ; load index
  nload
  aloadsi 3                 // ; load searching str
  callextr api : sseek
  acopyb
  bloadsi 4                 // ; load target
  nsave                    // ; save index
  quitn 4

end

procedure __literal."indexOf$system@IntNumber$system@CharValue$@system@ref#1&IntNumber[4]"

  pusha
  aloadsi 4
  pushn 0
  pushn 0
  bcopys 0
  pushn 0
  callextr api : chartostr
  eaddn 1
  pushe

  aloadsi 7                 // ; load index
  nload
  acopys 2
  bloadsi 4
  callextr api : sseek
  bloadsi 9                // ; load target
  nsave                    // ; save index
  popi 4
  popa
  quitn 4

end

procedure __literal."Substring$system@IntNumber$system@IntNumber[3]"

  // ; calculate length
  aloadsi 3
  nload
  inc

  // ; create a new string  
  acopyr class : system'String
  bcreate
  bcopya

  aloadsi 3
  nload
  ecopyd
  
  aloadsi 2
  nload

  aloadsi 1
  callextr api : subcopyz
  acopyb

  quitn 3

end

procedure __literal."copy$system@String$system@String[2]"

  aloadsi 2
  bcopya
  aloadsi 1
  copy
  acopyb
  quitn 2

end

procedure __literal."insert$system@String$system@IntNumber$system@CharValue[3]"
  
  pusha

  aloadsi 4
  nload
  pushd
  acopys 0
  pushn 0
  pushn 0
  bcopys 0
  
  callextr api : chartostr

  aloadsi 6
  nload
  bloadsi 5
  acopys 0

  callextr api : insert

  acopyb
  popi 4
  quitn 3
  
end

procedure __wide."read:Length$@system@ref#1&IntNumber[2]"

  aloadsi 1
  wlen
  dec
  bloadsi 2
  nsave
  quitn 2

end

procedure __wide."copy$system@WideString$system@IntNumber$system@IntNumber$@system@Array#1&ShortNumber[4]"

  bloadsi 1
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  
  callextr api : wsubcopyz
  
  acopyb
  quitn 4

end

procedure __wide."add$system@WideString[2]"

  wlen
  dec
  ecopyd
  bcopya
  aloadsi 2
  wlen
  add
  acopyr class : system'WideString
  wcreate
  bswap
  wlen
  dec
  ecopyd
  dcopy 0
  callextr api : winsert
  ecopyd
  aloadsi 2
  wlen
  eswap
  callextr api : winsert
  acopyb

  quitn 2

end                                                

procedure __wide."read$system@IntNumber$@system@ref#1&CharValue[3]"

  wlen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  acopyb  
  callextr api : wstrtochar
  ifr labErr 0
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __wide."Substring$system@IntNumber$system@IntNumber[3]"

  // ; calculate length
  aloadsi 3
  nload
  inc

  // ; create a new string  
  acopyr class : system'WideString
  wcreate
  bcopya

  aloadsi 3
  nload
  ecopyd
  
  aloadsi 2
  nload

  aloadsi 1
  callextr api : wsubcopyz
  acopyb

  quitn 3

end

procedure __literalconvertor."convert$system@IntNumber$@system@Array#1&ByteNumber$@system@ref#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor."convert$system@UIntNumber$@system@Array#1&ByteNumber$@system@ref#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : uinttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor."convert$system@ShortNumber$@system@Array#1&ByteNumber$@system@ref#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor."convert$system@ByteNumber$@system@Array#1&ByteNumber$@system@ref#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor."convert$system@LongNumber$@system@Array#1&ByteNumber$@system@ref#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : longtostr

  bloadsi 4
  nwritei 0

  quitn 4


end

procedure __literalconvertor."convert$system@WideString$@system@Array#1&ByteNumber$@system@ref#1&IntNumber[4]"

  aloadsi 2
  bloadsi 3
  callextr api : wstrtostr
  bloadsi 4
  nwritei 0
  quitn 4
  
end

procedure __literalconvertor."convert$system@CharValue$@system@Array#1&ByteNumber$@system@ref#1&IntNumber[4]"

  aloadsi 2
  nload
  ifn labEmpty 0

  bloadsi 3

  callextr api : chartostr
  bloadsi 4
  nwritei 0
  quitn 4
  
labEmpty:
  ecopy 0
  bloadsi 4
  nwritei 0
  quitn 4

end

procedure __literalconvertor."convert$system@RealNumber$@system@Array#1&ByteNumber$@system@ref#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 24
  
  callextr api : realtostr

  bloadsi 4
  nwritei 0

  quitn 4
end

procedure __wideconvertor."convert$system@String$@system@Array#1&ShortNumber$@system@ref#1&IntNumber[4]"

  aloadsi 2
  bloadsi 3
  callextr api : strtowstr
  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __charconvertor."system$$save$system@CharValue$system@IntNumber$@system@Array#1&ShortNumber$@system@ref#1&IntNumber[5]"

  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  bloadsi 4
  callextr api : chartoshorts
  dcopye
  bloadsi 5
  nsave
  
  quitn 5

end

procedure __charconvertor."system$$save$system@CharValue$system@IntNumber$@system@Array#1&ByteNumber$@system@ref#1&IntNumber[5]"

  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  bloadsi 4
  callextr api : chartobytes
  dcopye
  bloadsi 5
  nsave
  
  quitn 5

end

procedure __charconvertor."system$$convert$system@IntNumber$@system@Array#1&ShortNumber$@system@ref#1&CharValue[4]"
  
  aloadsi 2
  nload
  aloadsi 3

  callextr api : wstrtochar
  ifr   labErr 0

  dcopye
  bloadsi 4
  nsave
  acopyb
  quitn 4

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __args."read:Length$@system@ref#1&IntNumber[2]"

  aloadsi 1
  bcopya
  dcopy 0
labSearch:
  get
  inc
  elser labSearch 0
  dec
  ecopyd
  bloadsi 2
  nsave
  quitn 2

end

procedure __array."read:Length$@system@ref#1&IntNumber[2]"

  len
  bloadsi 2
  nsave
  quitn 2

end

procedure __array."at$system@IntNumber[2]"

  bcopya
  len
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  get
  quitn 2

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __array."setAt$system@IntNumber$system@Object[3]"

  bcopya
  len
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  aloadsi 3
  set
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __array."copy$system@Array$system@IntNumber$system@IntNumber$system@Array[4]"

  aloadsi 1
  bcopya
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  callextr api : nsubcopy
  
  acopyb
  quitn 4
  
end

procedure __array."reallocate$system@IntNumber[2]"

  aloadsi 1
  flag
  andn elStructure
  elsen labErr 0
  bcopya
  aloadsi 2
  nload
  class
  create
  bloadsi 1
  count
  dcopye        // ; index - old length
  bcopya
  count         // ; ext - new length
  less labExpand

  aloadsi 1

  pusha
  count
  dcopy 0
labCopy:
  get
  bswapsi 0
  xset
  bswapsi 0
  next labCopy
  pop

  acopyb
  quitn 2

labExpand:
  ecopyd
  dcopy 0
  pushb
labNext:
  bloadsi 2
  get
  bloadsi 0
  xset
  inc
  less labNext

  count
  acopyr 0
labNext2:
  xset
  inc
  less labNext2
  popa
  quitn 2

end

procedure __dptr."system$setReference[2]"

  bcopya
  dloadsi 2
  nsave
  acopyb
  quitn 2

end

procedure __bytearray."read$system@IntNumber$system@IntNumber$system@ByteArray[4]"

  aloadsi 1
  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  acopyb

  bloadsi 4
  callextr api : subcopy
  quitn 4
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read$system@IntNumber$@system@ref#1&ByteNumber[3]"

  aloadsi 1
  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  breadb
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read$system@IntNumber$@system@ref#1&ShortNumber[3]"

  aloadsi 1
  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  breadw
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read$system@IntNumber$@system@ref#1&CharValue[3]"

  aloadsi 1
  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  bread
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read$system@IntNumber$@system@ref#1&IntNumber[3]"

  aloadsi 1
  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  bread
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __chararray."write$system@IntNumber$system@IntNumber$@system@Array#1&CharValue[4]"

  aloadsi 1
  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  pushd
  add
  ecopyd
  acopyb
  nlen
  less labErr
  pope
  aloadsi 2
  nload
  aloadsi 4
  callextr api : ninsert
  quitn 4

labErr:
  pop
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __intarray."write$system@IntNumber$system@IntNumber$@system@Array#1&IntNumber[4]"

  bloadsi 1
  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  pushd
  add
  ecopyd
  acopyb
  nlen
  less labErr
  pope
  aloadsi 2
  nload
  aloadsi 4
  callextr api : ninsert
  quitn 4

labErr:
  pop
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __struct."#dispatch[1]"

  bsredirect

  pushe
  dcopycount
  elsen labEnd 0
  dcopyverb
  pushd
  bcopya
  pushn 0

labNext:
  count
  dloadsi 0
  if labEnd
  get
  inc
  dsavesi 0

  flag
  andn elSubject
  ifn  labNext 0

  nload
  ecopyd
  dloadsi 1
  else labNext

labCall:
  dloadsi 0
  get
  popi 3
  quitn 1
  
labEnd:
  popi 2
  pope
  open    4
  reserve 2
  esavesi 3
  bcopys  -3
  pushb
  pusha
  acopyr class : system'Message
  pushr class : system'MethodNotFoundException
  asavesi 5
  aloadsi 0
  pushr const : %"new[2]"
  throw

end

procedure __realconvertor."convert$system@String$@system@ref#1&RealNumber[3]"
  
  bloadsi  3
  dcopy    10
  aloadsi  2
  callextr api : strtoreal
  ifr      labErr 0
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __realconvertor."convert$system@IntNumber$@system@ref#1&RealNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  rcopy
  rsave
  acopyb
  quitn 3

end

procedure __realconvertor."convert$system@ByteNumber$@system@ref#1&RealNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  rcopy
  rsave
  acopyb
  quitn 3

end

procedure __realconvertor."convert$system@ShortNumber$@system@ref#1&RealNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  rcopy
  rsave
  acopyb
  quitn 3

end

procedure __realconvertor."convert$system@LongNumber$@system@ref#1&RealNumber[3]"
  
  bcopya
  aloadsi 2
  callextr api : longtoreal
  acopyb
  quitn 3

end

procedure __intconvertor."convert$system@String$@system@ref#1&IntNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : strtoint
  nsave
  ifr      labErr 0
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __byteconvertor."convert$system@ShortNumber$@system@ref#1&ByteNumber[3]"

  aloadsi 2
  nload

  lessn labErr 0  
  lessn labCopy 0FFh

labErr:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  bloadsi 3
  nsave
  quitn 3  

end

procedure __message."#dispatch[1]"

  bloadsi 1
  ifb labDefault

  nload
  eswap
  setverb messagename : "eval"
  else labEnd
  nload
  ecopyd
  aloadsi 1
  ajumpvi 0

labEnd:
  open    4
  reserve 1
  dsavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new[1]
  throw

labDefault:
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new[1]
  throw
  
end

procedure __extmessage."#dispatch[1]"

  bloadsi 1
  ifb labDefault

  nload
  eswap
  setverb messagename : "eval"
  else labEnd
  nload
  ecopyd
  ajumpi 1

labEnd:
  open    4
  reserve 1
  dsavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new[1]
  throw

labDefault:
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new[1]
  throw
  
end

procedure __utf16encoder."convert$system@IntNumber$system@IntNumber$@system@Array#1&CharValue$@system@Array#1&ShortNumber$@system@ref#1&IntNumber[6]"

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  bloadsi 5
  
  callextr api : ws_decode
  ifr labErr 0

  dcopye  
  bloadsi 6
  nsave
  
  quitn 6

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __shortconvertor."convert$system@ByteNumber$@system@ref#1&ShortNumber[3]"

  aloadsi 2
  nload
  bloadsi 3
  nsave
  quitn 3  

end

procedure __uintconvertor."convert$system@LongNumber$@system@ref#1&IntNumber[3]"

  aloadsi 2
  dcopy 4
  bread
  dcopye

  elsen labErr 0  

  nload
  bloadsi 3
  nsave
  quitn 3  

labErr:
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

end

procedure __longconvertor."convert$system@IntNumber$@system@ref#1&LongNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  nsave
  lessn labNegative 0
  dcopy 0
  nsavei 1
  acopyb
  quitn 3

labNegative:
  dcopy 0FFFFFFFFh
  nsavei 1
  acopyb
  quitn 3

end

procedure __real."ln$system@RealNumber$@system@ref#1&RealNumber[3]"

  aloadsi 2  
  bloadsi 3
  rln

  quitn 3

end

procedure __real."exp$system@RealNumber$@system@ref#1&RealNumber[3]"

  aloadsi 2
  bloadsi 3
  rexp

  quitn 3

end

procedure __signature."#dispatch[1]"

  bloadsi 1
  ifb labDefault

  nload
  dsetverb
  aloadsi 1
  ajumpvi 0
  
labDefault:
  bsredirect  
  open    4
  reserve 2
  esavesi 3
  bcopys  -3
  pushb
  pusha
  acopyr class : system'Message
  pushr class : system'MethodNotFoundException
  asavesi 5
  aloadsi 0
  pushr const : %"new[2]"
  throw
  
end

procedure __group."#dispatch[1]"

  open 5
  reserve 2

  dcopye
  dsavefi -3
  dcopy 0  
  dsavefi -2

  pusha

  hook labNotFound

// ; define the message length
  dloadfi -3
  ecopyd
  dcopycount
  inc
  
// ; copy message
  bcopyf -5
labNextParam:
  get
  pusha
  dec
  elsen labNextParam 0

  bloadfi 1

labNext:
  count
  dloadfi -2
  if labEnd
  get
  inc
  dsavefi -2

  dloadfi -3
  ecopyd
  acallvi 0

labReturn:
  unhook
  dloadfi -3
  ecopyd
  restore 4
  close

  equit
  
labNotFound:  
  dloadsi 9
  address labReturn
  else labContinueError

  restore 1
  close
  close
  popi 1
  bloadfi 1
  jump labNext

labContinueError:
  unhook
  dloadfi -3
  throw
                         
labEnd:
  unhook

  open    4
  reserve 2
  esavesi 3
  bcopys  -3
  pushb
  pusha
  acopyr class : system'Message
  pushr class : system'MethodNotFoundException
  asavesi 5
  aloadsi 0
  pushr const : %"new[2]"
  throw
        
end

procedure __closuretape."#dispatch[1]"

  dcopyverb
  elsem labDefault message : "#invoke[1]"

  dcopycount
  ecopyd  

  open 5
  reserve 2
  pusha
  
  dsavefi -3
  dcopy 0  
  dsavefi -2
  
  pushn 0
  
  bcopyf -6
  
// ; copy message parameters
  dcopye
  ifn  labSkipCopy 0
labNextParam:
  dec
  get
  pusha
  elsen labNextParam 0

labSkipCopy:
  bloadfi 1

labNext:
  breakpoint

  count
  dloadfi -2
  if labEnd
  get
  inc
  dsavefi -2

  xindexrm system'dynamic'DynamicClosure message : "params##invoke[1]"
  acallvd
  pusha
  bloadfi 1
  jump labNext

labEnd:
  popa

  dloadfi -3
  dec
  ecopyd
  restore 4
  close

  equit

labDefault:
  ecopyd
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new[1]
  throw

end

procedure __mssg_closure."params##invoke$system@Object[2]"

  nloade
  aloadsi 1
  ajumpvi 0

end

symbol sta_start

  pushr entry : "$forwards'$program"
  pushr api : seh_handler
  pushr api : default_handler
  system
  pushe
  callextr extern : InitializeSTA
  popi 4
  quit

end

procedure critical_exception_handler

  open 1
  pushr class : system'CriticalException
  pushr const : %"new[0]"
  throw

end

symbol vm_sta_start

  pushr rdata : "$elena'@tapekey"
  pushr api : seh_handler
  pushr api : default_handler
  system
  pushe
  callextr extern : InitializeVMSTA
  popi 4
  quit

end
