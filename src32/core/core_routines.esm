//        ELENA Language 2.0
//      inline system library

define elStructure          000000008h
define elSubject            000002000h
define elMessage            000008000h
define elExtMessage         000200000h

define EVAL_MESSAGE_ID      085000000h
define GET_MESSAGE_ID       086000000h

procedure __object.dispatch[1]

  bsredirect  

  open    4
  reserve 2
  esavesi 3
  bcopys  -3
  pushb
  pusha
  acopyr class : system'Message
  pushr class : system'MethodNotFoundException
  asavesi 5
  aloadsi 0
  pushr const : %"new[2]"
  throw

end

procedure __object.equal[2]

  aloadsi 1
  bloadsi 2
  ifb     labTrue
  acopyr  const : system'false
  quitn   2
  
labTrue:
  acopyr const : system'true
  quitn 2
  
end

procedure __object.get&class_ref[1]

  bloadsi 1
  class
  quitn 1

end

procedure __object.get&parent_ref[1]

  bloadsi 1
  class
  bcopya
  parent
  quitn 1

end

procedure __object.eval&instanceOf[2]

  bloadsi 2
  aloadsi 1
  check
  selectr const : system'false const : system'true
  quitn 2

end

procedure __object.equal&reference[2]

  aloadsi 1
  bloadsi 2
  ifb     labTrue
  acopyr  const : system'false
  quitn   2
  
labTrue:
  acopyr const : system'true
  quitn 2
  
end

procedure __object.get&throw[1]

  pop
  aloadsi 0
  throw
  
end

procedure __object."eval&setField$system@IntNumber$system@Object[3]"

  aloadsi 1
  flag
  andn elStructure
  elsen labErr 0
  len
  bcopya
  ecopyd
  aloadsi 2
  nload
  notless labErr
  lessn labErr 0
  aloadsi 3
  set
  bcopya
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __object."eval&getField$system@IntNumber[2]"

  aloadsi 1
  flag
  andn elStructure
  elsen labErr 0
  len
  bcopya
  ecopyd
  aloadsi 2
  nload
  notless labErr
  lessn labErr 0
  get
  quitn 2

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __object."eval&readLength$system@Object$@system@var#1&IntNumber[2]"

  ecopy 0
  aloadsi 1
  flag
  andn elStructure
  elsen labSkip 0
  len
  ecopyd 
labSkip:
  dcopye
  bloadsi 2
  nsave
  quitn 2

end

procedure __verb.dispatch[1]

  bloadsi 1
  ifb labDefault
  
  setverb 0
  nload
  or
  ecopyd
  aloadsi 1
  ajumpvi 0
  
labDefault:
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pusha
  pushr class : system'MethodNotFoundException
  pushr const : %"new$system'Object$system'Message[2]"
  throw
  
end

procedure __byte.get&inverted[1]

  newn   class : system'ByteNumber 4
  bcopya
  aloadsi 1    // ; load source
  nnot         // ; invert
  acopyb
  quitn 1
  
end

procedure __short.get&inverted[1]

  newn   class : system'ShortNumber 4
  bcopya
  aloadsi 1    // ; load source
  nnot         // ; invert
  acopyb
  quitn 1
  
end

procedure __int.get&inverted[1]

  newn   class : system'IntNumber 4
  bcopya
  aloadsi 1    // ; load source
  nnot         // ; invert
  acopyb
  quitn 1
  
end

procedure __int."eval&readHashCodeTo$@system@var#1&IntNumber[2]"

  bloadsi 2
  ncopy
  quitn 2

end

procedure __long.get&inverted[1]

  newn   class : system'LongNumber 8
  bcopya
  aloadsi 1    // ; load source
  lnot         // ; invert
  acopyb
  quitn 1
  
end

procedure __char."eval&readLengthTo$@system@var#1&IntNumber[2]"

  bloadsi 2
  nload
  // ; < 80 - 1
  ecopy 1
  lessn labEnd 80h
  eaddn 1
  // ; <= 800 - 2
  lessn labEnd 800h 
  eaddn 1
  lessn labEnd 10000h 
  // ; <= 10000 - 3
  eaddn 1
  // ; - 4
labEnd:
  dcopye
  nsave  
  quitn 2

end

procedure __byteconvertor."convert$system@ShortNumber$@system@var#1&ByteNumber[3]"

  aloadsi 2
  nload

  lessn labErr 0  
  lessn labCopy 0FFh

labErr:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  bloadsi 3
  nsave
  quitn 3  

end

procedure __byteconvertor."convert$system@IntNumber$@system@var#1&ByteNumber[3]"

  aloadsi 2
  nload
  
  lessn labErr 0  
  lessn labCopy 100h

labErr:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  bloadsi 3
  nsave
  quitn 3  

end

procedure __byteconvertor."convert$system@UIntNumber$@system@var#1&ByteNumber[3]"

  aloadsi 2
  nload  

  lessn labCopy 100h

labErr:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  bloadsi 3
  nsave
  quitn 3  

end

procedure __byteconvertor."convert$system@LongNumber$@system@var#1&ByteNumber[3]"

  aloadsi 2
  dcopy 4
  bread
  dcopye
  elsen labErr 0  

  nload

  lessn labErr 0  
  lessn labCopy 0FFh

labErr:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  bloadsi 3
  nsave
  quitn 3  

end

procedure __byteconvertor."convert$system@CharValue$@system@var#1&ByteNumber[3]"

  aloadsi 2
  nload
  
  lessn labErr 0  
  lessn labCopy 080h

labErr:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  bloadsi 3
  nsave
  quitn 3  

end

procedure __byteconvertor."convert$system@RealNumber$@system@var#1&ByteNumber[3]"

  pushn 0
  pushn 0
  acopys 0
  bcopya

  aloadsi 4
  rint

  acopyb
  rload
  dcopyr

  lessn labErr 0  
  lessn labCopy 0FFh

labErr:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  popi 2
  bloadsi 3
  nsave
  quitn 3  

end

procedure __byteconvertor."convert$system@LiteralValue$@system@var#1&ByteNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : strtoint
  nsave
  ifr      labErr 0

  aloadsi 3
  nload
  
  lessn labErr2 0  
  lessn labExit 0FFh
  
labErr2:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labExit:
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __byteconvertor."convert$system@WideLiteralValue$@system@var#1&ByteNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : wstrtoint
  nsave
  ifr      labErr 0

  aloadsi 3
  nload
  
  lessn labErr2 0  
  lessn labExit 0FFh
  
labErr2:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labExit:
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __shortconvertor."convert$system@ByteNumber$@system@var#1&ShortNumber[3]"

  aloadsi 2
  nload
  bloadsi 3
  nsave
  quitn 3  

end

procedure __shortconvertor."convert$system@IntNumber$@system@var#1&ShortNumber[3]"

  bloadsi 3
  aloadsi 2

  nload
  lessn labNegative 0

  lessn labCopy 8000h

  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  nsave
  quitn 3
  
labNegative:
  not

  lessn labCopyNeg 8000h

  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    
  
labCopyNeg:
  not
  nsave
  quitn 3  

end

procedure __shortconvertor."convert$system@UIntNumber$@system@var#1&ShortNumber[3]"

  bloadsi 3
  aloadsi 2

  nload

  lessn labCopy 8000h

  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  nsave
  quitn 3

end

procedure __shortconvertor."convert$system@LongNumber$@system@var#1&ShortNumber[3]"

  aloadsi 2
  dcopy 4
  bread
  dcopye
  lessn labNegative 0  
  elsen labErr 0  

  nload
  lessn labCopy 8000h  
  jump  labErr

labCopy:
  bloadsi 3
  nsave
  quitn 3  

labNegative:
  elsen labErr 0FFFFFFFFh
  nload
  not
  lessn labCopyNegative 8000h  

labErr:
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopyNegative:
  nload
  bloadsi 3
  nsave
  quitn 3  

end

procedure __shortconvertor."convert$system@CharValue$@system@var#1&ShortNumber[3]"

  aloadsi 2
  nload
  
  lessn labErr 0  
  lessn labCopy 08000h

labErr:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  bloadsi 3
  nsave
  quitn 3  

end

procedure __shortconvertor."convert$system@RealNumber$@system@var#1&ShortNumber[3]"

  pushn 0
  pushn 0
  acopys 0
  bcopya

  aloadsi 4
  rint

  acopyb
  rload
  dcopyr
  
  lessn labErr 0FFFF8000h
  lessn labCopy 08000h

labErr:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labCopy:
  popi 2
  bloadsi 3
  nsave
  quitn 3  

end

procedure __shortconvertor."convert$system@LiteralValue$@system@var#1&ShortNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : strtoint
  nsave
  ifr      labErr 0
  
  aloadsi 3
  nload
  
  lessn labErr2 0FFFF8000h
  lessn labExit 08000h
  
labErr2:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labExit:
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __shortconvertor."convert$system@WideLiteralValue$@system@var#1&ShortNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : wstrtoint
  nsave
  ifr      labErr 0

  aloadsi 3
  nload
  
  lessn labErr2 0FFFF8000h
  lessn labExit 08000h
  
labErr2:  
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

labExit:
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __charconvertor."convert$system@ByteNumber$@system@var#1&CharValue[3]"
  
  bloadsi 3
  aloadsi 2
  nload

  lessn labErr 0
  lessn labCopy 080h

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

labCopy:

  nsave
  acopyb
  quitn 3

end

procedure __charconvertor."convert$system@ShortNumber$@system@var#1&CharValue[3]"
  
  bloadsi 3
  aloadsi 2
  nload

  lessn labErr 0
  lessn labCopy 010000h

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

labCopy:

  nsave
  acopyb
  quitn 3

end

procedure __charconvertor."convert$system@IntNumber$@system@var#1&CharValue[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  
  lessn labErr 0
  lessn labCopy 110000h

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

labCopy:

  nsave
  acopyb
  quitn 3

end

procedure __charconvertor."eval&system#convert$system@IntNumber$system@LiteralValue$@system@var#1&CharValue[4]"
  
  aloadsi 2
  nload
  aloadsi 3

  callextr api : strtochar
  ifr   labErr 0

  dcopye
  bloadsi 4
  nsave
  acopyb
  quitn 4

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __charconvertor."eval&system#convert$system@IntNumber$system@ByteArray$@system@var#1&CharValue[4]"
  
  aloadsi 2
  nload
  aloadsi 3

  callextr api : strtochar
  ifr   labErr 0

  dcopye
  bloadsi 4
  nsave
  acopyb
  quitn 4

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __charconvertor."eval&system#convert$system@IntNumber$system@WideLiteralValue$@system@var#1&CharValue[4]"
  
  aloadsi 2
  nload
  aloadsi 3

  callextr api : wstrtochar
  ifr   labErr 0

  dcopye
  bloadsi 4
  nsave
  acopyb
  quitn 4

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __charconvertor."eval&system#convert$system@IntNumber$system@ShortArray$@system@var#1&CharValue[4]"
  
  aloadsi 2
  nload
  aloadsi 3

  callextr api : wstrtochar
  ifr   labErr 0

  dcopye
  bloadsi 4
  nsave
  acopyb
  quitn 4

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __charconvertor."eval&system#save$system@CharValue$system@IntNumber$system@ShortArray$@system@var#1&IntNumber[5]"

  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  bloadsi 4
  callextr api : chartoshorts
  dcopye
  bloadsi 5
  nsave
  
  quitn 5

end

procedure __charconvertor."eval&system#save$system@CharValue$system@IntNumber$system@ByteArray$@system@var#1&IntNumber[5]"

  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  bloadsi 4
  callextr api : chartobytes
  dcopye
  bloadsi 5
  nsave
  
  quitn 5

end

procedure __intconvertor."convert$system@ShortNumber$@system@var#1&IntNumber[3]"

  aloadsi 2
  nload
  bloadsi 3
  nsave
  quitn 3

end

procedure __intconvertor."convert$system@ByteNumber$@system@var#1&IntNumber[3]"

  aloadsi 2
  nload
  bloadsi 3
  nsave
  quitn 3

end

procedure __intconvertor."convert$system@LongNumber$@system@var#1&IntNumber[3]"

  aloadsi 2
  dcopy 4
  bread
  dcopye
  lessn labNegative 0  
  elsen labErr 0  

  nload
  bloadsi 3
  nsave
  quitn 3  

labNegative:
  elsen labErr 0FFFFFFFFh

  nload
  bloadsi 3
  nsave
  quitn 3  

labErr:
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

end

procedure __uintconvertor."convert$system@LongNumber$@system@var#1&IntNumber[3]"

  aloadsi 2
  dcopy 4
  bread
  dcopye

  elsen labErr 0  

  nload
  bloadsi 3
  nsave
  quitn 3  

labErr:
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw    

end

procedure __intconvertor."convert$system@LiteralValue$@system@var#1&IntNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : strtoint
  nsave
  ifr      labErr 0
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __intconvertor."eval&convertUnsigned$system@LiteralValue$@system@var#1&IntNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : strtouint
  nsave
  ifr      labErr 0
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __intconvertor."convert$system@LiteralValue$system@IntNumber$@system@var#1&IntNumber[4]"
  
  bloadsi  4
  aloadsi  3
  nload
  ecopyd   
  aloadsi  2
  callextr api : strtoint
  nsave
  ifr      labErr 0
  quitn    4

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __intconvertor."convert$system@WideLiteralValue$@system@var#1&IntNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : wstrtoint
  nsave
  ifr      labErr 0
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __intconvertor."convert$system@WideLiteralValue$system@IntNumber$@system@var#1&IntNumber[4]"
  
  bloadsi  4
  aloadsi  3
  nload
  ecopyd   
  aloadsi  2
  callextr api : wstrtoint
  nsave
  ifr      labErr 0
  quitn    4

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __intconvertor."convert$system@CharValue$@system@var#1&IntNumber[3]"

  aloadsi 2
  nload
  bloadsi 3
  nsave
  quitn 3

end

procedure __intconvertor."convert$system@RealNumber$@system@var#1&IntNumber[3]"

  aloadsi 2
  bloadsi 3  
  rload
  dcopyr
  nsave
  aloadsi 1
  quitn 3

end


procedure __longconvertor."convert$system@IntNumber$@system@var#1&LongNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  nsave
  lessn labNegative 0
  dcopy 0
  nsavei 1
  acopyb
  quitn 3

labNegative:
  dcopy 0FFFFFFFFh
  nsavei 1
  acopyb
  quitn 3

end

procedure __longconvertor."convert$system@UIntNumber$@system@var#1&LongNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  nsave
  dcopy 0
  nsavei 1
  acopyb
  quitn 3

end

procedure __longconvertor."convert$system@ShortNumber$@system@var#1&LongNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  nsave
  dcopy 0
  nsavei 1
  acopyb
  quitn 3

end

procedure __longconvertor."convert$system@ByteNumber$@system@var#1&LongNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  nsave
  dcopy 0
  nsavei 1
  acopyb
  quitn 3

end

procedure __longconvertor."convert$system@LiteralValue$@system@var#1&LongNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : strtolong
  nsave
  dcopye
  nsavei   1
  ifr      labErr 0
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __longconvertor."convert$system@LiteralValue$system@IntNumber$@system@var#1&LongNumber[4]"
  
  bloadsi  4
  aloadsi  3
  nload
  ecopyd   
  aloadsi  2
  callextr api : strtolong
  nsave
  dcopye
  nsavei   1
  ifr      labErr 0
  quitn    4

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __longconvertor."convert$system@WideLiteralValue$@system@var#1&LongNumber[3]"
  
  bloadsi  3
  ecopy    10
  aloadsi  2
  callextr api : wstrtolong
  nsave
  dcopye
  nsavei   1
  ifr      labErr 0
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __longconvertor."convert$system@WideLiteralValue$system@IntNumber$@system@var#1&LongNumber[4]"
  
  bloadsi  4
  aloadsi  3
  nload
  ecopyd   
  aloadsi  2
  callextr api : wstrtolong
  nsave
  dcopye
  nsavei   1
  ifr      labErr 0
  quitn    4

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __longconvertor."convert$system@RealNumber$@system@var#1&LongNumber[3]"

  aloadsi 2
  bloadsi 3
  rload
  nsave
  dcopy 0
  nsavei 1
  aloadsi 1
  quitn 3

end

procedure __realconvertor."convert$system@IntNumber$@system@var#1&RealNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  rcopy
  rsave
  acopyb
  quitn 3

end

procedure __realconvertor."convert$system@UIntNumber$@system@var#1&RealNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  rcopy
  rsave
  acopyb
  quitn 3

end

procedure __realconvertor."convert$system@ByteNumber$@system@var#1&RealNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  rcopy
  rsave
  acopyb
  quitn 3

end

procedure __realconvertor."convert$system@ShortNumber$@system@var#1&RealNumber[3]"
  
  bloadsi 3
  aloadsi 2
  nload
  rcopy
  rsave
  acopyb
  quitn 3

end

procedure __realconvertor."convert$system@LongNumber$@system@var#1&RealNumber[3]"
  
  bcopya
  aloadsi 2
  callextr api : longtoreal
  acopyb
  quitn 3

end


procedure __realconvertor."convert$system@LiteralValue$@system@var#1&RealNumber[3]"
  
  bloadsi  3
  dcopy    10
  aloadsi  2
  callextr api : strtoreal
  ifr      labErr 0
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __realconvertor."convert$system@WideLiteralValue$@system@var#1&RealNumber[3]"
  
  bloadsi  3
  dcopy    10
  aloadsi  2
  callextr api : wstrtoreal
  ifr      labErr 0
  quitn    3

labErr:
  open 1
  pushr class : system'FormatException
  pushr const : %new[0]
  throw

end

procedure __bytearray."eval&readLengthTo$@system@var#1&IntNumber[2]"

  blen
  bloadsi 2
  nsave
  quitn 2                                                          

end

procedure __bytearray."read&$system@IntNumber$system@IntNumber$system@ByteArray[4]"

  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  acopyb

  bloadsi 4
  callextr api : subcopy
  quitn 4
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."write&$system@IntNumber$system@IntNumber$system@ByteArray[4]"

  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  pushd
  add
  ecopyd
  acopyb
  blen
  less labErr
  pope
  aloadsi 2
  nload
  aloadsi 4
  callextr api : insert
  quitn 4

labErr:
  pop
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."write&$system@IntNumber$system@ByteNumber[3]"

  blen
  ecopyd
  bcopya
  aloadsi 2
  nload
  notless labErr
  nload
  ecopyd
  aloadsi 3
  nload
  eswap
  bwriteb
  quitn 3

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read&$system@IntNumber$@system@var#1&ByteNumber[3]"

  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  breadb
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."write&$system@IntNumber$system@ShortNumber[3]"

  blen
  ecopyd
  bcopya
  aloadsi 2
  nload
  addn 3
  notless labErr
  nload
  ecopyd
  aloadsi 3
  nload
  eswap
  bwritew
  quitn 3

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read&$system@IntNumber$@system@var#1&ShortNumber[3]"

  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  breadw
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."write&$system@IntNumber$system@CharValue[3]"

  blen
  ecopyd
  bcopya
  aloadsi 2
  nload
  addn 3
  notless labErr
  nload
  ecopyd
  aloadsi 3
  nload
  eswap
  bwrite
  quitn 3

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read&$system@IntNumber$@system@var#1&CharValue[3]"

  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  bread
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."write&$system@IntNumber$system@IntNumber[3]"

  blen
  ecopyd
  bcopya
  aloadsi 2
  nload
  addn 3
  notless labErr
  nload
  ecopyd
  aloadsi 3
  nload
  eswap
  bwrite
  quitn 3

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read&$system@IntNumber$@system@var#1&IntNumber[3]"

  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  bread
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."write&$system@IntNumber$system@LongNumber[3]"

  blen
  bcopya
  ecopyd
  aloadsi 2
  nload
  addn 7
  notless labErr

  nload
  aloadsi 3
  ecopy 8
  callextr api : insert
  quitn 3

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."write&$system@IntNumber$system@RealNumber[3]"

  blen
  bcopya
  ecopyd
  aloadsi 2
  nload
  addn 7
  notless labErr

  nload
  aloadsi 3
  ecopy 8
  callextr api : insert
  quitn 3

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read&$system@IntNumber$@system@var#1&RealNumber[3]"

  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  bloadsi 3
  ecopy 8
  callextr api : subcopy
  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."read&$system@IntNumber$@system@var#1&LongNumber[3]"

  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  bloadsi 3
  ecopy 8
  callextr api : subcopy
  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __bytearray."eval&move$system@IntNumber$system@IntNumber$system@IntNumber[4]"

  pusha 

  // ; insert
  aloadsi 4
  nload
  ecopyd
  aloadsi 3
  nload
  bloadsi  0
  aloadsi 5
  pushai 0

  callextr api : move

  pop  
  popa
  quitn 4
  
end

procedure __shortarray."eval&readLengthTo$@system@var#1&IntNumber[2]"

  wlen
  bloadsi 2
  nsave
  quitn 2

end

procedure __shortarray."read&$system@IntNumber$system@IntNumber$system@ShortArray[4]"

  bcopya
  wlen
  ecopyd
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0

  aloadsi 3
  pushe
  ecopyd
  nload
  add
  pope
  notless labErr
  lessn   labErr 0

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  acopyb
  bloadsi 4
  callextr api : wsubcopy
  
  quitn 4
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __shortarray."write&$system@IntNumber$system@IntNumber$system@ShortArray[4]"

  bcopya
  wlen
  ecopyd
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0

  aloadsi 3
  pushe
  ecopyd
  nload
  add
  pope
  notless labErr
  lessn   labErr 0

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  callextr api : winsert
  
  acopyb
  quitn 4
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __shortarray."write&$system@IntNumber$system@ShortNumber[3]"

  wlen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  ecopyd
  aloadsi 3
  nload
  eswap
  shiftn -1
  bwritew
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw  

end

procedure __shortarray."read&$system@IntNumber$@system@var#1&ShortNumber[3]"

  wlen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  eaddn -1
  notless labErr
  lessn   labErr 0

  acopyb
  shiftn -1
  breadw
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __intarray."eval&readLengthTo$@system@var#1&IntNumber[2]"

  aloadsi 1
  nlen
  bloadsi 2
  nsave
  quitn 2

end

procedure __intarray."read&$system@IntNumber$system@IntNumber$system@IntArray[4]"

  aloadsi 1
  bcopya
  nlen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
  ecopyd
  aloadsi 3
  nload
  lessn   labErr 0
  add
  nlen
  less labErr
 
  aloadsi 3
  nload
  eswap

  acopyb
  bloadsi 4
  callextr api : nsubcopy
  quitn 4
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __intarray."write&$system@IntNumber$system@IntNumber$system@IntArray[4]"

  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  pushd
  add
  ecopyd
  acopyb
  nlen
  less labErr
  pope
  aloadsi 2
  nload
  aloadsi 4
  callextr api : ninsert
  quitn 4

labErr:
  pop
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __intarray."write&$system@IntNumber$system@IntNumber[3]"

  nlen
  bcopya
  ecopyd
  aloadsi 2
  nload
  notless labErr
  ecopyd
  aloadsi 3
  nload
  eswap  
  nwrite
  quitn 3

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __intarray."read&$system@IntNumber$@system@var#1&IntNumber[3]"

  bcopya
  nlen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  nread
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __realarray."read&$system@IntNumber$system@IntNumber$system@RealArray[4]"

  aloadsi 1
  bcopya
  blen
  shiftn 3
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
  ecopyd
  aloadsi 3
  nload
  lessn   labErr 0
  add
  blen
  shiftn 3
  less labErr
 
  aloadsi 3
  nload
  shiftn -1
  eswap
  shiftn -1

  acopyb
  bloadsi 4

  callextr api : nsubcopy
  quitn 4
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __realarray."write&$system@IntNumber$system@IntNumber$system@RealArray[4]"

  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  pushd
  add
  ecopyd
  acopyb
  blen
  shiftn 3
  less labErr
  popd
  shiftn -1
  ecopyd
  aloadsi 2
  nload
  shiftn -1
  aloadsi 4
  callextr api : ninsert
  quitn 4

labErr:
  pop
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __realarray."read&$system@IntNumber$@system@var#1&RealNumber[3]"

  bcopya
  blen
  shiftn 3 
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  shiftn -1
  acopyb
  bloadsi 3
  nread
  nwritei 0
  inc
  nread
  nwritei 1

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __chararray."read&$system@IntNumber$system@IntNumber$system@CharArray[4]"

  bcopya
  nlen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  aloadsi 3
  nload
  acopyb

  bloadsi 4
  callextr api : nsubcopy
  quitn 4
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __chararray."write&$system@IntNumber$system@IntNumber$system@CharArray[4]"

  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 3
  nload
  pushd
  add
  ecopyd
  acopyb
  nlen
  less labErr
  pope
  aloadsi 2
  nload
  aloadsi 4
  callextr api : ninsert
  quitn 4

labErr:
  pop
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __chararray."write&$system@IntNumber$system@CharValue[3]"

  nlen
  bcopya
  ecopyd
  aloadsi 2
  nload
  notless labErr
  ecopyd
  aloadsi 3
  nload
  eswap  
  nwrite
  quitn 3

labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __chararray."read&$system@IntNumber$@system@var#1&CharValue[3]"

  bcopya
  nlen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  nread
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __chararray."eval&move$system@IntNumber$system@IntNumber$system@IntNumber[4]"

  pusha 

  // ; insert
  aloadsi 4
  nload
  ecopyd
  aloadsi 3
  nload
  bloadsi  0
  aloadsi 5
  pushai 0

  callextr api : nmove

  pop  
  popa
  quitn 4
  
end

procedure __literal."eval&readLengthTo$@system@var#1&IntNumber[2]"

  aloadsi 1
  blen
  dec
  bloadsi 2
  nsave
  quitn 2

end

procedure __literal."eval&copy$system@LiteralValue$system@IntNumber$system@IntNumber$system@ByteArray[4]"

  bloadsi 1
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  
  callextr api : subcopyz
  
  acopyb
  quitn 4

end

procedure __literal."eval&Substring$system@IntNumber$system@IntNumber[3]"

  // ; calculate length
  aloadsi 3
  nload
  inc

  // ; create a new string  
  acopyr class : system'LiteralValue
  bcreate
  bcopya

  aloadsi 3
  nload
  ecopyd
  
  aloadsi 2
  nload

  aloadsi 1
  callextr api : subcopyz
  acopyb

  quitn 3

end

procedure __literal."add&$system@LiteralValue[2]"

  blen
  dec
  ecopyd
  bcopya
  aloadsi 2
  blen
  add
  acopyr class : system'LiteralValue
  bcreate
  bswap
  blen
  dec
  ecopyd
  dcopy 0
  callextr api : insert
  ecopyd
  aloadsi 2
  blen
  eswap
  callextr api : insert
  acopyb

  quitn 2

end                                                

procedure __literal."equal&$system@LiteralValue[2]"

  bloadsi 2
  callextr api : sequal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __literal."less&$system@LiteralValue[2]"

  bloadsi 2
  callextr api : sless
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __literal."read&$system@IntNumber$@system@var#1&ByteNumber[3]"

  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  breadb
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __literal."read&$system@IntNumber$@system@var#1&CharValue[3]"

  blen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  acopyb  
  callextr api : strtochar
  ifr labErr 0
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __literal."eval&indexOf$system@IntNumber$system@LiteralValue$@system@var#1&IntNumber[4]"

  bcopya
  aloadsi 2                 // ; load index
  nload
  aloadsi 3                 // ; load searching str
  callextr api : sseek
  acopyb
  bloadsi 4                 // ; load target
  nsave                    // ; save index
  quitn 4

end

procedure __literal."eval&indexOf$system@IntNumber$system@CharValue$@system@var#1&IntNumber[4]"

  pusha
  aloadsi 4
  pushn 0
  pushn 0
  bcopys 0
  pushn 0
  callextr api : chartostr
  eaddn 1
  pushe

  aloadsi 7                 // ; load index
  nload
  acopys 2
  bloadsi 4
  callextr api : sseek
  bloadsi 9                // ; load target
  nsave                    // ; save index
  popi 4
  popa
  quitn 4

end

procedure __literal."eval&insert$system@IntNumber$system@LiteralValue[3]"

  // ; calculate length
  blen
  dec
  ecopyd
  
  aloadsi 3
  blen
  add

  acopyr class : system'LiteralValue
  bcreate

  // ; copy left side               
  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 1
  dcopy 0
  callextr api : insert

  // ; insert
  aloadsi 3
  ecopyd
  blen
  dec
  eswap
  callextr api : insert
  
  // ; copy right side 
  ecopyd
  aloadsi 2
  nload  
  eswap
  aloadsi 1
  callextr api : sadd

  acopyb
  quitn 3
  
end

procedure __literal."eval&delete$system@IntNumber$system@IntNumber[3]"

  bcopya

  // ; calculate length
  aloadsi 3
  nload
  ecopyd

  acopyb
  blen
  sub

  acopyr class : system'LiteralValue
  bcreate

  // ; copy left side               
  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 1
  dcopy 0
  callextr api : insert

  // ; copy right side 
  ecopyd          
  aloadsi 3
  nload
  add
  eswap
  aloadsi 1
  callextr api : sadd

  acopyb
  quitn 3
  
end

procedure __literal."eval&save$system@IntNumber$system@CharArray$@system@var#1&IntNumber[4]"

  pusha
  bloadsi 4
  aloadsi 5
  nload
  ecopyd
  aloadsi 3
  nload
  aloadsi 0
  callextr api : strtochararray
  bloadsi 5
  dcopye
  nsave
  popa

  quitn 4

end

procedure __literal."eval&system#save$system@IntNumber$system@ByteArray$system@IntNumber[4]"

  pusha
  bloadsi 4
  aloadsi 5
  nload
  ecopyd
  aloadsi 3
  nload
  aloadsi 0

  pushe                                               
  pushd
  dcopy 0

labNext:
  esavesi 1
  breadb
  inc
  dswapsi 0
  bwriteb
  inc
  eloadsi 1
  dswapsi 0
  less labNext

  popi 2
  popa

  quitn 4

end

procedure __literal."new&$system@IntNumber$system@IntNumber$system@CharArray[4]"

  aloadsi 3
  nload
  ifn labEmpty 0
    
  aloadsi 4
  ecopyd
  callextr api : slen_ch
            
  acopyr class : system'LiteralValue
  inc
  bcreate
  bcopya

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4

  callextr api : s_copychars
  
  acopyb
  blen
  ecopy 0
  dec
  bwriteb
  quitn 4
  
labEmpty:
  dcopy 1
  acopyr class : system'LiteralValue
  bcreate
  bcopya
  dcopy 0
  nsave
  acopyb
  quitn 4

end

procedure __literal."eval&readHashCodeTo$@system@var#1&IntNumber[2]"

  bloadsi 2
  ncopy
  quitn 2

end
procedure __literal."new&$system@IntNumber$system@CharValue[3]"
  
  pusha

  aloadsi 4
  nload
  pushd
  acopys 0
  pushn 0
  pushn 0
  bcopys 0
  
  callextr api : chartostr
  dcopye

  ifn lab1 1 
  ifn lab2 2
  ifn lab3 3

  aloadsi 6
  nload
  shiftn -2
  pushd
  inc
  aloadsi 4
  acallvi 1

  bcopya
  popd
  ecopyd
  dcopy 0

labNext4:
  eswapsi 0
  bwrite
  eswapsi 0
  addn 3
  next labNext4
  jump labEnd  
  
lab1:  
  aloadsi 6
  nload
  pushd
  inc
  aloadsi 4
  
  acallvi 1
  bcopya

  popd
  ecopyd
  dcopy 0

labNext1:
  eswapsi 0
  bwriteb
  eswapsi 0
  next labNext1
  jump labEnd  
    
lab2:
  aloadsi 6
  nload
  shiftn -1
  pushd
  inc
  aloadsi 4
  
  acallvi 1
  bcopya

  popd
  ecopyd
  dcopy 0
  
labNext2:
  eswapsi 0
  bwritew
  eswapsi 0
  addn 1
  next labNext2
  jump labEnd  

lab3:
  aloadsi 6
  nload
  muln 3
  pushd
  inc
  aloadsi 4
  acallvi 1

  bcopya
  popd
  ecopyd
  dcopy 0

labNext3:
  eswapsi 0
  bwrite
  eswapsi 0
  addn 2
  next labNext3

labEnd:
  popi 4
  ecopy 0
  bwriteb

  acopyb
  quitn 3
  
end

procedure __literal."eval&copy$system@LiteralValue$system@LiteralValue[2]"

  aloadsi 2
  bcopya
  aloadsi 3
  copy
  acopyb
  quitn 2

end

procedure __wide."eval&readLengthTo$@system@var#1&IntNumber[2]"

  aloadsi 1
  wlen
  dec
  bloadsi 2
  nsave
  quitn 2

end

procedure __wide."eval&Substring$system@IntNumber$system@IntNumber[3]"

  // ; calculate length
  aloadsi 3
  nload
  inc

  // ; create a new string  
  acopyr class : system'WideLiteralValue
  wcreate
  bcopya

  aloadsi 3
  nload
  ecopyd
  
  aloadsi 2
  nload

  aloadsi 1
  callextr api : wsubcopyz
  acopyb

  quitn 3

end

procedure __wide."add&$system@WideLiteralValue[2]"

  wlen
  dec
  ecopyd
  bcopya
  aloadsi 2
  wlen
  add
  acopyr class : system'WideLiteralValue
  wcreate
  bswap
  wlen
  dec
  ecopyd
  dcopy 0
  callextr api : winsert
  ecopyd
  aloadsi 2
  wlen
  eswap
  callextr api : winsert
  acopyb

  quitn 2

end                                                

procedure __wide."eval&copy$system@WideLiteralValue$system@IntNumber$system@IntNumber$system@ShortArray[4]"

  bloadsi 1
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  
  callextr api : wsubcopyz
  
  acopyb
  quitn 4

end

procedure __wide."equal&$system@WideLiteralValue[2]"

  bloadsi 2
  callextr api : wequal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __wide."less&$system@WideLiteralValue[2]"

  bloadsi 2
  callextr api : wless
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __wide."read&$system@IntNumber$@system@var#1&CharValue[3]"

  wlen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  acopyb  
  callextr api : wstrtochar
  ifr labErr 0
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __wide."read&$system@IntNumber$@system@var#1&ShortNumber[3]"

  wlen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  eaddn -1
  notless labErr
  lessn   labErr 0

  acopyb
  shiftn -1
  breadw
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __wide."eval&indexOf$system@IntNumber$system@WideLiteralValue$@system@var#1&IntNumber[4]"

  bcopya
  aloadsi 2                 // ; load index
  nload
  aloadsi 3                 // ; load searching str
  callextr api : wseek
  acopyb
  bloadsi 4                 // ; load target
  nsave                    // ; save index
  quitn 4

end

procedure __wide."eval&indexOf$system@IntNumber$system@CharValue$@system@var#1&IntNumber[4]"

  pusha
  aloadsi 4
  pushn 0
  bcopys 0
  pushn 0
  callextr api : chartowstr
  eaddn 1
  pushe

  aloadsi 7                 // ; load index
  nload
  acopys 2
  bloadsi 4
  callextr api : wseek
  bloadsi 9                // ; load target
  nsave                    // ; save index
  popi 4
  popa
  quitn 4
  
end

procedure __wide."eval&insert$system@IntNumber$system@WideLiteralValue[3]"

  // ; calculate length
  wlen
  dec
  ecopyd
  
  aloadsi 3
  wlen
  add

  acopyr class : system'WideLiteralValue
  wcreate

  // ; copy left side               
  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 1
  dcopy 0
  callextr api : winsert

  // ; insert
  aloadsi 3
  ecopyd
  wlen
  dec
  eswap
  callextr api : winsert
  
  // ; copy right side 
  ecopyd
  aloadsi 2
  nload  
  eswap
  aloadsi 1
  callextr api : wadd

  acopyb
  quitn 3
  
end

procedure __wide."eval&delete$system@IntNumber$system@IntNumber[3]"

  bcopya

  // ; calculate length
  aloadsi 3
  nload
  ecopyd

  acopyb
  wlen
  sub

  acopyr class : system'WideLiteralValue
  wcreate

  // ; copy left side               
  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 1
  dcopy 0
  callextr api : winsert                  

  // ; copy right side 
  ecopyd          
  aloadsi 3
  nload
  add
  eswap
  aloadsi 1
  callextr api : wadd

  acopyb
  quitn 3
  
end

procedure __wide."eval&save$system@IntNumber$system@CharArray$@system@var#1&IntNumber[4]"

  pusha
  bloadsi 4
  aloadsi 5
  nload
  ecopyd
  aloadsi 3
  nload
  aloadsi 0
  callextr api : wstrtochararray
  bloadsi 5
  dcopye
  nsave
  popa
  
  quitn 4

end

procedure __wide."eval&system#save$system@IntNumber$system@ShortArray$system@IntNumber[4]"

  pusha
  bloadsi 4
  aloadsi 5
  nload
  ecopyd
  aloadsi 3
  nload
  aloadsi 0

  pushe                                               
  pushd
  dcopy 0

labNext:
  esavesi 1
  wread
  inc
  dswapsi 0
  wwrite
  inc
  eloadsi 1
  dswapsi 0
  less labNext

  popi 2
  popa

  quitn 4

end

procedure __wide."new&$system@IntNumber$system@IntNumber$system@CharArray[4]"
  
  aloadsi 3
  nload
  ifn labEmpty 0
    
  aloadsi 4
  ecopyd
  callextr api : wslen_ch

  acopyr class : system'WideLiteralValue
  inc
  wcreate
  bcopya
  
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4

  callextr api : ws_copychars
  
  acopyb
  wlen
  ecopy 0
  dec
  shiftn -1
  bwritew
  quitn 4
  
labEmpty:
  dcopy 1
  acopyr class : system'WideLiteralValue
  wcreate
  bcopya
  dcopy 0
  nsave
  acopyb
  quitn 4  

end

procedure __wide."eval&readHashCodeTo$@system@var#1&IntNumber[2]"

  bloadsi 2
  ncopy
  quitn 2

end

procedure __wide."new&$system@IntNumber$system@CharValue[3]"
  
  pusha

  aloadsi 4
  nload
  pushd
  acopys 0
  pushn 0
  pushn 0
  bcopys 0

  callextr api : chartowstr
  dcopye

  ifn labFill 1 

  aloadsi 6
  nload
  shiftn -1
  pushd
  inc
  aloadsi 4
  acallvi 1

  bcopya
  popd
  shiftn -1
  ecopyd
  dcopy 0

labNext2:
  eswapsi 0
  bwrite
  eswapsi 0
  addn 3
  next labNext2
  jump labEnd  
  
labFill:
  aloadsi 6
  nload
  pushd
  inc
  aloadsi 4
  acallvi 1

  bcopya
  popd
  shiftn -1
  ecopyd
  dcopy 0

labNext:
  eswapsi 0
  bwritew
  eswapsi 0
  inc
  next labNext

labEnd:
  popi 4
  ecopy 0
  bwritew

  acopyb
  quitn 3
  
end

procedure __wide."eval&copy$system@WideLiteralValue$system@WideLiteralValue[2]"

  bcopya
  aloadsi 2
  nload
  inc
  acopyb
  acallvi 1

  bcopya
  aloadsi 3
  copy
  acopyb
  quitn 2

end

procedure __array."eval&readLengthTo$@system@var#1&IntNumber[2]"

  len
  bloadsi 2
  nsave
  quitn 2

end

procedure __array."getAt&$system@IntNumber[2]"

  bcopya
  len
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  get
  quitn 2

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __array."setAt&$system@IntNumber$system@Object[3]"

  bcopya
  len
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  aloadsi 3
  set
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __array."eval&copy$system@Array$system@IntNumber$system@IntNumber$system@Array[4]"

  aloadsi 1
  bcopya
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  callextr api : nsubcopy
  
  acopyb
  quitn 4
  
end

procedure __array."eval&reallocate$system@IntNumber[2]"

  aloadsi 1
  flag
  andn elStructure
  elsen labErr 0
  bcopya
  aloadsi 2
  nload
  class
  create
  bloadsi 1
  count
  dcopye        // ; index - old length
  bcopya
  count         // ; ext - new length
  less labExpand

  aloadsi 1

  pusha
  count
  dcopy 0
labCopy:
  get
  bswapsi 0
  xset
  bswapsi 0
  next labCopy
  pop

  acopyb
  quitn 2

labExpand:
  ecopyd
  dcopy 0
  pushb
labNext:
  bloadsi 2
  get
  bloadsi 0
  xset
  inc
  less labNext

  count
  acopyr const : system'nil
labNext2:
  xset
  inc
  less labNext2
  popa
  quitn 2

end

procedure __args."eval&readLengthTo$@system@var#1&IntNumber[2]"

  aloadsi 1
  bcopya
  dcopy 0
labSearch:
  get
  inc
  elser labSearch 0
  dec
  ecopyd
  bloadsi 2
  nsave
  quitn 2

end

procedure __literalconvertor."convert$system@IntNumber$system@ByteArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor."convert$system@UIntNumber$system@ByteArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : uinttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor."convert$system@WideLiteralValue$system@ByteArray$@system@var#1&IntNumber[4]"

  aloadsi 2
  bloadsi 3
  callextr api : wstrtostr
  bloadsi 4
  nwritei 0
  quitn 4
  
end

procedure __literalconvertor."convert$system@IntNumber$system@IntNumber$system@ByteArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : inttostr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __literalconvertor."convert$system@UIntNumber$system@IntNumber$system@ByteArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : uinttostr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __literalconvertor."convert$system@ShortNumber$system@ByteArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor."convert$system@ByteNumber$system@ByteArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor."convert$system@LongNumber$system@ByteArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : longtostr

  bloadsi 4
  nwritei 0

  quitn 4


end

procedure __literalconvertor."convert$system@RealNumber$system@ByteArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 24
  
  callextr api : realtostr

  bloadsi 4
  nwritei 0

  quitn 4
end

procedure __literalconvertor."convert$system@CharValue$system@ByteArray$@system@var#1&IntNumber[4]"

  aloadsi 2
  nload
  ifn labEmpty 0

  bloadsi 3

  callextr api : chartostr
  bloadsi 4
  nwritei 0
  quitn 4
  
labEmpty:
  ecopy 0
  bloadsi 4
  nwritei 0
  quitn 4

end

procedure __literalconvertor."convert$system@ShortNumber$system@IntNumber$system@ByteArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : inttostr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __literalconvertor."convert$system@ByteNumber$system@IntNumber$system@ByteArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : inttostr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __literalconvertor."convert$system@LongNumber$system@IntNumber$system@ByteArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : longtostr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __wideconvertor."convert$system@LiteralValue$system@ShortArray$@system@var#1&IntNumber[4]"

  aloadsi 2
  bloadsi 3
  callextr api : strtowstr
  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __wideconvertor."convert$system@IntNumber$system@IntNumber$system@ShortArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : inttowstr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __wideconvertor."convert$system@UIntNumber$system@IntNumber$system@ShortArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : uinttowstr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __wideconvertor."convert$system@IntNumber$system@ShortArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttowstr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __wideconvertor."convert$system@UIntNumber$system@ShortArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : uinttowstr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __wideconvertor."convert$system@ShortNumber$system@ShortArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttowstr

  bloadsi 4
  nwritei 0

  quitn 4
  
end

procedure __wideconvertor."convert$system@ByteNumber$system@ShortArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttowstr

  bloadsi 4
  nwritei 0

  quitn 4
  
end

procedure __wideconvertor."convert$system@LongNumber$system@ShortArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : longtowstr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __wideconvertor."convert$system@RealNumber$system@ShortArray$@system@var#1&IntNumber[4]"

  bloadsi 3
  aloadsi 2
  dcopy 24
  
  callextr api : realtowstr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __wideconvertor."convert$system@CharValue$system@ShortArray$@system@var#1&IntNumber[4]"

  aloadsi 2
  nload
  ifn labEmpty 0

  bloadsi 3
  aloadsi 2
  callextr api : chartowstr
  bloadsi 4
  nwritei 0
  quitn 4

labEmpty:
  ecopy 0
  bloadsi 4
  nwritei 0
  quitn 4

end

procedure __wideconvertor."convert$system@ShortNumber$system@IntNumber$system@ShortArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : inttowstr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __wideconvertor."convert$system@ByteNumber$system@IntNumber$system@ShortArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : inttowstr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __wideconvertor."convert$system@LongNumber$system@IntNumber$system@ShortArray$@system@var#1&IntNumber[5]"

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : longtowstr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __real."eval&exp$system@RealNumber$@system@var#1&RealNumber[3]"

  aloadsi 2
  bloadsi 3
  rexp

  quitn 3

end

procedure __real."eval&ln$system@RealNumber$@system@var#1&RealNumber[3]"

  aloadsi 2  
  bloadsi 3
  rln

  quitn 3

end

procedure __real."eval&round$system@RealNumber$@system@var#1&RealNumber[3]"

  aloadsi 2  
  bloadsi 3
  rround
  
  quitn 3

end

procedure __real."eval&truncate$system@RealNumber$@system@var#1&RealNumber[3]"

  aloadsi 2  
  bloadsi 3
  rint
  
  quitn 3

end

procedure __real."eval&sin$system@RealNumber$@system@var#1&RealNumber[3]"

  aloadsi 2
  bloadsi 3
  rsin
  
  quitn 3

end

procedure __real."eval&cos$system@RealNumber$@system@var#1&RealNumber[3]"

  aloadsi 2
  bloadsi 3
  rcos
  
  quitn 3

end

procedure __real."eval&arctan$system@RealNumber$@system@var#1&RealNumber[3]"

  aloadsi 2
  bloadsi 3
  rarctan
  
  quitn 3
  
end

procedure __real."eval&pi$@system@var#1&RealNumber[2]"

  bloadsi 2
  callextr api : rpi
  
  quitn 2
  
end

procedure __real."eval&sqrt$system@RealNumber$@system@var#1&RealNumber[3]"

  aloadsi 2  
  bloadsi 3
  callextr api : rsqrt

  quitn 3

end

procedure __real."eval&abs$system@RealNumber$@system@var#1&RealNumber[3]"

  aloadsi 2
  bloadsi 3
  rabs

  quitn 3

end

procedure __utf8encoder."convert$system@IntNumber$@system@var#1&IntNumber$system@ByteArray$system@CharArray$@system@var#1&IntNumber[6]"

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  bloadsi 5
  
  callextr api : s_encode
  ifr labErr 0

  pushd
  dcopye  
  bloadsi 7
  nsave

  aloadsi 3
  nload
  ecopyd
  popd
  sub    

  bloadsi 3
  nsave
  aloadsi 1
  
  quitn 6

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __utf8encoder."convert$system@IntNumber$@system@var#1&IntNumber$system@CharArray$system@ByteArray$@system@var#1&IntNumber[6]"

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  bloadsi 5
  
  callextr api : s_decode
  ifr labErr 0

  pushd
  dcopye  
  bloadsi 7
  nsave

  aloadsi 3
  nload
  ecopyd
  popd
  sub    
  
  bloadsi 3
  nsave
  aloadsi 1
  
  quitn 6

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __utf8encoder."eval&charCount$system@LiteralValue$@system@var#1&IntNumber[3]"

  bcopya
  aloadsi 2
  blen
  dec
  ecopyd
  callextr api : strcharlen
  bloadsi 3
  nsave
  quitn 3

end

procedure __utf8encoder."convert$system@IntNumber$@system@var#1&IntNumber$system@LiteralValue$system@CharArray$@system@var#1&IntNumber[6]"

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  bloadsi 5
  
  callextr api : s_encode
  ifr labErr 0

  pushd
  dcopye  
  bloadsi 7
  nsave

  aloadsi 3
  nload
  ecopyd
  popd
  sub    

  bloadsi 3
  nsave
  aloadsi 1
  
  quitn 6

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __utf16encoder."convert$system@IntNumber$@system@var#1&IntNumber$system@ByteArray$system@CharArray$@system@var#1&IntNumber[6]"

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  bloadsi 5
  
  callextr api : ws_encode
  ifr labErr 0

  pushd
  dcopye  
  bloadsi 7
  nsave

  aloadsi 3
  nload
  ecopyd
  popd
  sub    

  bloadsi 3
  nsave
  aloadsi 1
  
  quitn 6

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __utf16encoder."convert$system@IntNumber$@system@var#1&IntNumber$system@CharArray$system@ByteArray$@system@var#1&IntNumber[6]"

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  bloadsi 5
  
  callextr api : ws_decode
  ifr labErr 0

  pushd
  dcopye  
  bloadsi 7
  nsave

  aloadsi 3
  nload
  ecopyd
  popd
  sub    

  bloadsi 3
  nsave
  aloadsi 1
  
  quitn 6

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __utf16encoder."eval&charCount$system@WideLiteralValue$@system@var#1&IntNumber[3]"

  bcopya
  aloadsi 2
  wlen
  dec
  ecopyd
  callextr api : wstrcharlen
  bloadsi 3
  nsave

end

procedure __utf16encoder."convert$system@IntNumber$system@IntNumber$system@ShortArray$system@CharArray$@system@var#1&IntNumber[6]"

  aloadsi 3
  nload
  shiftn -1
  ecopyd
  aloadsi 2
  nload
  shiftn -1
  aloadsi 4
  bloadsi 5
  
  callextr api : ws_encode
  ifr labErr 0

  dcopye  
  bloadsi 6
  nsave
  
  quitn 6

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __utf16encoder."convert$system@IntNumber$system@IntNumber$system@CharArray$system@ShortArray$@system@var#1&IntNumber[6]"

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  bloadsi 5
  
  callextr api : ws_decode
  ifr labErr 0

  dcopye  
  bloadsi 6
  nsave
  
  quitn 6

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __dptr.set[2]

  bcopya
  dloadsi 2
  nsave
  acopyb
  quitn 2

end

procedure __dptr."set&$system@UnsafePointer[2]"

  bcopya
  aloadsi 2
  ncopy
  acopyb
  quitn 2

end

procedure __dptr."write&$system@IntNumber[2]"

  nload
  pushd
  popb
  aloadsi 2
  nload
  nsave
  aloadsi 1
  quitn 2

end

procedure __dptr."read&$@system@var#1&IntNumber[2]"

  nload
  pushd
  popa
  nload
  bloadsi 2
  nsave
  aloadsi 1
  quitn 2

end

procedure __dptr."read&$system@ByteArray$system@IntNumber[3]"

  bloadsi 2
  aloadsi 3
  nload
  ecopyd
  aloadsi 1

  callextr api : subcopy  
  
  quitn 3

end

procedure __signature.dispatch[1]

  bloadsi 1
  ifb labDefault

  setsubj 0
  nload
  or
  aloadsi 1
  ecopyd
  ajumpvi 0
  
labDefault:
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw
  
end

procedure __signature."eval&load$system@Signature$system@LiteralValue[2]"

  aloadsi 2
  pusha
  callextr extern : LoadSubject
  pop
  ifn labErr 0
  bloadsi 1
  nsave
  acopyb

  quitn 2
 
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw

  quitn 2

end

procedure __signature."eval&load$system@Signature$system@Message[2]"

  bloadsi 1
  aloadsi 2
  nload
  ecopyd
  dcopysubj
  nsave
  acopyb
  quitn 2

end

procedure __message."get&$system@Signature[1]"

  pusha
  newn   class : system'Signature 4
  bcopya
  popa
  nload
  ecopyd
  dcopysubj
  nsave
  acopyb

  quitn 1

end

procedure __message.dispatch[1]

  bloadsi 1
  ifb labDefault

  nload
  eswap
  setverb EVAL_MESSAGE_ID
  setsubj 0
  else labEnd
  nload
  ecopyd
  aloadsi 1
  ajumpvi 0

labEnd:
  open    4
  reserve 1
  dsavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw

labDefault:
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw
  
end

procedure __message."eval&load$system@Message$system@LiteralValue[2]"

  aloadsi 2   // ; read aName parameter
  pusha
  callextr extern : LoadMessage
  pop
  ifn labError 0
  bloadsi 1
  nsave
  acopyb
  quitn 2

labError:
  pop
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw

end

procedure __extmessage.dispatch[1]

  bloadsi 1
  ifb labDefault

  nload
  eswap
  setverb EVAL_MESSAGE_ID
  setsubj 0
  else labEnd
  nload
  ecopyd
  ajumpi 1

labEnd:
  open    4
  reserve 1
  dsavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw

labDefault:
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw
  
end

procedure __extmessage."equal&$system@ExtensionMessage[2]"

  bloadsi 2
  lequal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __lazyexpression.dispatch[1]

  pushe
  pusha
  copym EVAL_MESSAGE_ID

  xindexrm system'BaseLazyExpression %"eval[0]"
  acallvd

  pope
  asavesi 1
  ajumpvi 0

end

procedure __struct.dispatch[1]

  bsredirect

  pushe
  dcopysubj
  pushd
  bcopya
  pushn 0

labNext:
  count
  dloadsi 0
  if labEnd
  get
  inc
  dsavesi 0

  flag
  andn elSubject
  ifn  labNext 0

  nload
  ecopyd
  dloadsi 1
  else labNext

labCall:
  dloadsi 0
  get
  popi 2
  pope
  setsubj 0
  ifm labQuit GET_MESSAGE_ID
  ajumpvi 0

labQuit:
  quitn 1
  
labEnd:
  popi 2
  pope
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw

end

procedure __event.dispatch[1]

  bsredirect  

  open 5
  reserve 2

  dcopye
  dsavefi -3
  dcopy 0  
  dsavefi -2

  aloadai 0 // ; get the first field !! better to define a special array (like castover group object)
  pusha
  bcopya

labNext:
  count
  dloadfi -2
  if labEnd

// ; define the message length
  dloadfi -3
  ecopyd
  dcopycount
  inc
  
// ; copy message
  bcopyf -5
labNextParam:
  get
  pusha
  dec
  elsen labNextParam 0

  bloadfi 1
  dloadfi -2
  get
  inc
  dsavefi -2

  dloadfi -3
  ecopyd
  acallvi 0
  
  bloadfi 1
  jump labNext

labEnd:
  dloadfi -3
  ecopyd
  restore 4
  close

  equit

end

procedure __tape.dispatch[1]

  dcopyverb
  eswap
  
  elsem labDefault EVAL_MESSAGE_ID

  ecopyd
  dcopycount
  inc
  ecopyd  

  open 5
  reserve 2
  pusha
  
  dsavefi -3
  dcopy 0  
  dsavefi -2
  
  pushn 0
  
  bcopyf -6
  
// ; copy message + self
labNextParam:
  get
  pusha
  next labNextParam

  bloadfi 1

labNext:
  breakpoint

  count
  dloadfi -2
  if labEnd
  get
  inc
  dsavefi -2

  flag
  ecopyd
  andn elMessage
  elsen labMessage 0
  pusha
  jump labNext

labMessage:
  dcopye
  andn elExtMessage
  elsen labExtMessage 0

  nload
  ecopyd
  aloadsi 0  
  acallvi 0
  pusha
  bloadfi 1
  jump labNext

labExtMessage:
  nload
  ecopyd
  acalli 1
  pusha
  bloadfi 1
  jump labNext

labEnd:
  popa

  dloadfi -3
  dec
  ecopyd
  restore 4
  close

  equit

labDefault:
  ecopyd
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw

end
