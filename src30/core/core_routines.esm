//        ELENA Language 2.0
//      inline system library

define EVAL_MESSAGE_ID      085000000h

procedure __object.dispatch[1]

  bsredirect  

  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw

end

procedure __object.equal[2]

  aloadsi 1
  bloadsi 2
  ifb     labTrue
  acopyr  const : system'false
  quitn   2
  
labTrue:
  acopyr const : system'true
  quitn 2
  
end

procedure __object.equal&reference[2]

  aloadsi 1
  bloadsi 2
  ifb     labTrue
  acopyr  const : system'false
  quitn   2
  
labTrue:
  acopyr const : system'true
  quitn 2
  
end

procedure __verb.dispatch[1]

  bloadsi 1
  ifb labDefault
  
  setverb 0
  nload
  or
  ecopyd
  aloadsi 1
  ajumpvi 0
  
labDefault:
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw
  
end

procedure __message.dispatch[1]

  bloadsi 1
  ifb labDefault

  nload
  eswap
  setverb EVAL_MESSAGE_ID
  setsubj 0
  else labEnd
  nload
  ecopyd
  aloadsi 1
  ajumpvi 0

labEnd:
  open    4
  reserve 1
  dsavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw

labDefault:
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw
  
end

procedure __signature.dispatch[1]

  bloadsi 1
  ifb labDefault

  setsubj 0
  nload
  or
  aloadsi 1
  ecopyd
  ajumpvi 0
  
labDefault:
  bsredirect  
  open    4
  reserve 1
  esavesi 2
  bcopys  -2
  pushb
  pushr class : system'MethodNotFoundException
  pushr const : %new&mssg$[1]
  throw
  
end

procedure __lazyexpression.dispatch[1]

  pushe
  pusha
  copym EVAL_MESSAGE_ID

  xindexrm system'BaseLazyExpression %eval[0]
  acallvd

  pope
  asavesi 1
  ajumpvi 0

end

procedure __literal.eval&readLength&vint$[2]

  aloadsi 1
  blen
  dec
  bloadsi 2
  nsave
  quitn 2

end

procedure __literal.eval&copy&literal$&int$&int$&bytearray$[4]

  bloadsi 1
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  
  callextr api : subcopy
  
  acopyb
  quitn 4

end

procedure __literal.eval&Substring&int$&int$[3]

  // ; calculate length
  aloadsi 3
  nload
  inc

  // ; create a new string  
  acopyr class : system'LiteralValue
  bcreate
  bcopya

  aloadsi 3
  nload
  ecopyd
  
  aloadsi 2
  nload

  aloadsi 1
  callextr api : subcopy
  
  acopyb
  blen
  ecopy 0
  dec
  bwriteb

  quitn 3

end

procedure __literal.add&literal$[2]

  blen
  dec
  ecopyd
  bcopya
  aloadsi 2
  blen
  add
  acopyr class : system'LiteralValue
  bcreate
  bswap
  blen
  dec
  ecopyd
  dcopy 0
  callextr api : insert
  ecopyd
  aloadsi 2
  blen
  eswap
  callextr api : insert
  acopyb

  quitn 2

end                                                

procedure __literal.equal&literal$[2]

  bloadsi 2
  callextr api : sequal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __literal.less&literal$[2]

  bloadsi 2
  callextr api : sless
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __literal.read&int$&vbyte$[3]

  bcopya
  blen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  acopyb
  breadb
  dcopye
  bloadsi 3
  nsave

  quitn 3
  
labErr:
  open 1
  pushr class : system'InvalidArgumentException
  pushr const : %new[0]
  throw  

end

procedure __literal.read&int$&vchar$[3]

  blen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  acopyb  
  callextr api : strtochar
  ifr labErr 0
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __wide.eval&readLength&vint$[2]

  aloadsi 1
  wlen
  dec
  bloadsi 2
  nsave
  quitn 2

end

procedure __wide.eval&Substring&int$&int$[3]

  // ; calculate length
  aloadsi 3
  nload
  inc

  // ; create a new string  
  acopyr class : system'WideLiteralValue
  wcreate
  bcopya

  aloadsi 3
  nload
  ecopyd
  
  aloadsi 2
  nload

  aloadsi 1
  callextr api : wsubcopy

  acopyb
  wlen
  ecopy 0
  dec
  shiftn -1
  bwritew

  quitn 3

end

procedure __wide.add&wide$[2]

  wlen
  dec
  ecopyd
  bcopya
  aloadsi 2
  wlen
  add
  acopyr class : system'WideLiteralValue
  wcreate
  bswap
  wlen
  dec
  ecopyd
  dcopy 0
  callextr api : winsert
  ecopyd
  aloadsi 2
  wlen
  eswap
  callextr api : winsert
  acopyb

  quitn 2

end                                                

procedure __wide.eval&copy&wide$&int$&int$&shortarray$[4]

  bloadsi 1
  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  
  callextr api : wsubcopy
  
  acopyb
  quitn 4

end

procedure __wide.equal&wide$[2]

  bloadsi 2
  callextr api : wequal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __wide.less&wide$[2]

  bloadsi 2
  callextr api : wless
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure __wide.read&int$&vchar$[3]

  wlen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  acopyb  
  callextr api : wstrtochar
  ifr labErr 0
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw

end

procedure __wide.read&int$&vshort$[3]

  wlen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  eaddn -1
  notless labErr
  lessn   labErr 0

  acopyb
  shiftn -1
  breadw
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  open 1
  pushr class : system'OutOfRangeException
  pushr const : %new[0]
  throw
  
end

procedure __literalconvertor.convert&int$&bytearray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor.convert&wide$&bytearray$&vint$[4]

  aloadsi 2
  bloadsi 3
  callextr api : wstrtostr
  bloadsi 4
  nwritei 0
  quitn 4
  
end

procedure __literalconvertor.convert&int$&int$&bytearray$&vint$[5]

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : inttostr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __literalconvertor.convert&short$&bytearray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor.convert&byte$&bytearray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttostr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __literalconvertor.convert&long$&bytearray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : longtostr

  bloadsi 4
  nwritei 0

  quitn 4


end

procedure __literalconvertor.convert&real$&bytearray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 24
  
  callextr api : realtostr

  bloadsi 4
  nwritei 0

  quitn 4
end

procedure __wideconvertor.convert&literal$&shortarray$&vint$[4]

  aloadsi 2
  bloadsi 3
  callextr api : strtowstr
  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __wideconvertor.convert&int$&int$&shortarray$&vint$[5]

  bloadsi 4
  aloadsi 3
  nload
  aloadsi 2
  
  callextr api : inttowstr

  bloadsi 5
  nwritei 0

  quitn 5

end

procedure __wideconvertor.convert&int$&shortarray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttowstr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __wideconvertor.convert&short$&shortarray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttowstr

  bloadsi 4
  nwritei 0

  quitn 4
  
end

procedure __wideconvertor.convert&byte$&shortarray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : inttowstr

  bloadsi 4
  nwritei 0

  quitn 4
  
end

procedure __wideconvertor.convert&long$&shortarray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 10
  
  callextr api : longtowstr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __wideconvertor.convert&real$&shortarray$&vint$[4]

  bloadsi 3
  aloadsi 2
  dcopy 24
  
  callextr api : realtowstr

  bloadsi 4
  nwritei 0

  quitn 4

end

procedure __char.eval&readLength&vint$[2]

  bloadsi 2
  nload
  // ; < 80 - 1
  ecopy 1
  lessn labEnd 80h
  eaddn 1
  // ; <= 800 - 2
  lessn labEnd 800h 
  eaddn 1
  lessn labEnd 10000h 
  // ; <= 10000 - 3
  eaddn 1
  // ; - 4
labEnd:
  dcopye
  nsave  
  quitn 2

end
