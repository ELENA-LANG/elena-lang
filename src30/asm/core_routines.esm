//        ELENA Language 2.0
//      inline system library

define NEW_MESSAGE_ID       084000000h
define NEW_MESSAGE_ID_1     084000001h
define EVAL_MESSAGE_ID      085000000h
define GET_MESSAGE_ID       086000000h

define elMessage            000008000h
define elRole               000004000h
define elSubject            000002000h
define elStructure          000000008h

procedure inline'dispatch

  bsredirect
  acopyr const : system'MethodNotFoundException
  throw

end

procedure inline'typecast

  type
  if       labExit
  setverb  GET_MESSAGE_ID
  pusha
  acallvi  0
labExit:
  quit

end

procedure inline'exception_redirect

  bsredirect
  throw

end

procedure inline'ws_create

  aloadsi 3
  nload
  inc
  acopyr class : system'LiteralValue
  wcreate
  quit

end

procedure inline'sa_create

  aloadsi 3
  nload
  acopyr class : system'ShortArray
  wcreate
  quit

end

procedure inline'bs_create

  aloadsi 3
  nload
  acopyr class : system'ByteArray
  bcreate
  quit

end

procedure inline'ws_copy

  bcopya
  aloadsi 3
  copy
  acopyb
  quitn 2

end

procedure inline'ws_copyarr

  bcopya
  aloadsi 3
  copy
  acopyb
  wlen
  ecopy 0
  dec
  wsave
  quitn 2

end

procedure inline'ws_copyint

  dcopy 10
  acopyr class : system'LiteralValue
  wcreate
  bcopya
  aloadsi 2
  dcopy 10
  ntow
  acopyb
  quitn 2

end

procedure inline'ws_copylong

  dcopy 64
  acopyr class : system'LiteralValue
  wcreate
  bcopya
  aloadsi 2
  dcopy 10
  ltow
  acopyb
  quitn 2

end

procedure inline'ws_getlen

  wlen
  dec
  bloadsi 2
  nsave
  quitn 2

end

procedure inline'bs_equalword

  bcopya
  len
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  loadw
  aloadsi 3
  nload  
  else    labFalse

  acopyr  const : system'true
  quitn 3

labFalse:  
  acopyr  const : system'false
  quitn 3
  
labErr:
  callr system'InvalidArgumentException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'bs_equalint

  bcopya
  len
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  load
  aloadsi 3
  nload  
  else    labFalse

  acopyr  const : system'true
  quitn 3

labFalse:  
  acopyr  const : system'false
  quitn 3
  
labErr:
  callr system'InvalidArgumentException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'bs_readword

  bcopya
  len
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  loadw
  dcopye
  bloadsi 3
  nsave

  acopyb
  quitn 2
  
labErr:
  callr system'InvalidArgumentException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'object_equal

  aloadsi 1
  bloadsi 2
  ifb     labTrue
  acopyr  const : system'false
  quitn   2
  
labTrue:
  acopyr const : system'true
  quitn 2
  
end

procedure inline'int_equal

  bloadsi 2
  nequal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure inline'ws_equal

  bloadsi 2
  wequal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure inline'int_less

  bloadsi 2
  nless
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure inline'ws_less

  bloadsi 2
  wless
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure inline'int_add

  pusha
  newn   class : system'IntNumber 4
  bcopya
  popa
  ncopy
  aloadsi 2
  nadd
  acopyb
  quitn 2

end

procedure inline'int_sub

  pusha
  newn   class : system'IntNumber 4
  bcopya
  popa
  ncopy
  aloadsi 2
  nsub
  acopyb
  quitn 2

end

procedure inline'int_mul

  pusha
  newn   class : system'IntNumber 4
  bcopya
  popa
  ncopy
  aloadsi 2
  nmul
  acopyb
  quitn 2

end

procedure inline'int_div

  pusha
  newn   class : system'IntNumber 4
  bcopya
  popa
  ncopy
  aloadsi 2
  ndiv
  acopyb
  quitn 2

end

procedure inline'int_and

  pusha
  newn   class : system'IntNumber 4
  bcopya
  popa
  ncopy
  aloadsi 2
  nand
  acopyb
  quitn 2

end

procedure inline'int_or

  pusha
  newn   class : system'IntNumber 4
  bcopya
  popa
  ncopy
  aloadsi 2
  nor
  acopyb
  quitn 2

end

procedure inline'int_xor

  pusha
  newn   class : system'IntNumber 4
  bcopya
  popa
  ncopy
  aloadsi 2
  nxor
  acopyb
  quitn 2

end

procedure inline'int_copystr
  
  bloadsi  3
  dcopy    10
  aloadsi  2
  wton
  ifn      labErr 0
  quitn    2

labErr:
  callr system'FormatException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'int_saveshort

  pusha
  bcopya
  acopyr  const : system'shortMaximalValue
  nless
  ifn     labEnd 0

  callr   system'OutOfRangeException
  pusha
  copym   NEW_MESSAGE_ID
  acallvi 0
  throw  

labEnd:
  popa
  bloadsi 2
  ncopy
  quitn 2

end

procedure inline'ws_equalword

  bcopya
  wlen
  ecopyd  
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0
 
  wload
  aloadsi 3
  nload  
  else    labFalse

  acopyr  const : system'true
  quitn 3

labFalse:  
  acopyr  const : system'false
  quitn 3
  
labErr:
  callr system'InvalidArgumentException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'ws_add

  wlen
  dec
  ecopyd
  bcopya
  aloadsi 2
  wlen
  add
  acopyr class : system'LiteralValue
  wcreate
  bswap
  wlen
  dec
  ecopyd
  dcopy 0
  winsert
  ecopyd
  aloadsi 2
  wlen
  eswap
  winsert
  acopyb

  quitn 2

end                                                

procedure inline'long_equal

  bloadsi 2
  lequal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure inline'long_less

  bloadsi 2
  lless
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure inline'long_add

  pusha
  newn   class : system'LongNumber 8
  bcopya
  popa
  lcopy
  aloadsi 2
  ladd
  acopyb
  quitn 2

end

procedure inline'long_sub

  pusha
  newn   class : system'LongNumber 8
  bcopya
  popa
  lcopy
  aloadsi 2
  lsub
  acopyb
  quitn 2

end

procedure inline'long_mul

  pusha
  newn   class : system'LongNumber 8
  bcopya
  popa
  lcopy
  aloadsi 2
  lmul
  acopyb
  quitn 2

end

procedure inline'long_div

  pusha
  newn   class : system'LongNumber 8
  bcopya
  popa
  lcopy
  aloadsi 2
  ldiv
  acopyb
  quitn 2

end

procedure inline'long_and

  pusha
  newn   class : system'LongNumber 8
  bcopya
  popa
  lcopy
  aloadsi 2
  land
  acopyb
  quitn 2

end

procedure inline'long_or

  pusha
  newn   class : system'LongNumber 8
  bcopya
  popa
  lcopy
  aloadsi 2
  lor
  acopyb
  quitn 2

end

procedure inline'long_xor

  pusha
  newn   class : system'LongNumber 8
  bcopya
  popa
  lcopy
  aloadsi 2
  lxor
  acopyb
  quitn 2

end
                 
procedure inline'int_shift

  newn   class : system'IntNumber 4
  bcopya
  aloadsi 2    // ; load index
  nload
  nshift
  acopyb
  quitn 2
  
end

procedure inline'int_not

  newn   class : system'IntNumber 4
  bcopya
  aloadsi 1    // ; load source
  nnot         // ; invert
  acopyb
  quitn 1
  
end
                 
procedure inline'long_shift

  newn   class : system'LongNumber 8
  bcopya
  aloadsi 2    // ; load index
  nload
  lshift
  acopyb
  quitn 2
  
end

procedure inline'long_not

  newn   class : system'LongNumber 8
  bcopya
  aloadsi 1    // ; load source
  lnot         // ; invert
  acopyb
  quitn 1
  
end

procedure inline'real_equal

  bloadsi 2
  requal
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure inline'real_less

  bloadsi 2
  rless
  selectr const : system'false const : system'true
  quitn 2
  
end

procedure inline'real_add

  pusha
  newn   class : system'RealNumber 8
  bcopya
  popa
  rcopy
  aloadsi 2
  radd
  acopyb
  quitn 2

end

procedure inline'real_sub

  pusha
  newn   class : system'RealNumber 8
  bcopya
  popa
  rcopy
  aloadsi 2
  rsub
  acopyb
  quitn 2

end

procedure inline'real_mul

  pusha
  newn   class : system'RealNumber 8
  bcopya
  popa
  rcopy
  aloadsi 2
  rmul
  acopyb
  quitn 2

end

procedure inline'real_div

  pusha
  newn   class : system'RealNumber 8
  bcopya
  popa
  rcopy
  aloadsi 2
  rdiv
  acopyb
  quitn 2

end

procedure inline'ws_copyreal

  dcopy 30
  acopyr class : system'LiteralValue
  wcreate
  bcopya
  aloadsi 2
  dcopy 24
  rtow
  acopyb
  quitn 2

end

procedure inline'ws_getat

  wlen
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  wload
  acopyb
  bloadsi 3
  dcopye
  nsave
  quitn 3

labErr:
  callr system'OutOfRangeException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'arr_create

  aloadsi 3
  nload
  acopyr class : system'Array
  create

  bcopya
  aloadsi 3
  nload
  
  acopyr const : system'nil
labNext:
  dec
  xset
  elsen labNext 0

  acopyb
  quit

end

procedure inline'arr_getat

  count
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  get
  quitn 2

labErr:
  callr system'OutOfRangeException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'arr_setat

  count
  bcopya
  ecopyd
  aloadsi 2
  nload  
  notless labErr
  lessn   labErr 0

  aloadsi 3
  set
  quitn 3

labErr:
  callr system'OutOfRangeException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'arr_getlen

  count
  bloadsi 2
  nsave
  quitn 2

end

procedure inline'args_create

  callr system'NotSupportedException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'args_getlen

  bcopya
  dcopy 0
  ecopyd
  xseek
  bloadsi 2
  nsave
  quitn 2

end

procedure inline'ws_fill
  
  bcopya
  wlen
  dec
  
  // ; set zero at the end
  ecopy 0 
  wsave
  ecopyd

  aloadsi 3
  nload
  eswap

labNext:
  dec
  wsave
  elsen labNext 0 

  acopyb
  quitn 3

end

procedure inline'ws_indexof

  bcopya
  aloadsi 2                 // ; load index
  nload
  aloadsi 3                 // ; load searching str
  wseek
  acopyb
  bloadsi 4                 // ; load target
  nsave                    // ; save index
  quitn 4

end

procedure inline'ws_insert

  // ; calculate length
  wlen
  dec
  ecopyd
  
  aloadsi 3
  wlen
  add

  acopyr class : system'LiteralValue
  wcreate

  // ; copy left side               
  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 1
  dcopy 0
  winsert

  // ; insert
  aloadsi 3
  ecopyd
  wlen
  dec
  eswap
  winsert
  
  // ; copy right side 
  ecopyd
  aloadsi 2
  nload  
  eswap
  aloadsi 1
  wadd

  acopyb
  quitn 3
  
end

procedure inline'ws_delete

  bcopya

  // ; calculate length
  aloadsi 2
  nload
  ecopyd

  acopyb
  wlen
  sub

  acopyr class : system'LiteralValue
  wcreate

  // ; copy left side               
  bcopya
  aloadsi 2
  nload
  ecopyd
  aloadsi 1
  dcopy 0
  winsert                  

  // ; copy right side 
  ecopyd          
  aloadsi 3
  nload
  add
  eswap
  aloadsi 1
  wadd

  acopyb
  quitn 3
  
end

procedure inline'ws_subs

  // ; calculate length
  aloadsi 3
  nload
  inc

  // ; create a new string  
  acopyr class : system'LiteralValue
  wcreate
  bcopya

  aloadsi 3
  nload
  ecopyd
  
  aloadsi 2
  nload

  aloadsi 1
  wsubcopy

  acopyb
  wlen
  ecopy 0
  dec
  wsave

  quitn 3

end

procedure inline'qualify_message

  setsubj 0
  nload
  or
  aloadsi 1
  ecopyd
  ajumpvi 0
  
end

procedure inline'handle_message

  nload
  else labEnd
  setverb EVAL_MESSAGE_ID
  aloadsi 1
  bsredirect
labEnd:
  throw
  
end

procedure inline'get_property

  pushai 1
  aloadai 0
  nload
  else labEnd
  popa
  quitn 1

labEnd:
  throw

end

procedure inline'bs_getlen

  len
  bloadsi 2
  nsave
  quitn 2

end

procedure inline'sa_write

  bcopya
  wlen
  ecopyd
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0

  aloadsi 3
  pushe
  ecopyd
  nload
  add
  pope
  notless labErr
  lessn   labErr 0

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  aloadsi 4
  winsert
  
  acopyb
  quitn 4
  
labErr:
  callr system'InvalidArgumentException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'sa_read

  bcopya
  wlen
  ecopyd
  aloadsi 2
  nload
  notless labErr
  lessn   labErr 0

  aloadsi 3
  pushe
  ecopyd
  nload
  add
  pope
  notless labErr
  lessn   labErr 0

  aloadsi 3
  nload
  ecopyd
  aloadsi 2
  nload
  acopyb
  bloadsi 4
  wsubcopy
  
  quitn 4
  
labErr:
  callr system'InvalidArgumentException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'sa_getlen

  wlen
  bloadsi 2
  nsave
  quitn 2

end

procedure inline'long_copyint
  
  bloadsi 3
  aloadsi 2
  lcopyn
  acopyb
  quitn 2

end

procedure inline'real_copyint
  
  bloadsi 3
  aloadsi 2
  rcopyn
  acopyb
  quitn 2

end

procedure inline'int_copy

  bcopya
  aloadsi 2
  ncopy
  acopyb
  quitn 2

end

procedure inline'int_copyshort

  bcopya
  aloadsi 2
  nload
  andn 0FFFFh
  nsave
  acopyb
  quitn 2

end

procedure inline'int_init

  bcopya
  dcopy 0
  nsave
  acopyb
  quitn 1

end

procedure inline'long_copy

  bcopya
  aloadsi 2
  lcopy
  acopyb
  quitn 2

end

procedure inline'long_copystr
  
  bloadsi  3
  dcopy    10
  aloadsi  2
  wtol
  ifn      labErr 0
  quitn    2

labErr:
  callr system'FormatException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'real_copystr
  
  bloadsi  3
  dcopy    10
  aloadsi  2
  wtor
  ifn      labErr 0
  quitn    2

labErr:
  callr system'FormatException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'handle_tape

  dcopyverb
  eswap
  
  elsem labErr EVAL_MESSAGE_ID

  dcopycount
  inc
  ecopyd

  open 5
  reserve 2
  pusha
  
  dsavefi -3
  dcopy 0  
  dsavefi -2
  
  bcopya
  pushn 0

  dcopy 0  
  acopys 8
labNextParam:
  aload
  pusha
  add
  else labNextParam

labNext:
  acopyb
  count
  ecopyd
  dloadfi -2
  if labEnd
  aload
  inc
  dsavefi -2

  flag
  andn elMessage
  elsen labMessage 0
  pusha
  jump labNext

labMessage:
  nload
  ecopyd
  aloadsi 0  

  flag
  andn elRole
  ifn labSkip 0
  popa
labSkip:

  acallvi 0
  pusha
  bloadfi 1
  jump labNext

labEnd:
  popa

  dloadfi -3
  ecopyd
  restore 4
  close

  equit

labErr:
  throw

end

procedure inline'handle_selector

  pushe
  dcopysubj
  pushd
  bcopya
  pushn 0

labNext:
  acopyb
  count
  ecopyd
  dloadsi 0
  if labEnd
  aload
  inc
  dsavesi 0

  flag
  andn elSubject
  ifn  labNext 0

  nload
  ecopyd
  dloadsi 1
  else labNext

labCall:
  dloadsi 0
  acopyb
  aload
  popi 2
  pope
  setsubj 0
  dcopye
  ifn labQuit GET_MESSAGE_ID
  ajumpvi 0

labQuit:
  quitn 1
  
labEnd:
  throw

end

procedure inline'thread_start

  aloadsi 1
  callr api : coreapi'resolve_index
  callr api : coreapi'start_thread
  quitn 1
  
end

procedure inline'api_alloc_index

  aloadsi 2  
  callr api : coreapi'alloc_index
  aloadsi 3
  nsave
  quitn 3

end

procedure inline'api_free_index
                      
  aloadsi 2           
  nload
  callr api : coreapi'free_index
  quitn 2
  
end

procedure inline'symbol_redirect

  pushe
  nload
  ecopyd
  ecall
  pope
  ajumpvi 0

end

procedure inline'symbol_new

  pusha
  aloadsi 3   // ; read aName parameter
  bcopya
  weval
  dcopye
  ifn labError 0
  popb
  nsave
  acopyb
  quitn 2

labError:
  callr system'InvalidArgumentException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'vmscript_eval

  aloadsi 2
  pusha
  callextr extern : 'dlls'elenasm.EvaluateScript
  ifn labErr 0
  pushd
  popa
  popi 2
  quitn 2

labErr:
  callr system'dynamic'scriptLastError
  pusha  
  callr system'dynamic'ScriptException
  pusha
  copym NEW_MESSAGE_ID_1
  acallvi 0
  throw
    
end

procedure inline'vmscript_load

  aloadsi 5
  nload
  pushd
  aloadsi 5
  nload
  pushd
  aloadsi 5
  pusha
  callextr extern : 'dlls'elenasm.EvaluateFile
  ifn labErr 0
  pushd
  popa
  popi 4
  quitn 4

labErr:
  callr system'dynamic'scriptLastError
  pusha  
  callr system'dynamic'ScriptException
  pusha
  copym NEW_MESSAGE_ID_1
  acallvi 0
  throw
    
end

procedure inline'class_getLen

  ecopy 0
  aloadsi 2
  flag
  andn elStructure
  elsen labSkip 0
  count
  ecopyd
labSkip:
  dcopye
  bloadsi 3
  nsave
  aloadsi 1
  quitn 2
  
end

procedure inline'class_get                                        

  bloadsi 3
  flag
  andn elStructure
  elsen labErr 0
  count

  aloadsi 3
  nload

  notless labErr
  lessn   labErr 0

  get
  quitn 3

labErr:
  callr system'OutOfRangeException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw
  
end
                    
procedure inline'class_getName

  open 5
  reserve 129
  acopys 3
  bcopya
  dcopy 128
  wname
  ifn labErr 0
  acopys 3
  pusha
  acopys 2
  nsave
  pusha
  copym subject : new&length&shortarray[2]
  acopyr class : system'LiteralValue
  pusha
  acallvi 0

  quitn 1
  
labErr:  
  callr system'InvalidArgumentException
  pusha
  copym NEW_MESSAGE_ID
  acallvi 0
  throw

end

procedure inline'class_getClass

  bcopya
  class
  quitn 1

end

procedure inline'class_indexOfMsg

  bcopya
  aloadsi 3   // ; get message
  nload      // ; load message id
  acopyb
  mindex
  ifn labFalse 0FFFFFFFFh
  acopyr  const : system'true
  quitn 2

labFalse:
  acopyr  const : system'false
  quitn 2

end
